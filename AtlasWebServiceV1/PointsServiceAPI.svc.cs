using Nexmo.Api;
using PointsSystemWebService.Classes;
using PointsSystemWebService.Classes.Authentication;
using PointsSystemWebService.Classes.Core;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Text;
using System.Web;
using System.Web.Security;
using System.Runtime.InteropServices;
using Excel = Microsoft.Office.Interop.Excel;
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using SwaggerWcf.Attributes;
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using CipherLibrary.Cipher;
using System.Reflection;
using System.Text.RegularExpressions;
using DataServiceLayer.Repository;
using System.Web.Script.Serialization;
using PointsSystemWebService.Classes.Flo;
using Newtonsoft.Json;
using WooCommerceNET.WooCommerce.Legacy;
using WooCommerceNET;
using PointsSystemWebService.Classes.WooCommerce;

namespace PointsSystemWebService
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "PointsServiceAPI" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select PointsServiceAPI.svc or PointsServiceAPI.svc.cs at the Solution Explorer and start debugging.
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    [SwaggerWcf("/v1/rest")]

    public class PointsServiceAPI : IPointsServiceAPI
    {
        public static bool APITestingMode = false;
        public static MatjarTestDBEntities db;

        public PointsServiceAPI()
        {
            //CheckLicense
            //ServiceMethod.CheckLicense();

            db = new MatjarTestDBEntities();
        }

        //AppName
        [SwaggerWcfTag("AppName")]
        public string GetAppName()
        {
            return "نادي أطلس";
        }



        [SwaggerWcfTag("Captcha")]
        public ResultClass<string> VerifyCaptcha(string response)
        {
            ResultClass<string> result = new ResultClass<string>();

            //string ReCaptcha_Key = "6LcbmjQUAAAAAGsdatIiZDf9LCBVH0briWj0UWc0";
            string ReCaptcha_Secret = "6LcbmjQUAAAAANVKL143t6gUOJm_EsomVyus9NHU";

            string url = string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}",
               ReCaptcha_Secret, response);
            var client = new WebClient();
            var reply = client.DownloadString(url);

            result.Result = reply;
            return result;
        }

        [SwaggerWcfTag("Captcha")]
        public ResultClass<string> VerifyInvisibleCaptcha(string response)
        {
            ResultClass<string> result = new ResultClass<string>();

            //string ReCaptcha_Key = "6Lcz5lAUAAAAAGSgeNrS6F3LhjV2nkmDlswjuEwR";
            //Yallaasouq
            string ReCaptcha_Secret = "6Lcz5lAUAAAAAIa0S-xUFXT1Y9LcvRipB02x5B-y";
            //matjardemo
            //string ReCaptcha_Secret = "6LeX-WkUAAAAACWKLDqneMNwNaqoaq2C33EW_vDt";

            string url = string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}",
               ReCaptcha_Secret, response);
            var client = new WebClient();
            var reply = client.DownloadString(url);

            result.Result = reply;
            return result;
        }



        [SwaggerWcfTag("Login")]
        public ResultClass<UserClass> SignUp_ForMatjar(UserClass User)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                //Check license validity
                if (!User.Disabled)
                {
                    int resultCode = Errors.Success;//ServiceMethod.CheckUserLicenseLimit();
                    if (resultCode != Errors.Success) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "AppSignUp";

                    string Password;
                    if (!String.IsNullOrWhiteSpace(User.Password))
                        Password = FormsAuthentication.HashPasswordForStoringInConfigFile(User.Password, "MD5");
                    else
                        Password = "";

                    if (User.Username != null)
                        User.Username = Regex.Replace(User.Username, "^0", "");

                    if (User.MobileNumber != null)
                        User.MobileNumber = Regex.Replace(User.MobileNumber, "^0", "");
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  //new SqlParameter("Username", User.Username),
                  //new SqlParameter("Username", User.Username?.TrimStart('0')),
                  new SqlParameter("FullName", User.FullName),
                  new SqlParameter("Password", Password),
//                  new SqlParameter("MobileNumber", User.MobileNumber),
                  //new SqlParameter("MobileNumber", User.MobileNumber?.TrimStart('0')),                  
                  new SqlParameter("MobileCountryCode", User.MobileCountryCode),
               };

                    if (User.CountryCurrencyId > 0)
                        Params.Add(new SqlParameter("CountryCurrencyId", User.CountryCurrencyId));

                    if (User.CountryId > 0)
                        Params.Add(new SqlParameter("CountryId", User.CountryId));

                    if (User.CurrencyId > 0)
                        Params.Add(new SqlParameter("CurrencyId", User.CurrencyId));

                    if (User.GovernorateId > 0)
                        Params.Add(new SqlParameter("GovernorateId", User.GovernorateId));

                    if (User.CityId > 0)
                        Params.Add(new SqlParameter("CityId", User.CityId));

                    if (User.LocationId > 0)
                        Params.Add(new SqlParameter("LocationId", User.LocationId));

                    if (User.BlockNo != "")
                        Params.Add(new SqlParameter("BlockNo", User.BlockNo));

                    if (User.Street != "")
                        Params.Add(new SqlParameter("Street", User.Street));

                    if (User.Building != "")
                        Params.Add(new SqlParameter("Building", User.Building));

                    if (User.Floor != "")
                        Params.Add(new SqlParameter("Floor", User.Floor));

                    if (User.ApartmentNo != "")
                        Params.Add(new SqlParameter("ApartmentNo", User.ApartmentNo));

                    if (User.AddressNote != "")
                        Params.Add(new SqlParameter("AddressNote", User.AddressNote));

                    if (User.Gender > 0)
                        Params.Add(new SqlParameter("Gender", User.Gender));

                    if ((User.Birthdate != null))
                        if ((User.Birthdate != ""))
                            Params.Add(new SqlParameter("Birthdate", User.Birthdate));

                    if (User.MobileNumber != null)
                        Params.Add(new SqlParameter("MobileNumber", User.MobileNumber));

                    if (User.Username != null)
                        Params.Add(new SqlParameter("Username", User.Username));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        //UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        //login to get access token
                        User.Username = Regex.Replace(User.Username, "^0", "");
                        var user = AppLogin(new LoginClass { Username = User.Username, Password = User.Password, MobileCountryCode = User.MobileCountryCode }).Result;
                        //var user = AppLogin(new LoginClass { Username = User.Username?.TrimStart('0'), Password = User.Password, MobileCountryCode = User.MobileCountryCode }).Result;

                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateUser_ForMatjar", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<UserClass> Login(LoginClass Login)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                Login.Username = Login.Username.ToLower().Trim();

                result = Signin.InitializeLogin(Login);
                if (result.Code == Errors.Success)
                {
                    if (result.Result != null)
                    {
                        result.Result.AccessToken = Authenticate(Login).Result;
                        //Add Token To Db
                        result = new TokenBuilder().UpdateToken(result.Result.Id, result.Result);
                    }
                }
                else
                {
                    //Fix code notation !!
                    if (result.Code == 200)
                    {
                        result.Code = 3;
                        result.Message = Errors.GetErrorMessage(result.Code);
                    }
                    if (result.Code == 13)
                    {
                        result.Code = 2;
                        result.Message = Errors.GetErrorMessage(result.Code);
                    }
                }
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "Login", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Login")]
        public ResultClass<UserClass> AppLogin(LoginClass Login)
        {
            Login.Username = Login.Username.ToLower().Trim();
            var user = Signin.InitializeAppLogin(Login);
            if (user.Code == Errors.Success)
            {
                if (user.Result != null)
                {
                    user.Result.Password = Login.Password;
                    if (user.Result.Username != "guest123")
                    {
                        user.Result.AccessToken = new TokenBuilder().GenerateToken(user.Result);
                        //user.Result.AccessToken = Authenticate(Login).Result;

                        //Add Token To Db
                        new TokenBuilder().UpdateToken(user.Result.Id, user.Result);
                    }
                }
            }
            else
            {
                //Fix code notation !!
                if (user.Code == 200)
                {
                    user.Code = 3;
                    user.Message = Errors.GetErrorMessage(user.Code);
                    user.Result = null;
                }
                if (user.Code == 13)
                {
                    user.Code = 2;
                    user.Message = Errors.GetErrorMessage(user.Code);
                    user.Result = null;
                }
            }

            if (user.Result != null)
                user.Result.Password = ""; //clear password after generation new token 

            return user;
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<UsernameAvailableClass> CheckIfUsernameAvailable(string Username, string FullName, string Birthdate)
        {
            ResultClass<UsernameAvailableClass> result = new ResultClass<UsernameAvailableClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CheckIfUsernameAvaliable";
                    SqlParameter Param1 = new SqlParameter("Username", Username);
                    cmd.Parameters.Add(Param1);
                    SqlParameter Param2 = new SqlParameter("FullName", FullName);
                    cmd.Parameters.Add(Param2);
                    SqlParameter Param3 = new SqlParameter("Birthdate", Birthdate);
                    cmd.Parameters.Add(Param3);

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        var resultClass = new UsernameAvailableClass().PopulateUsernameAvailable(fieldNames, reader);

                        result.Result = resultClass;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CheckIfUsernameAvaliable", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<MobileAvailableClass> CheckIfMobileAvailable(string MobileNumber, string MobileCountryCode)
        {
            ResultClass<MobileAvailableClass> result = new ResultClass<MobileAvailableClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CheckIfMobileAvailable";

                    if (MobileNumber != null)
                        MobileNumber = Regex.Replace(MobileNumber, "^0", "");
                    if (MobileCountryCode != null)
                        MobileCountryCode = Regex.Replace(MobileCountryCode, "^0", "");

                    List<SqlParameter> Params = new List<SqlParameter>();

                    if (MobileNumber != null)
                        Params.Add(new SqlParameter("MobileNumber", MobileNumber));
                    if (MobileCountryCode != null)
                        Params.Add(new SqlParameter("MobileCountryCode", MobileCountryCode));
                    cmd.Parameters.AddRange(Params.ToArray());


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        var resultClass = new MobileAvailableClass().PopulateMobileAvailable(fieldNames, reader);

                        result.Result = resultClass;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CheckIfUsernameAvaliable", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<VerifyMobileNumberClass> RequestVerifyCode(string MobileNo, string MobileCountryCode)
        {
            if (MobileNo != null)
                MobileNo = Regex.Replace(MobileNo, "^0", "");
            string newMobileNo = MobileNo;
            //string newMobileNo = MobileNo?.TrimStart('0');
            //var country = GetCountry(CountryId).Result;

            //if (country?.CountryCode != null || country.CountryCode != 0)
            {
                newMobileNo = MobileCountryCode + newMobileNo;
            }

            return VerifyMobileNumberBySMS(newMobileNo, "Matjar App");
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<VerifyMobileNumberClass> VerifyMobileNumberBySMS(string MobileNo, string Brand = "ICC")
        {
            ResultClass<VerifyMobileNumberClass> result = new ResultClass<VerifyMobileNumberClass>();
            result.Result = new VerifyMobileNumberClass();
            try
            {
                NumberVerify.VerifyResponse start;
                if (String.IsNullOrWhiteSpace(Brand))
                    start = NumberVerify.Verify(new NumberVerify.VerifyRequest { number = MobileNo, brand = "ICC" });
                else
                    start = NumberVerify.Verify(new NumberVerify.VerifyRequest { number = MobileNo, brand = Brand });

                //Status Code REF: https://developer.nexmo.com/api/verify

                result.Result.request_id = start.request_id;
                result.Result.status = start.status;
                if (start.status != "0")
                {
                    if (start.status == "10")
                        result.Result.error_text = Errors.GetErrorMessage(-1 * Convert.ToInt32(start.status));

                    else if (start.status == "16")
                        result.Result.error_text = Errors.GetErrorMessage(-1 * Convert.ToInt32(start.status));

                    else if (start.status == "17")
                        result.Result.error_text = Errors.GetErrorMessage(-1 * Convert.ToInt32(start.status));

                    else if (start.status == "15")
                        result.Result.error_text = Errors.GetErrorMessage(-1 * Convert.ToInt32(start.status));

                    else
                        result.Result.error_text = Errors.GetErrorMessage(-1) + " " + start.error_text;
                }
                else
                    result.Result.error_text = "";
                result.Code = Errors.Success;
                result.Message = "";
            }
            catch (Exception e)
            {
                result.Code = Errors.UnknownError;
                result.Message = e.Message;
                if (e.InnerException != null)
                {
                    result.Message = result.Message + " ***** " + e.InnerException.Message;
                    if (e.InnerException.InnerException != null)
                        result.Message = result.Message + " **** " + e.InnerException.InnerException.Message;
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "VerifyMobileNumberBySMS", e.Source, "");
                }
                result.Result = null;
                return result;
            }
            return result;
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<CheckMobileVerificationCodeClass> CheckMobileVerificationCode(string MobileNo, string requestid, string code)
        {
            ResultClass<CheckMobileVerificationCodeClass> result = new ResultClass<CheckMobileVerificationCodeClass>();
            try
            {
                result.Result = new CheckMobileVerificationCodeClass();
                var check = NumberVerify.Check(new NumberVerify.CheckRequest
                {
                    request_id = requestid,
                    code = code
                });
                result.Result.status = check.status;
                if (check.status != "0")
                {
                    if (check.status == "10")
                        result.Result.error_text =
                           "لا يسمح بالتحققات المتزامنة لنفس الرقم. يرجى الإنتظار لمدة 10 دقائق و إعادة المحاولة";
                    else if (check.status == "16")
                        result.Result.error_text = "الرمز المدخل غير صحيح. يرجى إعادة المحاولة بعد 5 دقائق";
                    else if (check.status == "17")
                        result.Result.error_text =
                           "تم إدخال الرمز بشكل خاطئ ثلاث مرات يرجى  الإنتظار لمدة 10 دقائق و إعادة المحاولة";
                    else
                        result.Result.error_text =
                           "خطأ غير معروف. يرجى إعادة المحاولة قد يكون الخطأ بسبب مشكلة في الشبكة أو الإتصال" + " " +
                           check.error_text;
                    result.Message = result.Result.error_text;
                    result.Result.IsAlreadyRegistered = false;
                    result.Result.User = null;
                    return result;
                }
                else
                {
                    try
                    {
                        using (SqlConnection conn = ConnectionClass.GetDataConnection())
                        {
                            conn.Open();
                            SqlCommand cmd = new SqlCommand();
                            cmd.Connection = conn;
                            cmd.CommandType = System.Data.CommandType.StoredProcedure;
                            cmd.CommandText = "Admin_GetUserByMobileNumber";
                            List<SqlParameter> Params = new List<SqlParameter>()
                     {
                        new SqlParameter("MobileNumber", MobileNo)
                     };

                            cmd.Parameters.AddRange(Params.ToArray());
                            SqlDataReader reader = cmd.ExecuteReader();

                            if (reader.HasRows)
                            {
                                UserClass user;
                                reader.Read();
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                user = new UserClass().PopulateUser(fieldNames, reader);

                                if (fieldNames.Contains("AccessToken"))
                                    if (!Convert.IsDBNull(reader["AccessToken"]))
                                        user.AccessToken = reader["AccessToken"].ToString();


                                user.Order = 1;

                                result.Code = Errors.Success;
                                result.Message = "";
                                result.Result.IsAlreadyRegistered = true;
                                result.Result.User = user;

                                return result;
                            }
                            else
                            {
                                result.Code = Errors.Success;
                                result.Message = "";
                                result.Result.IsAlreadyRegistered = false;
                                result.Result.User = null;
                                return result;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        int errorcode;
                        if (Int32.TryParse(e.Message, out errorcode))
                        {
                            result.Code = errorcode;
                            result.Message = Errors.GetErrorMessage(errorcode);
                        }
                        else
                        {
                            result.Code = Errors.UnknownError;
                            result.Message = Errors.GetErrorMessage(result.Code);
                            Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "CheckMobileVerificationCode",
                               e.Source, "");
                        }
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                result.Code = Errors.UnknownError;
                result.Message = "Error";
                result.Result = null;
                Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "CheckMobileVerificationCode", e.Source, "");
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<UserClass> ChangePassword(int LoggedUser, string NewPassword)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ChangeUserPassword";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    string Password;
                    if (!String.IsNullOrWhiteSpace(NewPassword))
                        Password = FormsAuthentication.HashPasswordForStoringInConfigFile(NewPassword, "MD5");
                    else
                        Password = "";

                    if (Password != "")
                        Params.Add(new SqlParameter("Password", Password));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        //added to allow multi reset password request and update token
                        if (fieldNames.Contains("AccessToken"))
                            if (!Convert.IsDBNull(reader["AccessToken"]))
                                user.AccessToken = reader["AccessToken"].ToString();

                        user.Password = NewPassword;

                        user.AccessToken = new TokenBuilder().GenerateToken(user);
                        //Add Token To Db
                        new TokenBuilder().UpdateToken(user.Id, user);

                        user.Order = 1;
                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "ChangePassword", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<UserClass> CheckAndChangePassword(int LoggedUser, string CurrentPassword, string NewPassword)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CheckAndChangeUserPassword";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    string newPassword;
                    if (!String.IsNullOrWhiteSpace(NewPassword))
                        newPassword = FormsAuthentication.HashPasswordForStoringInConfigFile(NewPassword, "MD5");
                    else newPassword = "";

                    if (newPassword != "")
                        Params.Add(new SqlParameter("NewPassword", newPassword));

                    string currentPassword;
                    if (!String.IsNullOrWhiteSpace(CurrentPassword))
                        currentPassword = FormsAuthentication.HashPasswordForStoringInConfigFile(CurrentPassword, "MD5");
                    else currentPassword = "";

                    if (currentPassword != "")
                        Params.Add(new SqlParameter("CurrentPassword", currentPassword));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        //added to allow multi reset password request and update token
                        if (fieldNames.Contains("AccessToken"))
                            if (!Convert.IsDBNull(reader["AccessToken"]))
                                user.AccessToken = reader["AccessToken"].ToString();

                        user.Password = NewPassword;

                        user.AccessToken = new TokenBuilder().GenerateToken(user);
                        //Add Token To Db
                        new TokenBuilder().UpdateToken(user.Id, user);

                        user.Order = 1;
                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CheckAndChangePassword", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<bool> ResetUserPassword(UserPasswordClass UserPassword)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "App_ResetUserPassword";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    string Password = FormsAuthentication.HashPasswordForStoringInConfigFile(UserPassword.Password, "MD5");
                    Params.Add(new SqlParameter("LoggedUser", UserPassword.UserId));
                    Params.Add(new SqlParameter("Password", Password));
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    /*Update Token*/
                    //Add Token To Db
                    new TokenBuilder().UpdateToken(UserPassword.UserId, new UserClass { Id = UserPassword.UserId, AccessToken = "dummy" });

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "ResetUserPassword", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<List<CountryViewModel>> GetSignupCountries()
        {
            var result = new ResultClass<List<CountryViewModel>>();
            try
            {
                var countriesList = new List<CountryViewModel>();
                string url = "https://restcountries.eu/rest/v2/all?fields=nativeName;flag;alpha2Code;callingCodes";

                var client = new WebClient { Encoding = Encoding.UTF8 };
                string response = client.DownloadString(url);
                var releases = JArray.Parse(response);

                countriesList = releases.ToObject<List<CountryViewModel>>();

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = countriesList;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetSignupCountries", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Internal System")]
        public ResultClass<string> Authenticate(LoginClass Credentials)
        {
            //return new TokenBuilder().Build(Credentials);
            return CredentialsValidator.Authenticate(Credentials);
        }


        [SwaggerWcfTag("_Deprecated")]
        private int IsValidateToken()
        {
            return TokenValidator.IsValidateToken();
        }


        [SwaggerWcfTag("_Deprecated")]
        private ResultClass<string> UnAutohrizeAccess()
        {
            return CredentialsValidator.UnAuthorizeAccess();
        }

        [SwaggerWcfTag("Internal System")]
        public void SendRabbitMQ()
        {
            Send.Main();
        }



        // Maintenance
        [SwaggerWcfTag("Maintenance")]
        public ResultClass<bool> FixOffersBalances()
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_FixOffersBalances";

                    SqlDataReader reader = cmd.ExecuteReader();

                    result.Message = "";
                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception)
            {
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Maintenance")]
        public ResultClass<bool> FixUserBalances()
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_FixUserBalances";

                    SqlDataReader reader = cmd.ExecuteReader();

                    result.Message = "";
                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception)
            {
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Maintenance")]
        public ResultClass<bool> FixUsersBalances()
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_FixUsersBalances";

                    SqlDataReader reader = cmd.ExecuteReader();

                    result.Message = "";
                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception)
            {
                result.Result = false;
                return result;
            }
        }





        //AppConfig
        [SwaggerWcfTag("Config")]
        public ResultClass<ConfigClass> GetConfig()
        {
            ResultClass<ConfigClass> result = new ResultClass<ConfigClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetConfig";
                    //SqlParameter Param = new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]);
                    //cmd.Parameters.Add(Param);

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        reader.Read();

                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ConfigClass config = new ConfigClass().PopulateConfig(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = config;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetConfig", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Config")]
        public ResultClass<ConfigClass> UpdateConfig(int LoggedUser, ConfigClass config)
        {
            ResultClass<ConfigClass> result = new ResultClass<ConfigClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateConfig";

                    //var config;
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"] ),
                  new SqlParameter("TransferConfirmationPeriod", config.TransferConfirmationPeriod),
                  new SqlParameter("OrderItemQuantityHoldPeriod", config.OrderItemQuantityHoldPeriod),
                  new SqlParameter("OrderTimeoutPeriod", config.OrderTimeoutPeriod),
                  new SqlParameter("OrderTimeoutRenewalCount", config.OrderTimeoutRenewalCount),
                  new SqlParameter("MainAgentOffersDefaultPercentage", config.MainAgentOffersDefaultPercentage),
                  new SqlParameter("SubAgentOffersDefaultPercentage", config.SubAgentOffersDefaultPercentage),
                  new SqlParameter("CurrencyId", config.CurrencyId),
                  new SqlParameter("SearchRange", config.SearchRange),
                  new SqlParameter("AllowSearchByWorkDomain", config.AllowSearchByWorkDomain),
                  new SqlParameter("AutomaticallyShowUserOnMap", config.AutomaticallyShowUserOnMap),
                  new SqlParameter("AutomaticallyActivateUsers", config.AutomaticallyActivateUsers),
                  new SqlParameter("RequiredSmsVerification", config.RequiredSmsVerification),
                  new SqlParameter("AbortAllTransferOnFail", config.AbortAllTransferOnFail),
                  new SqlParameter("EnablePickUp", config.EnablePickUp),
                  new SqlParameter("EnableDelivery", config.EnableDelivery),
                  new SqlParameter("CalculationCurrencyId", config.CalculationCurrencyId),
                  new SqlParameter("PreviewCurrencyId", config.PreviewCurrencyId),
                  new SqlParameter("LinkCurrencies", config.LinkCurrencies),

                  new SqlParameter("ItemParam1Name", config.ItemParam1Name),
                  new SqlParameter("ItemParam2Name", config.ItemParam2Name),
                  new SqlParameter("EnableItemParam1", config.EnableItemParam1),
                  new SqlParameter("EnableItemParam2", config.EnableItemParam2),

                  new SqlParameter("EnableOrderOffer", config.EnableOrderOffer),
                  new SqlParameter("GrantPointTypeId", config.GrantPointTypeId),

                  new SqlParameter("EnableItemSizeChartImage", config.EnableItemSizeChartImage),
                  new SqlParameter("PolicyArabicTitle", config.PolicyArabicTitle),
                  new SqlParameter("PolicyEnglishTitle", config.PolicyEnglishTitle),
                  new SqlParameter("PolicyArabicDescription", config.PolicyArabicDescription),
                  new SqlParameter("PolicyEnglishDescription", config.PolicyEnglishDescription),



                  new SqlParameter("OwnerLogoURL", config.OwnerLogoURL),
                  new SqlParameter("OwnerArabicTitle", config.OwnerArabicTitle),
                  new SqlParameter("OwnerEnglishTitle", config.OwnerEnglishTitle),
                  new SqlParameter("OwnerArabicDescription", config.OwnerArabicDescription),
                  new SqlParameter("OwnerEnglishDescription", config.OwnerEnglishDescription),
                  new SqlParameter("OwnerWebsiteURL", config.OwnerWebsiteURL),
                  new SqlParameter("OwnerPhoneNumber", config.OwnerPhoneNumber),
                  new SqlParameter("OwnerArabicAddress", config.OwnerArabicAddress),
                  new SqlParameter("OwnerEnglishAddress", config.OwnerEnglishAddress),
                  new SqlParameter("OwnerEmail", config.OwnerEmail),
                  new SqlParameter("ItemVisitPeriod", config.ItemVisitPeriod),
                  new SqlParameter("ItemBookingEndDate", config.ItemBookingEndDate),
                  new SqlParameter("ImageIndexSplitter", config.ImageIndexSplitter),
                  new SqlParameter("PriceDigitsNumberAfterComma", config.PriceDigitsNumberAfterComma),

                  new SqlParameter("SupportCountry", config.SupportCountry),
                  new SqlParameter("SupportGovernorate", config.SupportGovernorate),
                  new SqlParameter("SupportCity", config.SupportCity),
                  new SqlParameter("SupportLocation", config.SupportLocation),
                  new SqlParameter("SupportBlockNo", config.SupportBlockNo),
                  new SqlParameter("SupportStreet", config.SupportStreet),
                  new SqlParameter("SupportBuilding", config.SupportBuilding),
                  new SqlParameter("SupportFloor", config.SupportFloor),
                  new SqlParameter("SupportApartmentNo", config.SupportApartmentNo),
                  new SqlParameter("SupportAddressesNote", config.SupportAddressesNote),

                  new SqlParameter("CountryIsRequired", config.CountryIsRequired),
                  new SqlParameter("GovernorateIsRequired", config.GovernorateIsRequired),
                  new SqlParameter("CityIsRequired", config.CityIsRequired),
                  new SqlParameter("LocationIsRequired", config.LocationIsRequired),
                  new SqlParameter("BlockNoIsRequired", config.BlockNoIsRequired),
                  new SqlParameter("StreetIsRequired", config.StreetIsRequired),
                  new SqlParameter("BuildingIsRequired", config.BuildingIsRequired),
                  new SqlParameter("FloorIsRequired", config.FloorIsRequired),
                  new SqlParameter("ApartmentNoIsRequired", config.ApartmentNoIsRequired),
                  new SqlParameter("AddressNoteIsRequired", config.AddressNoteIsRequired),
                  new SqlParameter("HasPoints", config.HasPoints),

                  new SqlParameter("ShowItemCodeInItemsList", config.ShowItemCodeInItemsList),
                  new SqlParameter("ShowBrandNameInItemPage", config.ShowBrandNameInItemPage),
                  new SqlParameter("HasMultipleCountries", config.HasMultipleCountries),
                  new SqlParameter("HasGuestMode", config.HasGuestMode),
                  new SqlParameter("HasBranches", config.HasBranches),
                  new SqlParameter("HasDelivery", config.HasDelivery),
                  new SqlParameter("HasPickFromBranches", config.HasPickFromBranches),
                  new SqlParameter("ShowItemCodeInItemPage", config.ShowItemCodeInItemPage),
                  new SqlParameter("ShowBrandNameInItemsList", config.ShowBrandNameInItemsList),
                  new SqlParameter("AllowGiftingPointsBetweenUsers", config.AllowGiftingPointsBetweenUsers),
                  new SqlParameter("HasSeriesFeatures", config.HasSeriesFeatures),
                  new SqlParameter("ShowStockLevel", config.ShowStockLevel),
                  new SqlParameter("HasEPayment", config.HasEPayment),

                  new SqlParameter("ShowCountryInSignUp", config.ShowCountryInSignUp),
                  new SqlParameter("ShowGovernorateInSignUp", config.ShowGovernorateInSignUp),
                  new SqlParameter("ShowCityInSignUp", config.ShowCityInSignUp),                  
                  new SqlParameter("ShowEmailInSignUp", config.ShowEmailInSignUp),
                  new SqlParameter("ShowGenderInSignUp", config.ShowGenderInSignUp),

               };

                    if (config.TransferTimeoutPeriod > 0)
                        Params.Add(new SqlParameter("TransferTimeoutPeriod", config.TransferTimeoutPeriod));

                    if (config.CountryId > 0)
                        Params.Add(new SqlParameter("CountryId", config.CountryId));

                    if (config.PriceTypeId > 0)
                        Params.Add(new SqlParameter("PriceTypeId", config.PriceTypeId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        config = new ConfigClass().PopulateConfig(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Result = config;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateConfig", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Config")]
        public ResultClass<bool> CopyPrices(int LoggedUser, int FromCountryCurrencyId, int FromPriceTypeId, int ToCountryCurrencyId, int ToPriceTypeId, bool? UpdateIfAvailable, int? Factor, List<int> Items)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CopyPrices";

                    //var config;
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),

                  new SqlParameter("FromCountryCurrencyId", FromCountryCurrencyId),
                  new SqlParameter("FromPriceTypeId",FromPriceTypeId),
                  new SqlParameter("ToCountryCurrencyId", ToCountryCurrencyId),
                  new SqlParameter("ToPriceTypeId", ToPriceTypeId),
               };

                    if (UpdateIfAvailable != null)
                        Params.Add(new SqlParameter("UpdateIfAvailable", UpdateIfAvailable));

                    if (Factor != null)
                        Params.Add(new SqlParameter("Factor", Factor));

                    if (Items != null)
                    {
                        if (Items.Count > 0)
                        {
                            DataTable itemsTable;
                            using (itemsTable = new DataTable())
                            {
                                itemsTable.Columns.Add("Item", typeof(string));
                                foreach (int x in Items)
                                    itemsTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@Items", SqlDbType.Structured);
                            pList.Value = itemsTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();


                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CopyPrices", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Config")]
        public ResultClass<bool> RoundCurrencies(int LoggedUser, int? Factor, List<int> Items)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_RoundCurrencies";

                    //var config;
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (Factor != null)
                        Params.Add(new SqlParameter("Factor", Factor));

                    if (Items != null)
                    {
                        if (Items.Count > 0)
                        {
                            DataTable itemsTable;
                            using (itemsTable = new DataTable())
                            {
                                itemsTable.Columns.Add("Item", typeof(string));
                                foreach (int x in Items)
                                    itemsTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@Items", SqlDbType.Structured);
                            pList.Value = itemsTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();


                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "RoundCurrencies", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Config")]
        public ResultClass<List<GrantPointTypeClass>> GetGrantPointTypes()
        {
            ResultClass<List<GrantPointTypeClass>> result = new ResultClass<List<GrantPointTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetGrantPointTypes";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<GrantPointTypeClass> GrantPointTypes = new List<GrantPointTypeClass>();
                        GrantPointTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            order += 1;

                            id = new GrantPointTypeClass().PopulateGrantPointType(fieldNames, reader);

                            id.Order = order;
                            GrantPointTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = GrantPointTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetGrantPointTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //Users
        [SwaggerWcfTag("Users")]
        [SwaggerWcfPath(Deprecated = false)]
        public ResultClass<UserSearchClass> SearchUsers(int LoggedUser, string Text, int Type)
        {
            ResultClass<UserSearchClass> result = new ResultClass<UserSearchClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "App_SearchUsers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Text", Text),
                  new SqlParameter("Type", Type),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;

                        reader.Read();
                        order += 1;
                        user = new UserClass().PopulateUser(fieldNames, reader);
                        user.Order = order;

                        int Method = 4;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                reader.Read();
                                if (!Convert.IsDBNull(reader["Method"]))
                                    Method = (int)reader["Method"];
                            }
                        }

                        UserSearchClass UserSearch = new UserSearchClass();
                        UserSearch.User = user;
                        UserSearch.Method = Method;

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = UserSearch;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SearchUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<List<UserClass>> NewSearchUsers(int LoggedUser,
           bool FilterByUsername, string Username,
           bool FilterByFullName, string FullName,
           bool FilterByEmail, string Email,
           bool FilterByMobileNumber, string MobileNumber, string MobileCountryCode,
           bool FilterByText, string Text,
           bool FilterByDisabled, bool Disabled,
           bool FilterByHasVocationalCertificate, bool HasVocationalCertificate,
           bool FilterByIsActive, bool IsActive,
           bool FilterByAddress1, string Address1,
           bool FilterByAddress2, string Address2,
           bool FilterByNickname, string Nickname,
           bool FilterByYearsOfExperience, int FromFilterByYearsOfExperience, int ToFilterByYearsOfExperience,
           bool FilterByStaffCount, int FromStaffCount, int ToStaffCount,
           bool FilterByNotes, string Notes,
           bool FilterByCommercialName, string CommercialName,
           bool FilterByUserTypeIds, List<int> UserTypeIds,
           bool FilterByCompanyIds, List<int> CompanyIds,
           bool FilterByGovernorateIds, List<int> GovernorateIds,
           bool FilterByCityIds, List<int> CityIds,
           bool FilterByLocationIds, List<int> LocationIds,
           bool FilterByPositionIds, List<int> PositionIds,
           bool FilterByJobIds, List<int> JobIds,
           bool FilterByWorkDomainIds, List<int> WorkDomainIds,
           bool FilterByGender, int Gender,
           bool FilterByEducationLevelIds, List<int> EducationLevelIds,
           bool FilterByCreateDate, string FromCreateDate, string ToCreateDate,
           bool FilterByBirthdate, string FromBirthdate, string ToBirthdate,
           bool FilterByLunchCount, int FromLunchCount, int ToLunchCount,
           bool SearchForSenders,
           bool SearchForReceivers,
           bool FilterByCountryIds, List<int> CountryIds,
           int PageId = 1, int RecordsCount = 10000,
           bool ForReports = false,
           bool NotForAdmins = false,
           bool ForTransfers = false, int TransferStatusId = 1,
           bool FilterByVisibleOnMap = false, bool VisibleOnMap = false,
           bool FilterByLocationValidated = false, bool LocationValidated = false,
           bool FilterByIsVerified = false, bool IsVerified = false)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUsers_New";

                    if (MobileNumber != null)
                        MobileNumber = Regex.Replace(MobileNumber, "^0", "");

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


                  new SqlParameter("FilterByUsername", FilterByUsername),
                  new SqlParameter("Username", Username),

                  new SqlParameter("FilterByFullname", FilterByFullName),
                  new SqlParameter("Fullname", FullName),

                  new SqlParameter("FilterByEmail", FilterByEmail),
                  new SqlParameter("Email", Email),

                  new SqlParameter("FilterByMobileNumber", FilterByMobileNumber),

                  //new SqlParameter("MobileNumber", MobileNumber?.TrimStart('0')),
                  new SqlParameter("MobileCountryCode", MobileCountryCode),

                  new SqlParameter("FilterByText", FilterByText),
                  new SqlParameter("Text", Text),

                  new SqlParameter("FilterByDisabled", FilterByDisabled),
                  new SqlParameter("Disabled", Disabled),

                  new SqlParameter("FilterByHasVocationalCertificate", FilterByHasVocationalCertificate),
                  new SqlParameter("HasVocationalCertificate", HasVocationalCertificate),

                  new SqlParameter("FilterByIsActive", FilterByIsActive),
                  new SqlParameter("IsActive", IsActive),

                  new SqlParameter("FilterByIsVerified", FilterByIsVerified),
                  new SqlParameter("IsVerified", IsVerified),


                  new SqlParameter("FilterByAddress1", FilterByAddress1),
                  new SqlParameter("Address1", Address1),

                  new SqlParameter("FilterByAddress2", FilterByAddress2),
                  new SqlParameter("Address2", Address2),

                  new SqlParameter("FilterByNickname", FilterByNickname),
                  new SqlParameter("Nickname", Nickname),

                  new SqlParameter("FilterByYearsOfExperience", FilterByYearsOfExperience),
                  new SqlParameter("FromYearsOfExperience", FromFilterByYearsOfExperience),
                  new SqlParameter("ToYearsOfExperience", ToFilterByYearsOfExperience),

                  new SqlParameter("FilterByStaffCount", FilterByStaffCount),
                  new SqlParameter("FromStaffCount", FromStaffCount),
                  new SqlParameter("ToStaffCount", ToStaffCount),

                  new SqlParameter("FilterByNotes", FilterByNotes),
                  new SqlParameter("Notes", Notes),

                  new SqlParameter("FilterByCommercialName", FilterByCommercialName),
                  new SqlParameter("CommercialName", CommercialName),

                  new SqlParameter("FilterByGender", FilterByGender),
                  new SqlParameter("Gender", Gender),

                  new SqlParameter("SearchForSenders", SearchForSenders),
                  new SqlParameter("SearchForReceivers", SearchForReceivers),

                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("ForReports", ForReports),

                  new SqlParameter("ForTransfers", ForTransfers),
                  new SqlParameter("TransferStatusId", TransferStatusId),

                  new SqlParameter("FilterByVisibleOnMap", FilterByVisibleOnMap),
                  new SqlParameter("VisibleOnMap", VisibleOnMap),
                  new SqlParameter("FilterByLocationValidated", FilterByLocationValidated),
                  new SqlParameter("LocationValidated", LocationValidated),

                  new SqlParameter("FilterByLunchCount", FilterByLunchCount),
                  new SqlParameter("FromLunchCount", FromLunchCount),
                  new SqlParameter("ToLunchCount", ToLunchCount),
               };

                    if (MobileNumber != null)
                        cmd.Parameters.Add(new SqlParameter("MobileNumber", MobileNumber));

                    if (FilterByCreateDate)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCreateDate", FilterByCreateDate));
                        cmd.Parameters.Add(new SqlParameter("FromCreateDate", FromCreateDate));
                        cmd.Parameters.Add(new SqlParameter("ToCreateDate", ToCreateDate));
                    }

                    if (FilterByBirthdate)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByBirthdate", FilterByBirthdate));
                        cmd.Parameters.Add(new SqlParameter("FromBirthdate", FromBirthdate));
                        cmd.Parameters.Add(new SqlParameter("ToBirthdate", ToBirthdate));
                    }

                    if ((FilterByUserTypeIds) && (UserTypeIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserTypeIds", FilterByUserTypeIds));

                        //UserTypeIds
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypeIds)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserTypeIds", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        Params.Add(pList);
                    }

                    if ((FilterByCompanyIds) && (CompanyIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCompanyIds", FilterByCompanyIds));

                        //CompanyIds
                        DataTable companytable;
                        using (companytable = new DataTable())
                        {
                            companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CompanyIds)
                                companytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CompanyIds", SqlDbType.Structured);
                        pList.Value = companytable;
                        Params.Add(pList);
                    }

                    if ((FilterByCountryIds) && (CountryIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCountryIds", FilterByCountryIds));

                        //CountryIds
                        DataTable countrytable;
                        using (countrytable = new DataTable())
                        {
                            countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CountryIds)
                                countrytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CountryIds", SqlDbType.Structured);
                        pList.Value = countrytable;
                        Params.Add(pList);
                    }


                    if ((FilterByGovernorateIds) && (GovernorateIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByGovernorateIds", FilterByGovernorateIds));

                        //GovernorateIds
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernorateIds)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernorateIds", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        Params.Add(pList);
                    }

                    if ((FilterByCityIds) && (CityIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCityIds", FilterByCityIds));

                        //CityIds
                        DataTable citytable;
                        using (citytable = new DataTable())
                        {
                            citytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CityIds)
                                citytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CityIds", SqlDbType.Structured);
                        pList.Value = citytable;
                        Params.Add(pList);
                    }

                    if ((FilterByLocationIds) && (LocationIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByLocationIds", FilterByLocationIds));

                        //LocationIds
                        DataTable locationtable;
                        using (locationtable = new DataTable())
                        {
                            locationtable.Columns.Add("Id", typeof(string));
                            foreach (int x in LocationIds)
                                locationtable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@LocationIds", SqlDbType.Structured);
                        pList.Value = locationtable;
                        Params.Add(pList);
                    }

                    if ((FilterByPositionIds) && (PositionIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByPositionIds", FilterByPositionIds));

                        //PositionIds
                        DataTable positiontable;
                        using (positiontable = new DataTable())
                        {
                            positiontable.Columns.Add("Id", typeof(string));
                            foreach (int x in PositionIds)
                                positiontable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@PositionIds", SqlDbType.Structured);
                        pList.Value = positiontable;
                        Params.Add(pList);
                    }

                    if ((FilterByJobIds) && (JobIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByJobIds", FilterByJobIds));

                        //JobIds
                        DataTable jobtable;
                        using (jobtable = new DataTable())
                        {
                            jobtable.Columns.Add("Id", typeof(string));
                            foreach (int x in JobIds)
                                jobtable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@JobIds", SqlDbType.Structured);
                        pList.Value = jobtable;
                        Params.Add(pList);
                    }

                    if ((FilterByWorkDomainIds) && (WorkDomainIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByWorkDomainIds", FilterByWorkDomainIds));

                        //WorkDomainIds
                        DataTable workdomaintable;
                        using (workdomaintable = new DataTable())
                        {
                            workdomaintable.Columns.Add("Id", typeof(string));
                            foreach (int x in WorkDomainIds)
                                workdomaintable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@WorkDomainIds", SqlDbType.Structured);
                        pList.Value = workdomaintable;
                        Params.Add(pList);
                    }

                    if ((FilterByEducationLevelIds) && (EducationLevelIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByEducationLevelIds", FilterByEducationLevelIds));

                        //EducationLevelIds
                        DataTable educationleveltable;
                        using (educationleveltable = new DataTable())
                        {
                            educationleveltable.Columns.Add("Id", typeof(string));
                            foreach (int x in EducationLevelIds)
                                educationleveltable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@EducationLevelIds", SqlDbType.Structured);
                        pList.Value = educationleveltable;
                        Params.Add(pList);
                    }

                    //if (NotForAdmins != null)
                    Params.Add(new SqlParameter("NotForAdmins", NotForAdmins));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "NewSearchUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<List<UserClass_Short>> NewSearchUsers_Short(int LoggedUser,
           bool FilterByUsername, string Username,
           bool FilterByFullName, string FullName,
           bool FilterByEmail, string Email,
           bool FilterByMobileNumber, string MobileNumber, string MobileCountryCode,
           bool FilterByText, string Text,
           bool FilterByDisabled, bool Disabled,
           bool FilterByHasVocationalCertificate, bool HasVocationalCertificate,
           bool FilterByIsActive, bool IsActive,           
           bool FilterByAddress1, string Address1,
           bool FilterByAddress2, string Address2,
           bool FilterByNickname, string Nickname,
           bool FilterByYearsOfExperience, int FromFilterByYearsOfExperience, int ToFilterByYearsOfExperience,
           bool FilterByStaffCount, int FromStaffCount, int ToStaffCount,
           bool FilterByNotes, string Notes,
           bool FilterByCommercialName, string CommercialName,
           bool FilterByUserTypeIds, List<int> UserTypeIds,
           bool FilterByCompanyIds, List<int> CompanyIds,
           bool FilterByGovernorateIds, List<int> GovernorateIds,
           bool FilterByCityIds, List<int> CityIds,
           bool FilterByLocationIds, List<int> LocationIds,
           bool FilterByPositionIds, List<int> PositionIds,
           bool FilterByJobIds, List<int> JobIds,
           bool FilterByWorkDomainIds, List<int> WorkDomainIds,
           bool FilterByGender, int Gender,
           bool FilterByEducationLevelIds, List<int> EducationLevelIds,
           bool FilterByCreateDate, string FromCreateDate, string ToCreateDate,
           bool FilterByBirthdate, string FromBirthdate, string ToBirthdate,
           bool FilterByLunchCount, int FromLunchCount, int ToLunchCount,
           bool SearchForSenders,
           bool SearchForReceivers,
           bool FilterByCountryIds, List<int> CountryIds,
           int PageId = 1, int RecordsCount = 10000,
           bool ForReports = false,
           bool NotForAdmins = false,
           bool ForTransfers = false, int TransferStatusId = 1,
           bool FilterByVisibleOnMap = false, bool VisibleOnMap = false,
           bool FilterByLocationValidated = false, bool LocationValidated = false,
           bool FilterByIsVerified = false, bool IsVerified = false)
        {
            ResultClass<List<UserClass_Short>> result = new ResultClass<List<UserClass_Short>>();

            //Call old API
            var apiResult = NewSearchUsers(LoggedUser, FilterByUsername, Username, FilterByFullName, FullName,
              FilterByEmail, Email, FilterByMobileNumber, MobileNumber, MobileCountryCode, FilterByText, Text,
              FilterByDisabled, Disabled, FilterByHasVocationalCertificate, HasVocationalCertificate,
               FilterByIsActive, IsActive, FilterByAddress1, Address1,
              FilterByAddress2, Address2, FilterByNickname, Nickname,
              FilterByYearsOfExperience, FromFilterByYearsOfExperience, ToFilterByYearsOfExperience,
              FilterByStaffCount, FromStaffCount, ToStaffCount, FilterByNotes,
              Notes, FilterByCommercialName, CommercialName, FilterByUserTypeIds,
              UserTypeIds, FilterByCompanyIds, CompanyIds, FilterByGovernorateIds,
             GovernorateIds, FilterByCityIds, CityIds, FilterByLocationIds,
               LocationIds, FilterByPositionIds, PositionIds, FilterByJobIds,
              JobIds, FilterByWorkDomainIds, WorkDomainIds, FilterByGender, Gender,
              FilterByEducationLevelIds, EducationLevelIds,
              FilterByCreateDate, FromCreateDate, ToCreateDate,
              FilterByBirthdate, FromBirthdate, ToBirthdate,
              FilterByLunchCount, FromLunchCount, ToLunchCount,
              SearchForSenders,
              SearchForReceivers, FilterByCountryIds, CountryIds, PageId, RecordsCount, ForReports, NotForAdmins,
              ForTransfers, TransferStatusId,
              FilterByVisibleOnMap, VisibleOnMap, FilterByLocationValidated, LocationValidated, FilterByIsVerified, IsVerified);

            //Get short user class to result

            result.Result = new UserClass_Short().PopulateUsers(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        //Omar New Search Users
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> SearchUsers_ForUserPage(int LoggedUser, string Text,
           bool FilterByGovernorate, List<int> GovernoratesIDs,
           bool FilterByCompany, List<int> CompaniesIDs,
           bool FilterByCountry, List<int> CountriesIDs,
           bool FilterByUserType, List<int> UserTypesIDs,
           bool FilterByDisabled = false, bool ShowDisabled = false,
           bool FilterByIsActive = false, bool IsActive = false,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUsers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Text", Text),
                  new SqlParameter("FilterByDisabled", FilterByDisabled),
                  new SqlParameter("ShowDisabled", ShowDisabled),
                  new SqlParameter("FilterByIsActive", FilterByIsActive),
                  new SqlParameter("IsActive", IsActive)
               };
                    if ((FilterByCountry) && (CountriesIDs != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCountry", FilterByCountry));

                        //GovernoratesIDs
                        DataTable countrytable;
                        using (countrytable = new DataTable())
                        {
                            countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernoratesIDs)
                                countrytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CountriesIDs", SqlDbType.Structured);
                        pList.Value = countrytable;
                        Params.Add(pList);
                    }

                    if ((FilterByGovernorate) && (GovernoratesIDs != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByGovernorate", FilterByGovernorate));

                        //GovernoratesIDs
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernoratesIDs)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernoratesIDs", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        Params.Add(pList);
                    }

                    if ((FilterByCompany) && (CompaniesIDs != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCompany", FilterByCompany));

                        //CompaniesIDs
                        DataTable companytable;
                        using (companytable = new DataTable())
                        {
                            companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CompaniesIDs)
                                companytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CompaniesIDs", SqlDbType.Structured);
                        pList.Value = companytable;
                        Params.Add(pList);
                    }

                    if ((FilterByUserType) && (UserTypesIDs != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserType", FilterByUserType));

                        //UserTypesIDs
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypesIDs)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserTypesIDs", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "Admin_SearchUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> SearchUserSenders(int LoggedUser, string Text,
           bool ForNotAdmins,
           bool FilterByGovernorate, List<int> GovernoratesIDs,
           bool FilterByCompany, List<int> CompaniesIDs,
           bool FilterByUserType, List<int> UserTypesIDs,
           bool ShowDisabled = false, bool IsActive = false,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUserSenders";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Text", Text),
                  new SqlParameter("ShowDisabled", ShowDisabled),
                  new SqlParameter("IsActive", IsActive),
                  new SqlParameter("ForNotAdmins", ForNotAdmins)
               };
                    if (FilterByGovernorate)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByGovernorate", FilterByGovernorate));

                        //GovernoratesIDs
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernoratesIDs)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernoratesIDs", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        Params.Add(pList);
                    }

                    if (FilterByCompany)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCompany", FilterByCompany));

                        //CompaniesIDs
                        DataTable companytable;
                        using (companytable = new DataTable())
                        {
                            companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CompaniesIDs)
                                companytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CompaniesIDs", SqlDbType.Structured);
                        pList.Value = companytable;
                        Params.Add(pList);
                    }

                    if (FilterByUserType)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserType", FilterByUserType));

                        //UserTypesIDs
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypesIDs)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserTypesIDs", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SearchUserSenders", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass_Short>> SearchUserSenders_Short(int LoggedUser, string Text,
          bool ForNotAdmins,
          bool FilterByGovernorate, List<int> GovernoratesIDs,
          bool FilterByCompany, List<int> CompaniesIDs,
          bool FilterByUserType, List<int> UserTypesIDs,
          bool ShowDisabled = false, bool IsActive = false,
          int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass_Short>> result = new ResultClass<List<UserClass_Short>>();

            //Call old api 
            var apiResult = SearchUserSenders(LoggedUser, Text, ForNotAdmins, FilterByGovernorate,
             GovernoratesIDs, FilterByCompany, CompaniesIDs, FilterByUserType,
             UserTypesIDs, ShowDisabled, IsActive, PageId, RecordsCount);


            result.Result = new UserClass_Short().PopulateUsers(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> SearchUserReceivers(int LoggedUser, string Text,
           bool FilterByGovernorate, List<int> GovernoratesIDs,
           bool FilterByCompany, List<int> CompaniesIDs,
           bool FilterByUserType, List<int> UserTypesIDs,
           bool ShowDisabled = false, bool IsActive = false,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUserReceivers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Text", Text),
                  new SqlParameter("ShowDisabled", ShowDisabled),
                  new SqlParameter("IsActive", IsActive)
               };
                    if (FilterByGovernorate)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByGovernorate", FilterByGovernorate));

                        //GovernoratesIDs
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernoratesIDs)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernoratesIDs", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        Params.Add(pList);
                    }

                    if (FilterByCompany)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCompany", FilterByCompany));

                        //CompaniesIDs
                        DataTable companytable;
                        using (companytable = new DataTable())
                        {
                            companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CompaniesIDs)
                                companytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CompaniesIDs", SqlDbType.Structured);
                        pList.Value = companytable;
                        Params.Add(pList);
                    }

                    if (FilterByUserType)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserType", FilterByUserType));

                        //UserTypesIDs
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypesIDs)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserTypesIDs", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "Admin_SearchUserReceivers",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass_Short>> SearchUserReceivers_Short(int LoggedUser, string Text,
           bool FilterByGovernorate, List<int> GovernoratesIDs,
           bool FilterByCompany, List<int> CompaniesIDs,
           bool FilterByUserType, List<int> UserTypesIDs,
           bool ShowDisabled = false, bool IsActive = false,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass_Short>> result = new ResultClass<List<UserClass_Short>>();

            //Call old api 
            var apiResult = SearchUserReceivers(LoggedUser, Text, FilterByGovernorate, GovernoratesIDs,
             FilterByCompany, CompaniesIDs, FilterByUserType, UserTypesIDs,
             ShowDisabled, IsActive, PageId, RecordsCount);


            result.Result = new UserClass_Short().PopulateUsers(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> SearchUsersForPrivateNotification(int LoggedUser, string Text,
           bool FilterByGovernorate, List<int> GovernoratesIDs,
           bool FilterByCompany, List<int> CompaniesIDs,
           bool FilterByUserType, List<int> UserTypesIDs,
           bool ShowDisabled = false, bool IsActive = false,
           bool NotAdminUsers = false,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUsersForPrivateNotification";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Text", Text),
                  new SqlParameter("ShowDisabled", ShowDisabled),
                  new SqlParameter("IsActive", IsActive),
                  new SqlParameter("NotAdminUsers", NotAdminUsers)
               };
                    if (FilterByGovernorate)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByGovernorate", FilterByGovernorate));

                        //GovernoratesIDs
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernoratesIDs)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernoratesIDs", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        Params.Add(pList);
                    }

                    if (FilterByCompany)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCompany", FilterByCompany));

                        //CompaniesIDs
                        DataTable companytable;
                        using (companytable = new DataTable())
                        {
                            companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CompaniesIDs)
                                companytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CompaniesIDs", SqlDbType.Structured);
                        pList.Value = companytable;
                        Params.Add(pList);
                    }

                    if (FilterByUserType)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserType", FilterByUserType));

                        //UserTypesIDs
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypesIDs)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserTypesIDs", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SearchUsersForPrivateNotification",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> GetUsers(int LoggedUser, bool ShowDisabled, bool IsActive,
           bool NotAdminUsers = false, int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsers";

                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    Params.Add(new SqlParameter("ShowDisabled", ShowDisabled));
                    Params.Add(new SqlParameter("NotAdminUsers", NotAdminUsers));

                    Params.Add(new SqlParameter("IsActive", IsActive));
                    if (PageId > 0)
                        Params.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        Params.Add(new SqlParameter("RecordsCount", RecordsCount));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);

                            user.Order = order + (RecordsCount * (PageId - 1));

                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass_Short>> GetUsers_Short(int LoggedUser, bool ShowDisabled, bool IsActive,
           bool NotAdminUsers = false, int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass_Short>> result = new ResultClass<List<UserClass_Short>>();

            //Call old api 
            var apiResult = GetUsers(LoggedUser, ShowDisabled, IsActive, NotAdminUsers, PageId, RecordsCount);


            result.Result = new UserClass_Short().PopulateUsers(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }


        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> GetUser(int LoggedUser, int UserId, bool WithAccessToken)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsers";
                    SqlParameter Param = new SqlParameter("UserId", UserId);
                    cmd.Parameters.Add(Param);
                    Param = new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]);
                    cmd.Parameters.Add(Param);
                    Param = new SqlParameter("WithAccessToken", WithAccessToken);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        reader.Read();
                        user = new UserClass().PopulateUser(fieldNames, reader);
                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUser", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<UserClass_Short> GetUser_Short(int LoggedUser, int UserId)
        {

            ResultClass<UserClass_Short> result = new ResultClass<UserClass_Short>();

            //Call old api 
            var apiResult = GetUser(LoggedUser, UserId, false);

            result.Result = new UserClass_Short().PopulateUser(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> GetCompanyUsers(int LoggedUser, int CompanyId, int PageId = 1,
           int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsers";

                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    Params.Add(new SqlParameter("CompanyId", CompanyId));
                    if (PageId > 0)
                        Params.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        Params.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            order += 1;
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = Errors.Success;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetCompanyUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> CreateUser(int LoggedUser, UserClass User)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                //Check license validity
                if (!User.Disabled)
                {
                    int resultCode = Errors.Success;//ServiceMethod.CheckUserLicenseLimit();
                    if (resultCode != Errors.Success) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUser";

                    string Password;
                    if (!String.IsNullOrWhiteSpace(User.Password))
                        Password = FormsAuthentication.HashPasswordForStoringInConfigFile(User.Password, "MD5");
                    else
                        Password = "";

                    if (User.MobileNumber != null)
                        User.MobileNumber = Regex.Replace(User.MobileNumber, "^0", "");

                    List<SqlParameter> Params = new List<SqlParameter>()

               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("FullName", User.FullName),
                  new SqlParameter("Email", User.Email),
                  new SqlParameter("Password", Password),
                  new SqlParameter("UserType", User.UserType),
                  new SqlParameter("CanGrantPoints", User.CanGrantPoints),
                  new SqlParameter("CanTakeOffers", User.CanTakeOffers),
                  new SqlParameter("Disabled", User.Disabled),
                  new SqlParameter("GovernorateId", User.GovernorateId),
                  new SqlParameter("CityId", User.CityId),
                  new SqlParameter("LocationId", User.LocationId),
                  new SqlParameter("Address1", User.Address1),
                  new SqlParameter("Address2", User.Address2),
//                  new SqlParameter("MobileNumber", User.MobileNumber),
                  //new SqlParameter("MobileNumber", User.MobileNumber?.TrimStart('0')),
                  new SqlParameter("Birthdate", User.Birthdate),
                  new SqlParameter("NickName", User.NickName),
                  new SqlParameter("Gender", User.Gender),
                  new SqlParameter("YearsOfExperience", User.YearsOfExperience),

                  new SqlParameter("StaffCount", User.StaffCount),
                  new SqlParameter("HasVocationalCertificate", User.HasVocationalCertificate),
                  new SqlParameter("Notes", User.Notes),
                  new SqlParameter("CommercialName", User.CommercialName),
                  new SqlParameter("IsActive", User.IsActive),
                  new SqlParameter("PermissionFromTemplate", User.PermissionFromTemplate),
                  new SqlParameter("VisibleOnMap", User.VisibleOnMap),
                  new SqlParameter("LocationValidated", User.LocationValidated),
                  new SqlParameter("MobileCountryCode", User.MobileCountryCode),
                  new SqlParameter("BlockNo", User.BlockNo),
                  new SqlParameter("Street", User.Street),
                  new SqlParameter("Building", User.Building),
                  new SqlParameter("Floor", User.Floor),
                  new SqlParameter("ApartmentNo", User.ApartmentNo),
                  new SqlParameter("AddressNote", User.AddressNote),

                  new SqlParameter("MobileNumber2", User.MobileNumber2),
                  new SqlParameter("Nationality", User.Nationality),
                  new SqlParameter("CardNumber", User.CardNumber),
                  new SqlParameter("AccountNumber", User.AccountNumber),
                  new SqlParameter("CardType", User.CardType),
                  new SqlParameter("ChildCount", User.ChildCount),
                  new SqlParameter("MaritalStatus", User.MaritalStatus),
                  new SqlParameter("FilterByCountry", User.FilterByCountry),
                  new SqlParameter("IsVerified", User.IsVerified),
                  new SqlParameter("BalanceLimit", User.BalanceLimit),
                  
               };

                    if (User.Username != null)
                        User.Username = Regex.Replace(User.Username, "^0", "");

                    if (User.MobileNumber != null)
                        Params.Add(new SqlParameter("MobileNumber", User.MobileNumber));

                    if (User.UserType == 5)
                    {
                        if (User.Username != null)
                            Params.Add(new SqlParameter("Username", User.Username));
                        //Params.Add(new SqlParameter("Username", User.Username?.TrimStart('0')));
                    }
                    else
                    {
                        if (User.Username != null)
                            Params.Add(new SqlParameter("Username", User.Username));
                    }

                    if (User.CountryId != 0)
                        Params.Add(new SqlParameter("CountryId", User.CountryId));

                    if (User.CurrencyId != 0)
                        Params.Add(new SqlParameter("CurrencyId", User.CurrencyId));

                    if (User.CompanyId > 0)
                        Params.Add(new SqlParameter("CompanyId", User.CompanyId));

                    if (User.QRCode != "")
                        Params.Add(new SqlParameter("QRCode", User.QRCode));

                    if (User.PositionId > 0)
                        Params.Add(new SqlParameter("PositionId", User.PositionId));

                    if (User.JobId != 0)
                        Params.Add(new SqlParameter("JobId", User.JobId));

                    if (User.WorkDomainId > 0)
                        Params.Add(new SqlParameter("WorkDomainId", User.WorkDomainId));

                    if (User.EducationLevelId > 0)
                        Params.Add(new SqlParameter("EducationLevelId", User.EducationLevelId));

                    if ((User.Latitude > 0) && (User.Longitude > 0))
                    {
                        Params.Add(new SqlParameter("Latitude", User.Latitude));
                        Params.Add(new SqlParameter("Longitude", User.Longitude));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code) + ' ' + e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUser", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> CreateOrUpdateUser(int LoggedUser, UserClass User)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                //Check license validity
                if (!User.Disabled)
                {
                    int resultCode = Errors.Success;//ServiceMethod.CheckUserLicenseLimit();
                    if (resultCode != Errors.Success) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrUpdateUser";

                    string Password;
                    if (!String.IsNullOrWhiteSpace(User.Password))
                        Password = FormsAuthentication.HashPasswordForStoringInConfigFile(User.Password, "MD5");
                    else
                        Password = "";

                    if (User.MobileNumber != null)
                        User.MobileNumber = Regex.Replace(User.MobileNumber, "^0", "");

                    List<SqlParameter> Params = new List<SqlParameter>()

               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("FullName", User.FullName),
                  new SqlParameter("Email", User.Email),
                  new SqlParameter("Password", Password),
                  new SqlParameter("UserType", User.UserType),
                  new SqlParameter("CanGrantPoints", User.CanGrantPoints),
                  new SqlParameter("CanTakeOffers", User.CanTakeOffers),
                  new SqlParameter("Disabled", User.Disabled),
                  new SqlParameter("GovernorateId", User.GovernorateId),
                  new SqlParameter("CityId", User.CityId),
                  new SqlParameter("LocationId", User.LocationId),
                  new SqlParameter("Address1", User.Address1),
                  new SqlParameter("Address2", User.Address2),
//                  new SqlParameter("MobileNumber", User.MobileNumber),
                  //new SqlParameter("MobileNumber", User.MobileNumber?.TrimStart('0')),
                  new SqlParameter("Birthdate", User.Birthdate),
                  new SqlParameter("NickName", User.NickName),
                  new SqlParameter("Gender", User.Gender),
                  new SqlParameter("YearsOfExperience", User.YearsOfExperience),

                  new SqlParameter("StaffCount", User.StaffCount),
                  new SqlParameter("HasVocationalCertificate", User.HasVocationalCertificate),
                  new SqlParameter("Notes", User.Notes),
                  new SqlParameter("CommercialName", User.CommercialName),
                  new SqlParameter("IsActive", User.IsActive),
                  new SqlParameter("PermissionFromTemplate", User.PermissionFromTemplate),
                  new SqlParameter("VisibleOnMap", User.VisibleOnMap),
                  new SqlParameter("LocationValidated", User.LocationValidated),
                  new SqlParameter("MobileCountryCode", User.MobileCountryCode),
                  new SqlParameter("BlockNo", User.BlockNo),
                  new SqlParameter("Street", User.Street),
                  new SqlParameter("Building", User.Building),
                  new SqlParameter("Floor", User.Floor),
                  new SqlParameter("ApartmentNo", User.ApartmentNo),
                  new SqlParameter("AddressNote", User.AddressNote),

                  new SqlParameter("MobileNumber2", User.MobileNumber2),
                  new SqlParameter("Nationality", User.Nationality),
                  new SqlParameter("CardNumber", User.CardNumber),
                  new SqlParameter("AccountNumber", User.AccountNumber),
                  new SqlParameter("CardType", User.CardType),
                  new SqlParameter("ChildCount", User.ChildCount),
                  new SqlParameter("MaritalStatus", User.MaritalStatus),
                  new SqlParameter("FilterByCountry", User.FilterByCountry),
                  new SqlParameter("IsVerified", User.IsVerified),
                  new SqlParameter("BalanceLimit", User.BalanceLimit),
                  
               };

                    if (User.Username != null)
                        User.Username = Regex.Replace(User.Username, "^0", "");

                    if (User.MobileNumber != null)
                        Params.Add(new SqlParameter("MobileNumber", User.MobileNumber));

                    if (User.UserType == 5)
                    {
                        if (User.Username != null)
                            Params.Add(new SqlParameter("Username", User.Username));
                        //Params.Add(new SqlParameter("Username", User.Username?.TrimStart('0')));
                    }
                    else
                    {
                        if (User.Username != null)
                            Params.Add(new SqlParameter("Username", User.Username));
                    }

                    if (User.CountryId != 0)
                        Params.Add(new SqlParameter("CountryId", User.CountryId));

                    if (User.CurrencyId != 0)
                        Params.Add(new SqlParameter("CurrencyId", User.CurrencyId));

                    if (User.CompanyId > 0)
                        Params.Add(new SqlParameter("CompanyId", User.CompanyId));

                    if (User.QRCode != "")
                        Params.Add(new SqlParameter("QRCode", User.QRCode));

                    if (User.PositionId > 0)
                        Params.Add(new SqlParameter("PositionId", User.PositionId));

                    if (User.JobId != 0)
                        Params.Add(new SqlParameter("JobId", User.JobId));

                    if (User.WorkDomainId > 0)
                        Params.Add(new SqlParameter("WorkDomainId", User.WorkDomainId));

                    if (User.EducationLevelId > 0)
                        Params.Add(new SqlParameter("EducationLevelId", User.EducationLevelId));

                    if ((User.Latitude > 0) && (User.Longitude > 0))
                    {
                        Params.Add(new SqlParameter("Latitude", User.Latitude));
                        Params.Add(new SqlParameter("Longitude", User.Longitude));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code) + ' ' + e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrUpdateUser", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> UpdateUser(int LoggedUser, UserClass User, bool WithAccessToken = false)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {
                //Check license validity
                if (!User.Disabled)
                {
                    int resultCode = 0;//ServiceMethod.CheckUserLicenseLimit();
                    if (resultCode != 0) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUser";

                    if (User.MobileNumber != null)
                        User.MobileNumber = Regex.Replace(User.MobileNumber, "^0", "");

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", User.Id),
                  new SqlParameter("FullName", User.FullName),
                  new SqlParameter("Email", User.Email),
                  //new SqlParameter("MobileNumber", User.MobileNumber),
                  //new SqlParameter("MobileNumber", User.MobileNumber?.TrimStart('0')),
                  new SqlParameter("UserType", User.UserType),
                  new SqlParameter("CanGrantPoints", User.CanGrantPoints),
                  new SqlParameter("CanTakeOffers", User.CanTakeOffers),
                  new SqlParameter("Disabled", User.Disabled),
                  new SqlParameter("GovernorateId", User.GovernorateId),
                  new SqlParameter("CityId", User.CityId),
                  new SqlParameter("LocationId", User.LocationId),
                  new SqlParameter("Address1", User.Address1),
                  new SqlParameter("Address2", User.Address2),
                  new SqlParameter("Birthdate", User.Birthdate),
                  new SqlParameter("NickName", User.NickName),
                  new SqlParameter("Gender", User.Gender),
                  new SqlParameter("YearsOfExperience", User.YearsOfExperience),

                  new SqlParameter("StaffCount", User.StaffCount),
                  new SqlParameter("HasVocationalCertificate", User.HasVocationalCertificate),
                  new SqlParameter("Notes", User.Notes),
                  new SqlParameter("CommercialName", User.CommercialName),
                  new SqlParameter("IsActive", User.IsActive),
                  new SqlParameter("PermissionFromTemplate", User.PermissionFromTemplate),
                  new SqlParameter("VisibleOnMap", User.VisibleOnMap),
                  new SqlParameter("LocationValidated", User.LocationValidated),
                  new SqlParameter("MobileCountryCode", User.MobileCountryCode),
                  new SqlParameter("WithAccessToken", true),
                  new SqlParameter("BlockNo", User.BlockNo),
                  new SqlParameter("Street", User.Street),
                  new SqlParameter("Building", User.Building),
                  new SqlParameter("Floor", User.Floor),
                  new SqlParameter("ApartmentNo", User.ApartmentNo),
                  new SqlParameter("AddressNote", User.AddressNote),

                  new SqlParameter("MobileNumber2", User.MobileNumber2),
                  new SqlParameter("Nationality", User.Nationality),
                  new SqlParameter("CardNumber", User.CardNumber),
                  new SqlParameter("AccountNumber", User.AccountNumber),
                  new SqlParameter("CardType", User.CardType),
                  new SqlParameter("ChildCount", User.ChildCount),
                  new SqlParameter("MaritalStatus", User.MaritalStatus),
                  new SqlParameter("FilterByCountry", User.FilterByCountry),
                  new SqlParameter("IsVerified", User.IsVerified),
                  new SqlParameter("BalanceLimit", User.BalanceLimit),
               };


                    if (User.MobileNumber != null)
                        Params.Add(new SqlParameter("MobileNumber", User.MobileNumber));

                    if ((User.UserType == 5) || (User.UserType == 0))
                    {
                        if (User.Username != null)
                        {
                            User.Username = Regex.Replace(User.Username, "^0", "");
                            Params.Add(new SqlParameter("Username", User.Username));
                        }
                        //Params.Add(new SqlParameter("Username", User.Username?.TrimStart('0')));
                    }
                    else
                    {
                        if (User.Username != null)
                            Params.Add(new SqlParameter("Username", User.Username));
                    }

                    if (User.CountryId != 0)
                        Params.Add(new SqlParameter("CountryId", User.CountryId));

                    if (User.CurrencyId != 0)
                        Params.Add(new SqlParameter("CurrencyId", User.CurrencyId));

                    if (User.CompanyId != 0)
                        Params.Add(new SqlParameter("CompanyId", User.CompanyId));

                    if (User.QRCode != "")
                        Params.Add(new SqlParameter("QRCode", User.QRCode));

                    if (User.PositionId != 0)
                        Params.Add(new SqlParameter("PositionId", User.PositionId));

                    if (User.JobId != 0)
                        Params.Add(new SqlParameter("JobId", User.JobId));

                    if (User.WorkDomainId != 0)
                        Params.Add(new SqlParameter("WorkDomainId", User.WorkDomainId));

                    if (User.EducationLevelId != 0)
                        Params.Add(new SqlParameter("EducationLevelId", User.EducationLevelId));

                    if ((User.Latitude > 0) && (User.Longitude > 0))
                    {
                        Params.Add(new SqlParameter("Latitude", User.Latitude));
                        Params.Add(new SqlParameter("Longitude", User.Longitude));
                    }


                    string Password;
                    if (!String.IsNullOrWhiteSpace(User.Password?.Trim()))
                        Password = FormsAuthentication.HashPasswordForStoringInConfigFile(User.Password, "MD5");
                    else
                        Password = "";

                    if (User.Password != "")
                        Params.Add(new SqlParameter("Password", Password));
                    cmd.Parameters.AddRange(Params.ToArray());

                    //GetUserBeforeUpdate
                    UserClass OldUserData = GetUser(7, User.Id, true).Result;

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.ProcessUpdateUserNotifications(OldUserData);

                        if (!WithAccessToken)
                            user.AccessToken = "";

                        user.Order = 1;
                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUser", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> DeleteUser(int LoggedUser, int User)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUser";


                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", User),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();

                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUser", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> GetAdminUsers(int LoggedUser)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAdminUsers";
                    SqlParameter Param = new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order;

                            Users.Add(user);
                        }


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetAdminUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> SetUserCurrentBranch(int LoggedUser, int BranchId)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SetUserCurrentBranch";


                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (BranchId > 0)
                        Params.Add(new SqlParameter("BranchId", BranchId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();

                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SetUserCurrentBranch", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass_Short>> GetAdminUsers_Short(int LoggedUser)
        {
            ResultClass<List<UserClass_Short>> result = new ResultClass<List<UserClass_Short>>();
            List<UserClass_Short> userList = new List<UserClass_Short>();

            //Call Old API
            var apiResult = GetAdminUsers(LoggedUser);

            result.Code = apiResult.Code;
            result.Message = apiResult.Message;
            result.Result = new UserClass_Short().PopulateUsers(apiResult.Result);

            return result;
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> GetUserSenders(int LoggedUser, bool ForNotAdmins = false, bool ForReports = false, int PageId = 1,
         int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "App_GetUserSenders";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ForNotAdmins", ForNotAdmins),
                  new SqlParameter("ForReports", ForReports)
               };
                    if (PageId > 0)
                        Params.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        Params.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {

                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);


                            user.Order = order + (RecordsCount * (PageId - 1));

                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserSenders", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> GetUserReceivers(int LoggedUser, int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "App_GetUserReceivers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };
                    if (PageId > 0)
                        Params.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        Params.Add(new SqlParameter("RecordsCount", RecordsCount));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {

                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);

                            user.Order = order + (RecordsCount * (PageId - 1));

                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserReceivers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<bool> ActivateUsers(int LoggedUser, List<int> Users)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ActivateUsers";


                    DataTable table;


                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Users)
                            table.Rows.Add(x);

                    }

                    var pList = new SqlParameter("@Users", SqlDbType.Structured);
                    pList.Value = table;


                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<int> users = new List<int>();
                        while (reader.Read())
                        {
                            users.Add((int)reader["Id"]);
                        }
                        UserClass user = new UserClass();
                        user.ProcessActivateUsersNotification(users);
                    }


                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "ActivateUsers", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<List<UserClass>> GetUsersByIds(int LoggedUser, List<int> Ids, int PageId, int RecordsCount)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsersByIds";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    //Ids
                    if (Ids != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Ids)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Ids", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {

                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUsersByIds", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Search For User on Map by Client or who don't have loggedUser
        [SwaggerWcfTag("Users")]
        public ResultClass<List<UserClass>> NewSearchUsers_ForMapPage(int LoggedUser,
         bool FilterByUsername, string Username,
         bool FilterByJobIds, List<int> JobIds,
         int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUsers_New";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", 7),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("ForMap", 1),
                  new SqlParameter("FilterByVisibleOnMap", 1),
                  new SqlParameter("VisibleOnMap", 1),
                  new SqlParameter("FilterByLocationValidated", 1),
                  new SqlParameter("LocationValidated", 1),

                  new SqlParameter("Disabled", 0),
                  new SqlParameter("IsActive", 1),

                  new SqlParameter("FilterByUserTypeIds", 1),

                   new SqlParameter("FilterByUsername", FilterByUsername),
                   new SqlParameter("Username", Username),
               };

                    //UserTypeIds
                    List<int> UserTypeIds = new List<int> { 3, 4 };
                    DataTable userTypeTable;
                    using (userTypeTable = new DataTable())
                    {
                        userTypeTable.Columns.Add("Id", typeof(string));
                        foreach (int x in UserTypeIds)
                            userTypeTable.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@UserTypeIds", SqlDbType.Structured);
                    pList.Value = userTypeTable;
                    Params.Add(pList);

                    if ((FilterByJobIds) && (JobIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByJobIds", FilterByJobIds));

                        //JobIds
                        DataTable jobtable;
                        using (jobtable = new DataTable())
                        {
                            jobtable.Columns.Add("Id", typeof(string));
                            foreach (int x in JobIds)
                                jobtable.Rows.Add(x);
                        }
                        pList = new SqlParameter("@JobIds", SqlDbType.Structured);
                        pList.Value = jobtable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "NewSearchUsers_ForMapPage", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Update User Geolocation
        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass_Short> UpdateUserGeolocation(int LoggedUser, UserClass_Short User)
        {
            ResultClass<UserClass_Short> result = new ResultClass<UserClass_Short>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserGeoLocation";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", User.Id),
                  new SqlParameter("Latitude", User.Latitude),
                  new SqlParameter("Longitude", User.Longitude)
            };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.Order = 1;
                        result.Code = Errors.Success;
                        result.Result = new UserClass_Short().PopulateUser(user);
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserLocation", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Make User Location Validate
        [SwaggerWcfTag("Users")]
        public ResultClass<List<UserClass>> ValidateUsersGeoLocation(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ValidateUsersGeoLocation";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                       new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    //Ids
                    if (Ids != null)
                    {
                        DataTable idstbl;
                        using (idstbl = new DataTable())
                        {
                            idstbl.Columns.Add("Item", typeof(int));
                            foreach (int x in Ids)
                                idstbl.Rows.Add(x);
                        }
                        var idsList = new SqlParameter("@Ids", SqlDbType.Structured);
                        idsList.Value = idstbl;
                        Params.Add(idsList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserClass> Users = new List<UserClass>();
                        UserClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserClass().PopulateUser(fieldNames, reader);

                            id.Order = order;
                            Users.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "ValidateUsersGeoLocation", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Make User Visiable On Map
        [SwaggerWcfTag("Users")]
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserClass>> ShowUsersOnMap(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ShowUsersOnMap";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                       new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    //Ids
                    if (Ids != null)
                    {
                        DataTable idstbl;
                        using (idstbl = new DataTable())
                        {
                            idstbl.Columns.Add("Item", typeof(int));
                            foreach (int x in Ids)
                                idstbl.Rows.Add(x);
                        }
                        var idsList = new SqlParameter("@Ids", SqlDbType.Structured);
                        idsList.Value = idstbl;
                        Params.Add(idsList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserClass> Users = new List<UserClass>();
                        UserClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserClass().PopulateUser(fieldNames, reader);

                            id.Order = order;
                            Users.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "ShowUsersOnMap", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserBadgesClass> GetUserBadges(int LoggedUser)
        {
            ResultClass<UserBadgesClass> result = new ResultClass<UserBadgesClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserBadges";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                       new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserBadgesClass userBadge;
                        reader.Read();
                        userBadge = new UserBadgesClass().PopulateUserBadges(fieldNames, reader);


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userBadge;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetUserBadges", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        //UsersTypes
        [SwaggerWcfTag("Users Types")]
        public ResultClass<List<UserTypeClass>> GetUsersTypes(int LoggedUser, bool ForNotAdmins = false)
        {
            ResultClass<List<UserTypeClass>> result = new ResultClass<List<UserTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    Params.Add(new SqlParameter("ForNotAdmins", ForNotAdmins));
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserTypeClass> UsersTypes = new List<UserTypeClass>();
                        UserTypeClass userType;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            userType = new UserTypeClass().PopulateUserType(fieldNames, reader);

                            userType.Order = order;
                            UsersTypes.Add(userType);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UsersTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users Types")]
        public ResultClass<UserTypeClass> GetUserType(int UserTypeId)
        {
            ResultClass<UserTypeClass> result = new ResultClass<UserTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserType";
                    SqlParameter Param = new SqlParameter("UserTypeId", UserTypeId);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeClass userType;
                        reader.Read();
                        userType = new UserTypeClass().PopulateUserType(fieldNames, reader);


                        userType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetUserType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //User Permissions
        [SwaggerWcfTag("User Permissions")]
        public ResultClass<UserPermissionClass> UpdateUserPermission(int LoggedUser, UserPermissionClass UserPermission)
        {
            ResultClass<UserPermissionClass> result = new ResultClass<UserPermissionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserPermission";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", UserPermission.UserId),
                  //Users
                  new SqlParameter("CanCreateUsers", UserPermission.CanCreateUsers),
                  new SqlParameter("CanDeleteUsers", UserPermission.CanDeleteUsers),
                  new SqlParameter("CanUpdateUsers", UserPermission.CanUpdateUsers),
                  //Transfers
                  new SqlParameter("CanCreateTransfer", UserPermission.CanCreateTransfer),
                  new SqlParameter("CanDeleteTransfer", UserPermission.CanDeleteTransfer),
                  new SqlParameter("CanUpdateTransfer", UserPermission.CanUpdateTransfer),
                  new SqlParameter("CanTransfer", UserPermission.CanTransfer),
                  new SqlParameter("UnlimitedTransfer", UserPermission.UnlimitedTransfer),
                  new SqlParameter("MaxTransferAmount", UserPermission.MaxTransferAmount),
                  //Offers
                  new SqlParameter("CanCreateOffers", UserPermission.CanCreateOffers),
                  new SqlParameter("CanDeleteOffers", UserPermission.CanDeleteOffers),
                  new SqlParameter("CanUpdateOffers", UserPermission.CanUpdateOffers),
                  //Items
                  new SqlParameter("CanCreateItems", UserPermission.CanCreateItems),
                  new SqlParameter("CanDeleteItems", UserPermission.CanDeleteItems),
                  new SqlParameter("CanUpdateItems", UserPermission.CanUpdateItems),
                  //UserPermissions
                  new SqlParameter("CanChangeUserPermissions", UserPermission.CanChangeUserPermissions),
                  //Cities
                  new SqlParameter("CanCreateCities", UserPermission.CanCreateCities),
                  new SqlParameter("CanDeleteCities", UserPermission.CanDeleteCities),
                  new SqlParameter("CanUpdateCities", UserPermission.CanUpdateCities),
                  //Locations
                  new SqlParameter("CanCreateLocations", UserPermission.CanCreateLocations),
                  new SqlParameter("CanDeleteLocations", UserPermission.CanDeleteLocations),
                  new SqlParameter("CanUpdateLocations", UserPermission.CanUpdateLocations),
                  //Companies
                  new SqlParameter("CanCreateCompanies", UserPermission.CanCreateCompanies),
                  new SqlParameter("CanDeleteCompanies", UserPermission.CanDeleteCompanies),
                  new SqlParameter("CanUpdateCompanies", UserPermission.CanUpdateCompanies),
                  //Governorates
                  new SqlParameter("CanCreateGovernorates", UserPermission.CanCreateGovernorates),
                  new SqlParameter("CanDeleteGovernorates", UserPermission.CanDeleteGovernorates),
                  new SqlParameter("CanUpdateGovernorates", UserPermission.CanUpdateGovernorates),

                  //Cities
                  new SqlParameter("CanCreatePositions", UserPermission.CanCreatePositions),
                  new SqlParameter("CanDeletePositions", UserPermission.CanDeletePositions),
                  new SqlParameter("CanUpdatePositions", UserPermission.CanUpdatePositions),
                  //Locations
                  new SqlParameter("CanCreateJobs", UserPermission.CanCreateJobs),
                  new SqlParameter("CanDeleteJobs", UserPermission.CanDeleteJobs),
                  new SqlParameter("CanUpdateJobs", UserPermission.CanUpdateJobs),
                  //Companies
                  new SqlParameter("CanCreateWorkDomains", UserPermission.CanCreateWorkDomains),
                  new SqlParameter("CanDeleteWorkDomains", UserPermission.CanDeleteWorkDomains),
                  new SqlParameter("CanUpdateWorkDomains", UserPermission.CanUpdateWorkDomains),
                  //Governorates
                  new SqlParameter("CanCreateEducationLevels", UserPermission.CanCreateEducationLevels),
                  new SqlParameter("CanDeleteEducationLevels", UserPermission.CanDeleteEducationLevels),
                  new SqlParameter("CanUpdateEducationLevels", UserPermission.CanUpdateEducationLevels),

                  //Brands
                  new SqlParameter("CanCreateBrands", UserPermission.CanCreateBrands),
                  new SqlParameter("CanDeleteBrands", UserPermission.CanDeleteBrands),
                  new SqlParameter("CanUpdateBrands", UserPermission.CanUpdateBrands),

                  //Categories
                  new SqlParameter("CanCreateCategories", UserPermission.CanCreateCategories),
                  new SqlParameter("CanDeleteCategories", UserPermission.CanDeleteCategories),
                  new SqlParameter("CanUpdateCategories", UserPermission.CanUpdateCategories),

                  //Colors
                  new SqlParameter("CanCreateColors", UserPermission.CanCreateColors),
                  new SqlParameter("CanDeleteColors", UserPermission.CanDeleteColors),
                  new SqlParameter("CanUpdateColors", UserPermission.CanUpdateColors),

                  //Governorates
                  new SqlParameter("CanCreateCountries", UserPermission.CanCreateCountries),
                  new SqlParameter("CanDeleteCountries", UserPermission.CanDeleteCountries),
                  new SqlParameter("CanUpdateCountries", UserPermission.CanUpdateCountries),

                  //Governorates
                  new SqlParameter("CanCreateCurrencies", UserPermission.CanCreateCurrencies),
                  new SqlParameter("CanDeleteCurrencies", UserPermission.CanDeleteCurrencies),
                  new SqlParameter("CanUpdateCurrencies", UserPermission.CanUpdateCurrencies),

                  //Governorates
                  new SqlParameter("CanCreateOrders", UserPermission.CanCreateOrders),
                  new SqlParameter("CanDeleteOrders", UserPermission.CanDeleteOrders),
                  new SqlParameter("CanUpdateOrders", UserPermission.CanUpdateOrders),

                  //Colmns
                  new SqlParameter("CanUpdateColumns", UserPermission.CanUpdateColumns),
                  new SqlParameter("CanUpdateColumnsTemplete", UserPermission.CanUpdateColumnsTemplete),

                   //UserTransferCompanies
                  new SqlParameter("CanCreateUserCompanies", UserPermission.CanCreateUserCompanies),
                  new SqlParameter("CanUpdateUserCompanies", UserPermission.CanUpdateUserCompanies),
                  new SqlParameter("CanDeleteUserCompanies", UserPermission.CanDeleteUserCompanies),
                                   
                  //UserTypeTransferRules
                  new SqlParameter("CanCreateUserTypeTransferRules", UserPermission.CanCreateUserTypeTransferRules),
                  new SqlParameter("CanUpdateUserTypeTransferRules", UserPermission.CanUpdateUserTypeTransferRules),
                  new SqlParameter("CanDeleteUserTypeTransferRules", UserPermission.CanDeleteUserTypeTransferRules),

                   //UserTransferTypes
                  new SqlParameter("CanCreateUserTransferRules", UserPermission.CanCreateUserTransferRules),
                  new SqlParameter("CanUpdateUserTransferRules", UserPermission.CanUpdateUserTransferRules),
                  new SqlParameter("CanDeleteUserTransferRules", UserPermission.CanDeleteUserTransferRules),

                   //UserTransferTypes
                  new SqlParameter("CanCreateUserTransferException", UserPermission.CanCreateUserTransferException),
                  new SqlParameter("CanUpdateUserTransferException", UserPermission.CanUpdateUserTransferException),
                  new SqlParameter("CanDeleteUserTransferException", UserPermission.CanDeleteUserTransferException),


                  //profile
                  new SqlParameter("CanCreateUserProfileColumns", UserPermission.CanCreateUserProfileColumns),
                  new SqlParameter("CanUpdateUserProfileColumns", UserPermission.CanUpdateUserProfileColumns),
                  new SqlParameter("CanDeleteUserProfileColumns", UserPermission.CanDeleteUserProfileColumns),

                  new SqlParameter("CanValidateUserLocation", UserPermission.CanValidateUserLocation),


                  //new added for matjar 07-01-2018
                  new SqlParameter ("CanCreateBanners", UserPermission.CanCreateBanners),
                  new SqlParameter ("CanCreateItemColors", UserPermission.CanCreateItemColors),
                  new SqlParameter ("CanCreateItemImages", UserPermission.CanCreateItemImages),
                  new SqlParameter ("CanCreateItemPrices", UserPermission.CanCreateItemPrices),
                  new SqlParameter ("CanCreateItemSizes", UserPermission.CanCreateItemSizes),
                  new SqlParameter ("CanCreateItemsCompanies", UserPermission.CanCreateItemsCompanies),
                  new SqlParameter ("CanCreateItemsGovernorates", UserPermission.CanCreateItemsGovernorates),
                  new SqlParameter ("CanCreateItemsUsersTypes", UserPermission.CanCreateItemsUsersTypes),
                  new SqlParameter ("CanCreateOffersCompanies", UserPermission.CanCreateOffersCompanies),
                  new SqlParameter ("CanCreateOffersDetails", UserPermission.CanCreateOffersDetails),
                  new SqlParameter ("CanCreateOffersGovernorates", UserPermission.CanCreateOffersGovernorates),
                  new SqlParameter ("CanCreateOffersUsersTypes", UserPermission.CanCreateOffersUsersTypes),
                  new SqlParameter ("CanCreateOrderDetails", UserPermission.CanCreateOrderDetails),
                  new SqlParameter ("CanCreatePriceTypes", UserPermission.CanCreatePriceTypes),

                  new SqlParameter ("CanCreateSizes", UserPermission.CanCreateSizes),
                  new SqlParameter ("CanCreateSizesGroups", UserPermission.CanCreateSizesGroups),
                  new SqlParameter ("CanDeleteBanners", UserPermission.CanDeleteBanners),
                  new SqlParameter ("CanDeleteItemColors", UserPermission.CanDeleteItemColors),
                  new SqlParameter ("CanDeleteItemPrices", UserPermission.CanDeleteItemPrices),
                  new SqlParameter ("CanDeleteItemSizes", UserPermission.CanDeleteItemSizes),
                  new SqlParameter ("CanDeleteItemsCompanies", UserPermission.CanDeleteItemsCompanies),
                  new SqlParameter ("CanDeleteItemsGovernorates", UserPermission.CanDeleteItemsGovernorates),
                  new SqlParameter ("CanDeleteItemsUsersTypes", UserPermission.CanDeleteItemsUsersTypes),
                  new SqlParameter ("CanDeleteOffersCompanies", UserPermission.CanDeleteOffersCompanies),
                  new SqlParameter ("CanDeleteOffersDetails", UserPermission.CanDeleteOffersDetails),
                  new SqlParameter ("CanDeleteOffersGovernorates", UserPermission.CanDeleteOffersGovernorates),
                  new SqlParameter ("CanDeleteOffersUsersTypes", UserPermission.CanDeleteOffersUsersTypes),
                  new SqlParameter ("CanDeleteOrderDetails", UserPermission.CanDeleteOrderDetails),
                  new SqlParameter ("CanDeletePriceTypes", UserPermission.CanDeletePriceTypes),
                  new SqlParameter ("CanDeleteSizes", UserPermission.CanDeleteSizes),
                  new SqlParameter ("CanDeleteSizesGroups", UserPermission.CanDeleteSizesGroups),
                  new SqlParameter ("CanUpdateBanners", UserPermission.CanUpdateBanners),

                  new SqlParameter ("CanUpdateItemColors", UserPermission.CanUpdateItemColors),
                  new SqlParameter ("CanUpdateItemImages", UserPermission.CanUpdateItemImages),
                  new SqlParameter ("CanUpdateItemPrices", UserPermission.CanUpdateItemPrices),
                  new SqlParameter ("CanUpdateItemSizes", UserPermission.CanUpdateItemSizes),
                  new SqlParameter ("CanUpdateItemsCompanies", UserPermission.CanUpdateItemsCompanies),
                  new SqlParameter ("CanUpdateItemsGovernorates", UserPermission.CanUpdateItemsGovernorates),
                  new SqlParameter ("CanUpdateItemsUsersTypes", UserPermission.CanUpdateItemsUsersTypes),
                  new SqlParameter ("CanUpdateOffersCompanies", UserPermission.CanUpdateOffersCompanies),
                  new SqlParameter ("CanUpdateOffersDetails", UserPermission.CanUpdateOffersDetails),
                  new SqlParameter ("CanUpdateOffersGovernorates", UserPermission.CanUpdateOffersGovernorates),
                  new SqlParameter ("CanUpdateOffersUsersTypes", UserPermission.CanUpdateOffersUsersTypes),
                  new SqlParameter ("CanUpdateOrderDetails", UserPermission.CanUpdateOrderDetails),
                  new SqlParameter ("CanUpdatePriceTypes", UserPermission.CanUpdatePriceTypes),
                  new SqlParameter ("CanUpdateSizes", UserPermission.CanUpdateSizes),
                  new SqlParameter ("CanUpdateSizesGroups", UserPermission.CanUpdateSizesGroups),
                new SqlParameter ("CanViewHome", UserPermission.CanViewHome),
                new SqlParameter ("CanViewItems", UserPermission.CanViewItems),
                new SqlParameter ("CanViewReports", UserPermission.CanViewReports),
                new SqlParameter ("CanViewTransfers", UserPermission.CanViewTransfers),
                new SqlParameter ("CanViewMainBalance", UserPermission.CanViewMainBalance),
                new SqlParameter ("CanViewIndexs", UserPermission.CanViewIndexs),
                new SqlParameter ("CanViewOffers", UserPermission.CanViewOffers),
                new SqlParameter ("CanViewOrders", UserPermission.CanViewOrders),
                new SqlParameter ("CanViewComplains", UserPermission.CanViewComplains),
                new SqlParameter ("CanViewMaintenance", UserPermission.CanViewMaintenance),
                new SqlParameter ("CanViewUsers", UserPermission.CanViewUsers),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserPermissionClass userPermission;
                        reader.Read();
                        userPermission = new UserPermissionClass().PopulateUserPermission(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userPermission;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserPermissions", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("User Permissions")]
        public ResultClass<UserPermissionClass> GetUserPermission(int LoggedUser, int UserId)
        {
            ResultClass<UserPermissionClass> result = new ResultClass<UserPermissionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserPermission";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", UserId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserPermissionClass userPermission;
                        reader.Read();
                        userPermission = new UserPermissionClass().PopulateUserPermission(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userPermission;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserPermissions", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<UserPermissionClass> UpdateUserPermission_ForMatjar(int LoggedUser, UserPermissionClass UserPermission)
        {
            ResultClass<UserPermissionClass> result = new ResultClass<UserPermissionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserPermission";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", UserPermission.UserId),
                  //Users
                  new SqlParameter("CanCreateUsers", UserPermission.CanCreateUsers),
                  new SqlParameter("CanDeleteUsers", UserPermission.CanDeleteUsers),
                  new SqlParameter("CanUpdateUsers", UserPermission.CanUpdateUsers),
                  //Transfers
                  new SqlParameter("CanCreateTransfer", UserPermission.CanCreateTransfer),
                  new SqlParameter("CanDeleteTransfer", UserPermission.CanDeleteTransfer),
                  new SqlParameter("CanUpdateTransfer", UserPermission.CanUpdateTransfer),
                  new SqlParameter("CanTransfer", UserPermission.CanTransfer),
                  new SqlParameter("UnlimitedTransfer", UserPermission.UnlimitedTransfer),
                  new SqlParameter("MaxTransferAmount", UserPermission.MaxTransferAmount),
                  //Offers
                  new SqlParameter("CanCreateOffers", UserPermission.CanCreateOffers),
                  new SqlParameter("CanDeleteOffers", UserPermission.CanDeleteOffers),
                  new SqlParameter("CanUpdateOffers", UserPermission.CanUpdateOffers),
                  //Items
                  new SqlParameter("CanCreateItems", UserPermission.CanCreateItems),
                  new SqlParameter("CanDeleteItems", UserPermission.CanDeleteItems),
                  new SqlParameter("CanUpdateItems", UserPermission.CanUpdateItems),
                  //UserPermissions
                  new SqlParameter("CanChangeUserPermissions", UserPermission.CanChangeUserPermissions),
                  //Cities
                  new SqlParameter("CanCreateCities", UserPermission.CanCreateCities),
                  new SqlParameter("CanDeleteCities", UserPermission.CanDeleteCities),
                  new SqlParameter("CanUpdateCities", UserPermission.CanUpdateCities),
                  //Locations
                  new SqlParameter("CanCreateLocations", UserPermission.CanCreateLocations),
                  new SqlParameter("CanDeleteLocations", UserPermission.CanDeleteLocations),
                  new SqlParameter("CanUpdateLocations", UserPermission.CanUpdateLocations),
                  //Companies
                  new SqlParameter("CanCreateCompanies", UserPermission.CanCreateCompanies),
                  new SqlParameter("CanDeleteCompanies", UserPermission.CanDeleteCompanies),
                  new SqlParameter("CanUpdateCompanies", UserPermission.CanUpdateCompanies),
                  //Governorates
                  new SqlParameter("CanCreateGovernorates", UserPermission.CanCreateGovernorates),
                  new SqlParameter("CanDeleteGovernorates", UserPermission.CanDeleteGovernorates),
                  new SqlParameter("CanUpdateGovernorates", UserPermission.CanUpdateGovernorates),

                  //Cities
                  new SqlParameter("CanCreatePositions", UserPermission.CanCreatePositions),
                  new SqlParameter("CanDeletePositions", UserPermission.CanDeletePositions),
                  new SqlParameter("CanUpdatePositions", UserPermission.CanUpdatePositions),
                  //Locations
                  new SqlParameter("CanCreateJobs", UserPermission.CanCreateJobs),
                  new SqlParameter("CanDeleteJobs", UserPermission.CanDeleteJobs),
                  new SqlParameter("CanUpdateJobs", UserPermission.CanUpdateJobs),
                  //Companies
                  new SqlParameter("CanCreateWorkDomains", UserPermission.CanCreateWorkDomains),
                  new SqlParameter("CanDeleteWorkDomains", UserPermission.CanDeleteWorkDomains),
                  new SqlParameter("CanUpdateWorkDomains", UserPermission.CanUpdateWorkDomains),
                  //Governorates
                  new SqlParameter("CanCreateEducationLevels", UserPermission.CanCreateEducationLevels),
                  new SqlParameter("CanDeleteEducationLevels", UserPermission.CanDeleteEducationLevels),
                  new SqlParameter("CanUpdateEducationLevels", UserPermission.CanUpdateEducationLevels),

                  //Brands
                  new SqlParameter("CanCreateBrands", UserPermission.CanCreateBrands),
                  new SqlParameter("CanDeleteBrands", UserPermission.CanDeleteBrands),
                  new SqlParameter("CanUpdateBrands", UserPermission.CanUpdateBrands),

                  //Categories
                  new SqlParameter("CanCreateCategories", UserPermission.CanCreateCategories),
                  new SqlParameter("CanDeleteCategories", UserPermission.CanDeleteCategories),
                  new SqlParameter("CanUpdateCategories", UserPermission.CanUpdateCategories),

                  //Colors
                  new SqlParameter("CanCreateColors", UserPermission.CanCreateColors),
                  new SqlParameter("CanDeleteColors", UserPermission.CanDeleteColors),
                  new SqlParameter("CanUpdateColors", UserPermission.CanUpdateColors),

                  //Governorates
                  new SqlParameter("CanCreateCountries", UserPermission.CanCreateCountries),
                  new SqlParameter("CanDeleteCountries", UserPermission.CanDeleteCountries),
                  new SqlParameter("CanUpdateCountries", UserPermission.CanUpdateCountries),

                  //Governorates
                  new SqlParameter("CanCreateCurrencies", UserPermission.CanCreateCurrencies),
                  new SqlParameter("CanDeleteCurrencies", UserPermission.CanDeleteCurrencies),
                  new SqlParameter("CanUpdateCurrencies", UserPermission.CanUpdateCurrencies),

                  //Governorates
                  new SqlParameter("CanCreateOrders", UserPermission.CanCreateOrders),
                  new SqlParameter("CanDeleteOrders", UserPermission.CanDeleteOrders),
                  new SqlParameter("CanUpdateOrders", UserPermission.CanUpdateOrders),

                  //Colmns
                  new SqlParameter("CanUpdateColumns", UserPermission.CanUpdateColumns),
                  new SqlParameter("CanUpdateColumnsTemplete", UserPermission.CanUpdateColumnsTemplete),

                  //new added for matjar 07-01-2018
                  new SqlParameter("CanCreateBanners", UserPermission.CanCreateBanners),
                  new SqlParameter("CanCreateItemColors", UserPermission.CanCreateItemColors),
                  new SqlParameter("CanCreateItemImages", UserPermission.CanCreateItemImages),
                  new SqlParameter("CanCreateItemPrices", UserPermission.CanCreateItemPrices),
                  new SqlParameter("CanCreateItemSizes", UserPermission.CanCreateItemSizes),
                  new SqlParameter("CanCreateItemsCompanies", UserPermission.CanCreateItemsCompanies),
                  new SqlParameter("CanCreateItemsGovernorates", UserPermission.CanCreateItemsGovernorates),
                  new SqlParameter("CanCreateItemsUsersTypes", UserPermission.CanCreateItemsUsersTypes),
                  new SqlParameter("CanCreateOffersCompanies", UserPermission.CanCreateOffersCompanies),
                  new SqlParameter("CanCreateOffersDetails", UserPermission.CanCreateOffersDetails),
                  new SqlParameter("CanCreateOffersGovernorates", UserPermission.CanCreateOffersGovernorates),
                  new SqlParameter("CanCreateOffersUsersTypes", UserPermission.CanCreateOffersUsersTypes),
                  new SqlParameter("CanCreateOrderDetails", UserPermission.CanCreateOrderDetails),
                  new SqlParameter("CanCreatePriceTypes", UserPermission.CanCreatePriceTypes),

                  new SqlParameter("CanCreateSizes", UserPermission.CanCreateSizes),
                  new SqlParameter("CanCreateSizesGroups", UserPermission.CanCreateSizesGroups),
                  new SqlParameter("CanDeleteBanners", UserPermission.CanDeleteBanners),
                  new SqlParameter("CanDeleteItemColors", UserPermission.CanDeleteItemColors),
                  new SqlParameter("CanDeleteItemPrices", UserPermission.CanDeleteItemPrices),
                  new SqlParameter("CanDeleteItemSizes", UserPermission.CanDeleteItemSizes),
                  new SqlParameter("CanDeleteItemsCompanies", UserPermission.CanDeleteItemsCompanies),
                  new SqlParameter("CanDeleteItemsGovernorates", UserPermission.CanDeleteItemsGovernorates),
                  new SqlParameter("CanDeleteItemsUsersTypes", UserPermission.CanDeleteItemsUsersTypes),
                  new SqlParameter("CanDeleteOffersCompanies", UserPermission.CanDeleteOffersCompanies),
                  new SqlParameter("CanDeleteOffersDetails", UserPermission.CanDeleteOffersDetails),
                  new SqlParameter("CanDeleteOffersGovernorates", UserPermission.CanDeleteOffersGovernorates),
                  new SqlParameter("CanDeleteOffersUsersTypes", UserPermission.CanDeleteOffersUsersTypes),
                  new SqlParameter("CanDeleteOrderDetails", UserPermission.CanDeleteOrderDetails),
                  new SqlParameter("CanDeletePriceTypes", UserPermission.CanDeletePriceTypes),
                  new SqlParameter("CanDeleteSizes", UserPermission.CanDeleteSizes),
                  new SqlParameter("CanDeleteSizesGroups", UserPermission.CanDeleteSizesGroups),
                  new SqlParameter("CanUpdateBanners", UserPermission.CanUpdateBanners),

                   new SqlParameter("CanUpdateItemColors", UserPermission.CanUpdateItemColors),
                   new SqlParameter("CanUpdateItemImages", UserPermission.CanUpdateItemImages),
                  new SqlParameter("CanUpdateItemPrices", UserPermission.CanUpdateItemPrices),
                  new SqlParameter("CanUpdateItemSizes", UserPermission.CanUpdateItemSizes),
                  new SqlParameter("CanUpdateItemsCompanies", UserPermission.CanUpdateItemsCompanies),
                  new SqlParameter("CanUpdateItemsGovernorates", UserPermission.CanUpdateItemsGovernorates),
                  new SqlParameter("CanUpdateItemsUsersTypes", UserPermission.CanUpdateItemsUsersTypes),
                  new SqlParameter("CanUpdateOffersCompanies", UserPermission.CanUpdateOffersCompanies),
                  new SqlParameter("CanUpdateOffersDetails", UserPermission.CanUpdateOffersDetails),
                  new SqlParameter("CanUpdateOffersGovernorates", UserPermission.CanUpdateOffersGovernorates),
                  new SqlParameter("CanUpdateOffersUsersTypes", UserPermission.CanUpdateOffersUsersTypes),
                  new SqlParameter("CanUpdateOrderDetails", UserPermission.CanUpdateOrderDetails),
                  new SqlParameter("CanUpdatePriceTypes", UserPermission.CanUpdatePriceTypes),
                  new SqlParameter("CanUpdateSizes", UserPermission.CanUpdateSizes),
                  new SqlParameter("CanUpdateSizesGroups", UserPermission.CanUpdateSizesGroups),


                   //UserTransferCompanies
                  new SqlParameter("CanCreateUserCompanies", UserPermission.CanCreateUserCompanies),
                  new SqlParameter("CanUpdateUserCompanies", UserPermission.CanUpdateUserCompanies),
                  new SqlParameter("CanDeleteUserCompanies", UserPermission.CanDeleteUserCompanies),
                                   
                  //UserTypeTransferRules
                  new SqlParameter("CanCreateUserTypeTransferRules", UserPermission.CanCreateUserTypeTransferRules),
                  new SqlParameter("CanUpdateUserTypeTransferRules", UserPermission.CanUpdateUserTypeTransferRules),
                  new SqlParameter("CanDeleteUserTypeTransferRules", UserPermission.CanDeleteUserTypeTransferRules),

                   //UserTransferTypes
                  new SqlParameter("CanCreateUserTransferRules", UserPermission.CanCreateUserTransferRules),
                  new SqlParameter("CanUpdateUserTransferRules", UserPermission.CanUpdateUserTransferRules),
                  new SqlParameter("CanDeleteUserTransferRules", UserPermission.CanDeleteUserTransferRules),

                   //UserTransferTypes
                  new SqlParameter("CanCreateUserTransferException", UserPermission.CanCreateUserTransferException),
                  new SqlParameter("CanUpdateUserTransferException", UserPermission.CanUpdateUserTransferException),
                  new SqlParameter("CanDeleteUserTransferException", UserPermission.CanDeleteUserTransferException),

                    new SqlParameter ("CanViewHome", UserPermission.CanViewHome),
                    new SqlParameter ("CanViewItems", UserPermission.CanViewItems),
                    new SqlParameter ("CanViewReports", UserPermission.CanViewReports),
                    new SqlParameter ("CanViewTransfers", UserPermission.CanViewTransfers),
                    new SqlParameter ("CanViewMainBalance", UserPermission.CanViewMainBalance),
                    new SqlParameter ("CanViewIndexs", UserPermission.CanViewIndexs),
                    new SqlParameter ("CanViewOffers", UserPermission.CanViewOffers),
                    new SqlParameter ("CanViewOrders", UserPermission.CanViewOrders),
                    new SqlParameter ("CanViewComplains", UserPermission.CanViewComplains),
                    new SqlParameter ("CanViewMaintenance", UserPermission.CanViewMaintenance),
                    new SqlParameter ("CanViewUsers", UserPermission.CanViewUsers),

               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserPermissionClass userPermission;
                        reader.Read();
                        userPermission = new UserPermissionClass().PopulateUserPermission(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userPermission;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserPermissions", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        //User Permissions Templates
        [SwaggerWcfTag("User Permissions Templates")]
        public ResultClass<UserPermissionClass> GetUserPermissionTemplate(int LoggedUser, int TemplateId)
        {
            ResultClass<UserPermissionClass> result = new ResultClass<UserPermissionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserPermissionTemplate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("TemplateId", TemplateId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserPermissionClass permissionTemplate;
                        reader.Read();
                        permissionTemplate = new UserPermissionClass().PopulateUserPermission(fieldNames, reader);


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = permissionTemplate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserPermissionTemplate",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("User Permissions Templates")]
        public ResultClass<List<UserPermissionClass>> GetUserPermissionTemplates(int LoggedUser)
        {
            ResultClass<List<UserPermissionClass>> result = new ResultClass<List<UserPermissionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserPermissionTemplate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserPermissionClass> permissionTemplateList = new List<UserPermissionClass>();

                        UserPermissionClass permissionTemplate;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            permissionTemplate = new UserPermissionClass().PopulateUserPermission(fieldNames, reader);

                            permissionTemplate.Order = order;
                            permissionTemplateList.Add(permissionTemplate);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = permissionTemplateList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserPermissionTemplate",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("User Permissions Templates")]
        public ResultClass<UserPermissionClass> UpdateUserPermissionTemplate(int LoggedUser,
           UserPermissionClass UserPermission)
        {
            ResultClass<UserPermissionClass> result = new ResultClass<UserPermissionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserPermissionTemplates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", UserPermission.Id),
                  //Users
                  new SqlParameter("CanCreateUsers", UserPermission.CanCreateUsers),
                  new SqlParameter("CanDeleteUsers", UserPermission.CanDeleteUsers),
                  new SqlParameter("CanUpdateUsers", UserPermission.CanUpdateUsers),
                  //Transfers
                  new SqlParameter("CanCreateTransfer", UserPermission.CanCreateTransfer),
                  new SqlParameter("CanDeleteTransfer", UserPermission.CanDeleteTransfer),
                  new SqlParameter("CanUpdateTransfer", UserPermission.CanUpdateTransfer),
                  new SqlParameter("CanTransfer", UserPermission.CanTransfer),
                  new SqlParameter("UnlimitedTransfer", UserPermission.UnlimitedTransfer),
                  new SqlParameter("MaxTransferAmount", UserPermission.MaxTransferAmount),
                  //Offers
                  new SqlParameter("CanCreateOffers", UserPermission.CanCreateOffers),
                  new SqlParameter("CanDeleteOffers", UserPermission.CanDeleteOffers),
                  new SqlParameter("CanUpdateOffers", UserPermission.CanUpdateOffers),
                  //Items
                  new SqlParameter("CanCreateItems", UserPermission.CanCreateItems),
                  new SqlParameter("CanDeleteItems", UserPermission.CanDeleteItems),
                  new SqlParameter("CanUpdateItems", UserPermission.CanUpdateItems),
                  //UserPermissions
                  new SqlParameter("CanChangeUserPermissions", UserPermission.CanChangeUserPermissions),
                  //Cities
                  new SqlParameter("CanCreateCities", UserPermission.CanCreateCities),
                  new SqlParameter("CanDeleteCities", UserPermission.CanDeleteCities),
                  new SqlParameter("CanUpdateCities", UserPermission.CanUpdateCities),
                  //Locations
                  new SqlParameter("CanCreateLocations", UserPermission.CanCreateLocations),
                  new SqlParameter("CanDeleteLocations", UserPermission.CanDeleteLocations),
                  new SqlParameter("CanUpdateLocations", UserPermission.CanUpdateLocations),
                  //Companies
                  new SqlParameter("CanCreateCompanies", UserPermission.CanCreateCompanies),
                  new SqlParameter("CanDeleteCompanies", UserPermission.CanDeleteCompanies),
                  new SqlParameter("CanUpdateCompanies", UserPermission.CanUpdateCompanies),
                  //Governorates
                  new SqlParameter("CanCreateGovernorates", UserPermission.CanCreateGovernorates),
                  new SqlParameter("CanDeleteGovernorates", UserPermission.CanDeleteGovernorates),
                  new SqlParameter("CanUpdateGovernorates", UserPermission.CanUpdateGovernorates),

                  //Cities
                  new SqlParameter("CanCreatePositions", UserPermission.CanCreatePositions),
                  new SqlParameter("CanDeletePositions", UserPermission.CanDeletePositions),
                  new SqlParameter("CanUpdatePositions", UserPermission.CanUpdatePositions),
                  //Locations
                  new SqlParameter("CanCreateJobs", UserPermission.CanCreateJobs),
                  new SqlParameter("CanDeleteJobs", UserPermission.CanDeleteJobs),
                  new SqlParameter("CanUpdateJobs", UserPermission.CanUpdateJobs),
                  //Companies
                  new SqlParameter("CanCreateWorkDomains", UserPermission.CanCreateWorkDomains),
                  new SqlParameter("CanDeleteWorkDomains", UserPermission.CanDeleteWorkDomains),
                  new SqlParameter("CanUpdateWorkDomains", UserPermission.CanUpdateWorkDomains),
                  //Governorates
                  new SqlParameter("CanCreateEducationLevels", UserPermission.CanCreateEducationLevels),
                  new SqlParameter("CanDeleteEducationLevels", UserPermission.CanDeleteEducationLevels),
                  new SqlParameter("CanUpdateEducationLevels", UserPermission.CanUpdateEducationLevels),

                  //Brands
                  new SqlParameter("CanCreateBrands", UserPermission.CanCreateBrands),
                  new SqlParameter("CanDeleteBrands", UserPermission.CanDeleteBrands),
                  new SqlParameter("CanUpdateBrands", UserPermission.CanUpdateBrands),

                  //Categories
                  new SqlParameter("CanCreateCategories", UserPermission.CanCreateCategories),
                  new SqlParameter("CanDeleteCategories", UserPermission.CanDeleteCategories),
                  new SqlParameter("CanUpdateCategories", UserPermission.CanUpdateCategories),

                  //Colors
                  new SqlParameter("CanCreateColors", UserPermission.CanCreateColors),
                  new SqlParameter("CanDeleteColors", UserPermission.CanDeleteColors),
                  new SqlParameter("CanUpdateColors", UserPermission.CanUpdateColors),

                  //Governorates
                  new SqlParameter("CanCreateCountries", UserPermission.CanCreateCountries),
                  new SqlParameter("CanDeleteCountries", UserPermission.CanDeleteCountries),
                  new SqlParameter("CanUpdateCountries", UserPermission.CanUpdateCountries),

                  //Governorates
                  new SqlParameter("CanCreateCurrencies", UserPermission.CanCreateCurrencies),
                  new SqlParameter("CanDeleteCurrencies", UserPermission.CanDeleteCurrencies),
                  new SqlParameter("CanUpdateCurrencies", UserPermission.CanUpdateCurrencies),

                  //Governorates
                  new SqlParameter("CanCreateOrders", UserPermission.CanCreateOrders),
                  new SqlParameter("CanDeleteOrders", UserPermission.CanDeleteOrders),
                  new SqlParameter("CanUpdateOrders", UserPermission.CanUpdateOrders),

                  //Template
                  new SqlParameter("UserTypesId", UserPermission.UserTypesId),
                  new SqlParameter("ArabicName", UserPermission.ArabicName),
                  new SqlParameter("EnglishName", UserPermission.EnglishName),

                  //Colmns
                  new SqlParameter("CanUpdateColumns", UserPermission.CanUpdateColumns),
                  new SqlParameter("CanUpdateColumnsTemplete", UserPermission.CanUpdateColumnsTemplete),

                   //UserTransferCompanies
                  new SqlParameter("CanCreateUserCompanies", UserPermission.CanCreateUserCompanies),
                  new SqlParameter("CanUpdateUserCompanies", UserPermission.CanUpdateUserCompanies),
                  new SqlParameter("CanDeleteUserCompanies", UserPermission.CanDeleteUserCompanies),
                                   
                  //UserTypeTransferRules
                  new SqlParameter("CanCreateUserTypeTransferRules", UserPermission.CanCreateUserTypeTransferRules),
                  new SqlParameter("CanUpdateUserTypeTransferRules", UserPermission.CanUpdateUserTypeTransferRules),
                  new SqlParameter("CanDeleteUserTypeTransferRules", UserPermission.CanDeleteUserTypeTransferRules),

                   //UserTransferTypes
                  new SqlParameter("CanCreateUserTransferRules", UserPermission.CanCreateUserTransferRules),
                  new SqlParameter("CanUpdateUserTransferRules", UserPermission.CanUpdateUserTransferRules),
                  new SqlParameter("CanDeleteUserTransferRules", UserPermission.CanDeleteUserTransferRules),

                   //UserTransferTypes
                  new SqlParameter("CanCreateUserTransferException", UserPermission.CanCreateUserTransferException),
                  new SqlParameter("CanUpdateUserTransferException", UserPermission.CanUpdateUserTransferException),
                  new SqlParameter("CanDeleteUserTransferException", UserPermission.CanDeleteUserTransferException),


                  //profile
                  new SqlParameter("CanCreateUserProfileColumns", UserPermission.CanCreateUserProfileColumns),
                  new SqlParameter("CanUpdateUserProfileColumns", UserPermission.CanUpdateUserProfileColumns),
                  new SqlParameter("CanDeleteUserProfileColumns", UserPermission.CanDeleteUserProfileColumns),

                  new SqlParameter("CanValidateUserLocation", UserPermission.CanValidateUserLocation),

                   //new added for matjar 07-01-2018
                  new SqlParameter ("CanCreateBanners", UserPermission.CanCreateBanners),
                  new SqlParameter ("CanCreateItemColors", UserPermission.CanCreateItemColors),
                  new SqlParameter ("CanCreateItemImages", UserPermission.CanCreateItemImages),
                  new SqlParameter ("CanCreateItemPrices", UserPermission.CanCreateItemPrices),
                  new SqlParameter ("CanCreateItemSizes", UserPermission.CanCreateItemSizes),
                  new SqlParameter ("CanCreateItemsCompanies", UserPermission.CanCreateItemsCompanies),
                  new SqlParameter ("CanCreateItemsGovernorates", UserPermission.CanCreateItemsGovernorates),
                  new SqlParameter ("CanCreateItemsUsersTypes", UserPermission.CanCreateItemsUsersTypes),
                  new SqlParameter ("CanCreateOffersCompanies", UserPermission.CanCreateOffersCompanies),
                  new SqlParameter ("CanCreateOffersDetails", UserPermission.CanCreateOffersDetails),
                  new SqlParameter ("CanCreateOffersGovernorates", UserPermission.CanCreateOffersGovernorates),
                  new SqlParameter ("CanCreateOffersUsersTypes", UserPermission.CanCreateOffersUsersTypes),
                  new SqlParameter ("CanCreateOrderDetails", UserPermission.CanCreateOrderDetails),
                  new SqlParameter ("CanCreatePriceTypes", UserPermission.CanCreatePriceTypes),

                  new SqlParameter ("CanCreateSizes", UserPermission.CanCreateSizes),
                  new SqlParameter ("CanCreateSizesGroups", UserPermission.CanCreateSizesGroups),
                  new SqlParameter ("CanDeleteBanners", UserPermission.CanDeleteBanners),
                  new SqlParameter ("CanDeleteItemColors", UserPermission.CanDeleteItemColors),
                  new SqlParameter ("CanDeleteItemPrices", UserPermission.CanDeleteItemPrices),
                  new SqlParameter ("CanDeleteItemSizes", UserPermission.CanDeleteItemSizes),
                  new SqlParameter ("CanDeleteItemsCompanies", UserPermission.CanDeleteItemsCompanies),
                  new SqlParameter ("CanDeleteItemsGovernorates", UserPermission.CanDeleteItemsGovernorates),
                  new SqlParameter ("CanDeleteItemsUsersTypes", UserPermission.CanDeleteItemsUsersTypes),
                  new SqlParameter ("CanDeleteOffersCompanies", UserPermission.CanDeleteOffersCompanies),
                  new SqlParameter ("CanDeleteOffersDetails", UserPermission.CanDeleteOffersDetails),
                  new SqlParameter ("CanDeleteOffersGovernorates", UserPermission.CanDeleteOffersGovernorates),
                  new SqlParameter ("CanDeleteOffersUsersTypes", UserPermission.CanDeleteOffersUsersTypes),
                  new SqlParameter ("CanDeleteOrderDetails", UserPermission.CanDeleteOrderDetails),
                  new SqlParameter ("CanDeletePriceTypes", UserPermission.CanDeletePriceTypes),
                  new SqlParameter ("CanDeleteSizes", UserPermission.CanDeleteSizes),
                  new SqlParameter ("CanDeleteSizesGroups", UserPermission.CanDeleteSizesGroups),
                  new SqlParameter ("CanUpdateBanners", UserPermission.CanUpdateBanners),

                  new SqlParameter ("CanUpdateItemColors", UserPermission.CanUpdateItemColors),
                  new SqlParameter ("CanUpdateItemImages", UserPermission.CanUpdateItemImages),
                  new SqlParameter ("CanUpdateItemPrices", UserPermission.CanUpdateItemPrices),
                  new SqlParameter ("CanUpdateItemSizes", UserPermission.CanUpdateItemSizes),
                  new SqlParameter ("CanUpdateItemsCompanies", UserPermission.CanUpdateItemsCompanies),
                  new SqlParameter ("CanUpdateItemsGovernorates", UserPermission.CanUpdateItemsGovernorates),
                  new SqlParameter ("CanUpdateItemsUsersTypes", UserPermission.CanUpdateItemsUsersTypes),
                  new SqlParameter ("CanUpdateOffersCompanies", UserPermission.CanUpdateOffersCompanies),
                  new SqlParameter ("CanUpdateOffersDetails", UserPermission.CanUpdateOffersDetails),
                  new SqlParameter ("CanUpdateOffersGovernorates", UserPermission.CanUpdateOffersGovernorates),
                  new SqlParameter ("CanUpdateOffersUsersTypes", UserPermission.CanUpdateOffersUsersTypes),
                  new SqlParameter ("CanUpdateOrderDetails", UserPermission.CanUpdateOrderDetails),
                  new SqlParameter ("CanUpdatePriceTypes", UserPermission.CanUpdatePriceTypes),
                  new SqlParameter ("CanUpdateSizes", UserPermission.CanUpdateSizes),
                  new SqlParameter ("CanUpdateSizesGroups", UserPermission.CanUpdateSizesGroups),

                                  new SqlParameter ("CanViewHome", UserPermission.CanViewHome),
                new SqlParameter ("CanViewItems", UserPermission.CanViewItems),
                new SqlParameter ("CanViewReports", UserPermission.CanViewReports),
                new SqlParameter ("CanViewTransfers", UserPermission.CanViewTransfers),
                new SqlParameter ("CanViewMainBalance", UserPermission.CanViewMainBalance),
                new SqlParameter ("CanViewIndexs", UserPermission.CanViewIndexs),
                new SqlParameter ("CanViewOffers", UserPermission.CanViewOffers),
                new SqlParameter ("CanViewOrders", UserPermission.CanViewOrders),
                new SqlParameter ("CanViewComplains", UserPermission.CanViewComplains),
                new SqlParameter ("CanViewMaintenance", UserPermission.CanViewMaintenance),
                new SqlParameter ("CanViewUsers", UserPermission.CanViewUsers),

               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserPermissionClass userPermission;
                        reader.Read();
                        userPermission = new UserPermissionClass().PopulateUserPermission(fieldNames, reader);


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userPermission;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserPermissionTemplate",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserColumns")]
        public ResultClass<List<UserTypeColumnsClass>> SetUserColumns(int LoggedUser,
           UserTypeColumnsClass UserTypeColumns)

        {
            ResultClass<List<UserTypeColumnsClass>> result = new ResultClass<List<UserTypeColumnsClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SetUserColumns";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    DataTable table;


                    using (table = new DataTable())
                    {
                        table.Columns.Add("TableName", typeof(string));
                        table.Columns.Add("UserType", typeof(string));
                        table.Columns.Add("MobileMode", typeof(string));
                        table.Columns.Add("ColumnName", typeof(string));
                        table.Columns.Add("ColumnOrder", typeof(string));
                        table.Columns.Add("ColumnWidth", typeof(string));
                        foreach (TableColumnsClass tbl in UserTypeColumns.Tables)
                        {
                            foreach (var mobileColumn in tbl.MobileColumns)
                            {
                                table.Rows.Add(tbl.TableName, UserTypeColumns.UserId, true, mobileColumn.Name, mobileColumn.Order, mobileColumn.Width);
                            }

                            foreach (var standardColumn in tbl.StandardColumns)
                            {
                                table.Rows.Add(tbl.TableName, UserTypeColumns.UserId, false, standardColumn.Name, standardColumn.Order, standardColumn.Width);
                            }
                        }
                    }

                    var pList = new SqlParameter("@List", SqlDbType.Structured);
                    pList.Value = table;

                    Params.Add(pList);
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        List<UserTypeColumnsClass> UserTypeColumnsList = new List<UserTypeColumnsClass>();
                        UserTypeColumnsClass userTypeColumns;
                        int order = 0;
                        while (reader.Read())
                        {
                            userTypeColumns = new UserTypeColumnsClass();

                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            userTypeColumns = new UserTypeColumnsClass().PopulateUserTypeColumns(fieldNames, reader);

                            userTypeColumns.Order = order;
                            UserTypeColumnsList.Add(userTypeColumns);
                        }

                        //Table
                        if (reader.NextResult())
                        {
                            List<TableColumnsClass> TableColumnsList = new List<TableColumnsClass>();
                            TableColumnsClass tableColumns = new TableColumnsClass();

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                tableColumns = new TableColumnsClass().PopulateTableColumns(fieldNames, reader);
                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserId.Equals(tableColumns.UserId));

                                if (userTypeCol != null)
                                    userTypeCol.Tables.Add(tableColumns);


                            }
                            TableColumnsList.Add(tableColumns);
                        }

                        //Mobile Columns
                        if (reader.NextResult())
                        {

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserId"))
                                    if (!Convert.IsDBNull(reader["UserId"]))
                                        userId = (int)reader["UserId"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserId.Equals(userId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.MobileColumns.Add(columnClass);
                                }
                            }
                        }


                        //Standard Columns
                        if (reader.NextResult())
                        {
                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserId"))
                                    if (!Convert.IsDBNull(reader["UserId"]))
                                        userId = (int)reader["UserId"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserId.Equals(userId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.StandardColumns.Add(columnClass);
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeColumnsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SetUserColumns", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserColumns")]
        public ResultClass<List<UserTypeColumnsClass>> GetUserColumns(int LoggedUser, int UserId)
        {
            ResultClass<List<UserTypeColumnsClass>> result = new ResultClass<List<UserTypeColumnsClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserColumns";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", UserId),
               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<UserTypeColumnsClass> UserTypeColumnsList = new List<UserTypeColumnsClass>();
                        UserTypeColumnsClass userTypeColumns;
                        int order = 0;
                        while (reader.Read())
                        {
                            userTypeColumns = new UserTypeColumnsClass();


                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            userTypeColumns = new UserTypeColumnsClass().PopulateUserTypeColumns(fieldNames, reader);

                            userTypeColumns.Order = order;
                            UserTypeColumnsList.Add(userTypeColumns);
                        }

                        //Table
                        if (reader.NextResult())
                        {
                            List<TableColumnsClass> TableColumnsList = new List<TableColumnsClass>();
                            TableColumnsClass tableColumns = new TableColumnsClass();

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                tableColumns = new TableColumnsClass().PopulateTableColumns(fieldNames, reader);
                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserId.Equals(tableColumns.UserId));

                                if (userTypeCol != null)
                                    userTypeCol.Tables.Add(tableColumns);


                            }
                            TableColumnsList.Add(tableColumns);
                        }

                        //Mobile Columns
                        if (reader.NextResult())
                        {

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserId"))
                                    if (!Convert.IsDBNull(reader["UserId"]))
                                        userId = (int)reader["UserId"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserId.Equals(userId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.MobileColumns.Add(columnClass);
                                }
                            }
                        }


                        //Standard Columns
                        if (reader.NextResult())
                        {
                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserId"))
                                    if (!Convert.IsDBNull(reader["UserId"]))
                                        userId = (int)reader["UserId"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserId.Equals(userId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.StandardColumns.Add(columnClass);
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeColumnsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserColumns", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserColumnsTemplate")]
        public ResultClass<List<UserTypeColumnsClass>> UpdateUserColumnsTemplate(int LoggedUser,
           List<UserTypeColumnsClass> UserTypeColumns)
        {
            ResultClass<List<UserTypeColumnsClass>> result = new ResultClass<List<UserTypeColumnsClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserColumnsTemplate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    DataTable table;


                    using (table = new DataTable())
                    {
                        table.Columns.Add("TableName", typeof(string));
                        table.Columns.Add("UserType", typeof(string));
                        table.Columns.Add("MobileMode", typeof(string));
                        table.Columns.Add("ColumnName", typeof(string));
                        table.Columns.Add("ColumnOrder", typeof(string));
                        table.Columns.Add("ColumnWidth", typeof(string));
                        foreach (UserTypeColumnsClass userType in UserTypeColumns)
                        {
                            foreach (TableColumnsClass tbl in userType.Tables)
                            {
                                foreach (var mobileColumn in tbl.MobileColumns)
                                {
                                    table.Rows.Add(tbl.TableName, userType.UserTypeId, true, mobileColumn.Name, mobileColumn.Order, mobileColumn.Width);
                                }

                                foreach (var standardColumn in tbl.StandardColumns)
                                {
                                    table.Rows.Add(tbl.TableName, userType.UserTypeId, false, standardColumn.Name, standardColumn.Order, standardColumn.Width);
                                }
                            }
                        }
                    }

                    var pList = new SqlParameter("@List", SqlDbType.Structured);
                    pList.Value = table;

                    Params.Add(pList);
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        List<UserTypeColumnsClass> UserTypeColumnsList = new List<UserTypeColumnsClass>();
                        UserTypeColumnsClass userTypeColumns;
                        int order = 0;
                        while (reader.Read())
                        {
                            userTypeColumns = new UserTypeColumnsClass();

                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            userTypeColumns = new UserTypeColumnsClass().PopulateUserTypeColumns(fieldNames, reader);

                            userTypeColumns.Order = order;
                            UserTypeColumnsList.Add(userTypeColumns);
                        }

                        //Table
                        if (reader.NextResult())
                        {
                            List<TableColumnsClass> TableColumnsList = new List<TableColumnsClass>();
                            TableColumnsClass tableColumns = new TableColumnsClass();

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                tableColumns = new TableColumnsClass().PopulateTableColumns(fieldNames, reader);
                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(tableColumns.UserTypeId));

                                if (userTypeCol != null)
                                    userTypeCol.Tables.Add(tableColumns);


                            }
                            TableColumnsList.Add(tableColumns);
                        }

                        //Mobile Columns
                        if (reader.NextResult())
                        {

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userTypeId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserTypeID"))
                                    if (!Convert.IsDBNull(reader["UserTypeID"]))
                                        userTypeId = (int)reader["UserTypeID"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(userTypeId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.MobileColumns.Add(columnClass);
                                }
                            }
                        }


                        //Standard Columns
                        if (reader.NextResult())
                        {
                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userTypeId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserTypeID"))
                                    if (!Convert.IsDBNull(reader["UserTypeID"]))
                                        userTypeId = (int)reader["UserTypeID"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(userTypeId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.StandardColumns.Add(columnClass);
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeColumnsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserColumnsTemplate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserColumnsTemplate")]
        public ResultClass<List<UserTypeColumnsClass>> GetUserColumnsTemplates(int LoggedUser)
        {
            ResultClass<List<UserTypeColumnsClass>> result = new ResultClass<List<UserTypeColumnsClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserColumnsTemplates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<UserTypeColumnsClass> UserTypeColumnsList = new List<UserTypeColumnsClass>();
                        UserTypeColumnsClass userTypeColumns;
                        int order = 0;
                        while (reader.Read())
                        {
                            userTypeColumns = new UserTypeColumnsClass();

                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            userTypeColumns = new UserTypeColumnsClass().PopulateUserTypeColumns(fieldNames, reader);

                            userTypeColumns.Order = order;
                            UserTypeColumnsList.Add(userTypeColumns);
                        }

                        //Table
                        if (reader.NextResult())
                        {
                            List<TableColumnsClass> TableColumnsList = new List<TableColumnsClass>();
                            TableColumnsClass tableColumns = new TableColumnsClass();

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                tableColumns = new TableColumnsClass().PopulateTableColumns(fieldNames, reader);
                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(tableColumns.UserTypeId));

                                if (userTypeCol != null)
                                    userTypeCol.Tables.Add(tableColumns);
                            }
                            TableColumnsList.Add(tableColumns);
                        }

                        //Mobile Columns
                        if (reader.NextResult())
                        {

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userTypeId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserTypeID"))
                                    if (!Convert.IsDBNull(reader["UserTypeID"]))
                                        userTypeId = (int)reader["UserTypeID"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(userTypeId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.MobileColumns.Add(columnClass);
                                }
                            }
                        }

                        //Standard Columns
                        if (reader.NextResult())
                        {
                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userTypeId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserTypeID"))
                                    if (!Convert.IsDBNull(reader["UserTypeID"]))
                                        userTypeId = (int)reader["UserTypeID"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(userTypeId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.StandardColumns.Add(columnClass);
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeColumnsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserColumnsTemplate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserColumnsTemplate")]
        public ResultClass<List<UserTypeColumnsClass>> GetUserColumnsTemplate(int LoggedUser, int UserType)
        {
            ResultClass<List<UserTypeColumnsClass>> result = new ResultClass<List<UserTypeColumnsClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserColumnsTemplates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserType", UserType),
               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<UserTypeColumnsClass> UserTypeColumnsList = new List<UserTypeColumnsClass>();
                        UserTypeColumnsClass userTypeColumns;
                        int order = 0;
                        while (reader.Read())
                        {
                            userTypeColumns = new UserTypeColumnsClass();

                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            userTypeColumns = new UserTypeColumnsClass().PopulateUserTypeColumns(fieldNames, reader);

                            userTypeColumns.Order = order;
                            UserTypeColumnsList.Add(userTypeColumns);
                        }

                        //Table
                        if (reader.NextResult())
                        {
                            List<TableColumnsClass> TableColumnsList = new List<TableColumnsClass>();
                            TableColumnsClass tableColumns = new TableColumnsClass();

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                tableColumns = new TableColumnsClass().PopulateTableColumns(fieldNames, reader);
                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(tableColumns.UserTypeId));

                                if (userTypeCol != null)
                                    userTypeCol.Tables.Add(tableColumns);


                            }
                            TableColumnsList.Add(tableColumns);
                        }

                        //Mobile Columns
                        if (reader.NextResult())
                        {

                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userTypeId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserTypeID"))
                                    if (!Convert.IsDBNull(reader["UserTypeID"]))
                                        userTypeId = (int)reader["UserTypeID"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(userTypeId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.MobileColumns.Add(columnClass);
                                }
                            }
                        }


                        //Standard Columns
                        if (reader.NextResult())
                        {
                            order = 0;
                            while (reader.Read())
                            {
                                order += 1;
                                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i))
                                   .ToArray();
                                int userTypeId = 0;
                                string tableName = "";
                                ColumnClass columnClass = new ColumnClass().PopulateColumn(fieldNames, reader);

                                if (fieldNames.Contains("UserTypeID"))
                                    if (!Convert.IsDBNull(reader["UserTypeID"]))
                                        userTypeId = (int)reader["UserTypeID"];

                                if (fieldNames.Contains("TableName"))
                                    if (!Convert.IsDBNull(reader["TableName"]))
                                        tableName = reader["TableName"].ToString();

                                var userTypeCol = UserTypeColumnsList.Find(X => X.UserTypeId.Equals(userTypeId));
                                if (userTypeCol != null)
                                {
                                    var Tbl = userTypeCol.Tables.Find(T => T.TableName.Equals(tableName));
                                    if (Tbl != null)
                                        Tbl.StandardColumns.Add(columnClass);
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeColumnsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserColumnsTemplate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        //User Profile Columns
        [SwaggerWcfTag("User ProfileColumns")]
        public ResultClass<List<UserProfileColumnClass>> GetUserProfileColumns()
        {
            ResultClass<List<UserProfileColumnClass>> result = new ResultClass<List<UserProfileColumnClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserProfileColumns";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserProfileColumnClass> UserProfileColumns = new List<UserProfileColumnClass>();
                        UserProfileColumnClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserProfileColumnClass().PopulateUserProfileColumn(fieldNames, reader);

                            id.Order = order;
                            UserProfileColumns.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserProfileColumns;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserProfileColumns", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("User ProfileColumns")]
        public ResultClass<List<UserProfileColumnClass>> UpdateUserProfileColumns(int LoggedUser, List<string> Columns)
        {
            ResultClass<List<UserProfileColumnClass>> result = new ResultClass<List<UserProfileColumnClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserProfileColumns";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                       new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    //Columns
                    if (Columns != null)
                    {
                        DataTable columnstbl;
                        using (columnstbl = new DataTable())
                        {
                            columnstbl.Columns.Add("Id", typeof(string));
                            foreach (string x in Columns)
                                columnstbl.Rows.Add(x);
                        }
                        var columnsList = new SqlParameter("@Columns", SqlDbType.Structured);
                        columnsList.Value = columnstbl;
                        Params.Add(columnsList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserProfileColumnClass> UserProfileColumns = new List<UserProfileColumnClass>();
                        UserProfileColumnClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserProfileColumnClass().PopulateUserProfileColumn(fieldNames, reader);

                            id.Order = order;
                            UserProfileColumns.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserProfileColumns;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserProfileColumns", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("User ProfileColumns")]
        public ResultClass<List<UserProfileColumnClass>> DeleteUserProfileColumns(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<UserProfileColumnClass>> result = new ResultClass<List<UserProfileColumnClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserProfileColumns";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                       new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    //Columns
                    if (Ids != null)
                    {
                        DataTable idstbl;
                        using (idstbl = new DataTable())
                        {
                            idstbl.Columns.Add("Item", typeof(int));
                            foreach (int x in Ids)
                                idstbl.Rows.Add(x);
                        }
                        var idsList = new SqlParameter("@Ids", SqlDbType.Structured);
                        idsList.Value = idstbl;
                        Params.Add(idsList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserProfileColumnClass> UserProfileColumns = new List<UserProfileColumnClass>();
                        UserProfileColumnClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserProfileColumnClass().PopulateUserProfileColumn(fieldNames, reader);

                            id.Order = order;
                            UserProfileColumns.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserProfileColumns;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserProfileColumns", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Get User Class Columns
        [SwaggerWcfTag("User ProfileColumns")]
        public ResultClass<List<ResourceClass>> GetUserCustomColumnsNames()
        {
            ResultClass<List<ResourceClass>> result = new ResultClass<List<ResourceClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserCustomColumnsNames";
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ResourceClass> Statues = new List<ResourceClass>();
                        ResourceClass status;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            status = new ResourceClass().PopulateResource(fieldNames, reader);

                            status.Order = order;

                            Statues.Add(status);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Statues;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetUserCustomColumnsNames", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        //Notifications
        [SwaggerWcfTag("Notifications")]
        public ResultClass<UserNotificationsBadgesClass> GetUserNotificationsBadges(int LoggedUser)
        {
            ResultClass<UserNotificationsBadgesClass> result = new ResultClass<UserNotificationsBadgesClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserNotificationsBadges";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        UserNotificationsBadgesClass UserNotificationsBadges = new UserNotificationsBadgesClass().PopulateUserNotificationsBadges(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Result = UserNotificationsBadges;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserNotificationsBadges",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Notifications
        [SwaggerWcfTag("Notifications")]
        public ResultClass<List<NotificationClass>> CreateUsersNotification(int LoggedUser, List<int> UsersIds, string Content, string Title, string ImageURL, string ReferenceId, string ReferenceType)
        {
            ResultClass<List<NotificationClass>> result = new ResultClass<List<NotificationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserNotifications";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Content", Content),
                  new SqlParameter("Title", Title),
                  new SqlParameter("ImageURL", ImageURL),
                  new SqlParameter("ReferenceId", ReferenceId),
                  new SqlParameter("ReferenceType", ReferenceType),

               };

                    //UsersIds
                    if (UsersIds != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Item", typeof(string));
                            foreach (int x in UsersIds)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UsersIds", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    List<NotificationClass> notifications = new List<NotificationClass>();
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        NotificationClass notification;
                        int order = 0;
                        while (reader.Read())
                        {
                            order = order + 1;
                            notification = new NotificationClass().PopulateNotification(fieldNames, reader);
                            notification.Order = order;
                            notifications.Add(notification);
                        }
                        

                        result.Code = Errors.Success;
                        result.Result = notifications;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUsersNotification",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<bool> SetUserNotificationsSeen(int LoggedUser, int Type)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SetNotificationsSeen";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Type", Type),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    cmd.ExecuteReader();


                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SetUserNotificationsSeen",
                       e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<List<NotificationTypesClass>> GetNotificationsTypes(int LoggedUser)
        {
            ResultClass<List<NotificationTypesClass>> result = new ResultClass<List<NotificationTypesClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetNotificationsTypes";
                    SqlParameter Param = new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<NotificationTypesClass> typesList = new List<NotificationTypesClass>();
                        NotificationTypesClass notificationType;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            notificationType = new NotificationTypesClass().PopulateNotificationType(fieldNames, reader);

                            notificationType.Order = order;
                            typesList.Add(notificationType);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = typesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetNotificationsTypes", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<List<NotificationClass>> GetUserNotification(UserNotificationClass userNotfication)
        {
            ResultClass<List<NotificationClass>> result = new ResultClass<List<NotificationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserNotifications";

                    //Yazan 03-08-2017 BEGIN
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", userNotfication.LoggedUser),
               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    if (userNotfication.Type > 0)
                        cmd.Parameters.Add(new SqlParameter("Type", userNotfication.Type));

                    //if ((userNotfication.FromDate != "") && (userNotfication.ToDate != ""))
                    {
                        cmd.Parameters.Add(new SqlParameter("FromDate", userNotfication.FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", userNotfication.ToDate));
                    }
                    if (userNotfication.Content != "")
                        cmd.Parameters.Add(new SqlParameter("Content", userNotfication.Content));

                    if (userNotfication.Title != "")
                        cmd.Parameters.Add(new SqlParameter("Title", userNotfication.Title));

                    //Yazan 03-08-2017 END
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        List<NotificationClass> notificationsList = new List<NotificationClass>();
                        NotificationClass notification;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            notification = new NotificationClass().PopulateNotification(fieldNames, reader);
                            notification.Order = order;
                            notificationsList.Add(notification);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = notificationsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(userNotfication.LoggedUser, e.Message, e.StackTrace, "1.0.3", "API",
                       "GetUserNotifications", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<List<NotificationClass>> GetUserNotifications(int LoggedUser, int Type)
        {
            ResultClass<List<NotificationClass>> result = new ResultClass<List<NotificationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserNotifications";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Type", Type)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        List<NotificationClass> notificationsList = new List<NotificationClass>();
                        NotificationClass notification;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            order += 1;
                            notification = new NotificationClass().PopulateNotification(fieldNames, reader);
                            notification.Order = order;
                            notificationsList.Add(notification);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = notificationsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserNotifications", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<List<NotificationClass>> FetchUserNotifications(int LoggedUser, int PageId = 1, int RecordsCount = 99999999)
        {
            ResultClass<List<NotificationClass>> result = new ResultClass<List<NotificationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_FetchUserNotifications";

                    //Yazan 03-08-2017 BEGIN
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    if (PageId > 0)
                        cmd.Parameters.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));

                    cmd.Parameters.AddRange(Params.ToArray());


                    //Yazan 03-08-2017 END
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        List<NotificationClass> notificationsList = new List<NotificationClass>();
                        NotificationClass notification;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            notification = new NotificationClass().PopulateNotification(fieldNames, reader);

                            notification.Order = order + (RecordsCount * (PageId - 1));

                            notificationsList.Add(notification);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = notificationsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "FetchUserNotifications", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<NotificationClass> UpdateNotification(int Id, int Fail)
        {
            ResultClass<NotificationClass> result = new ResultClass<NotificationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateNotification";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("Fail", Fail)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        NotificationClass notification;
                        reader.Read();
                        notification = new NotificationClass().PopulateNotification(fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = notification;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateNotification", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Notifications")]
        public ResultClass<bool> SendFCMMsgs(int LoggedUser, List<int> UsersId, string Title, string Content, string ImageURL, string ReferenceType, string ReferenceId)
        {
            //Insert Notification
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                int totalCount = UsersId.Count;
                bool keepLooping = true;
                int requestBegin = 0;
                int requestCount = 1000;

                CreateUsersNotification(LoggedUser, UsersId, Content, Title, ImageURL, ReferenceId, ReferenceType);

                while (keepLooping)
                {
                    int x = 0;
                    string Users = "";

                    for (int i = requestBegin; i < UsersId.Count; i++)
                    {
                        Users = Users + UsersId[i].ToString() + ",";
                        x = x + 1;
                        if (x == requestCount)
                            break;
                    }
                    requestBegin = requestBegin + x + 1;
                    x = 0;

                    if (Users.EndsWith(","))
                        Users = Users.Substring(0, Users.Length - 1);


                    WebRequest request = WebRequest.Create(Config.NotificationsAPIURL);
                    request.Method = "POST";
                    request.ContentType = "application/json; charset=UTF-8";
                    var postData = "{\"Receivers\":[" + Users + "],\"NotificationTitle\":\"" + Title + "\",\"NotificationContent\":\"" + Content + "\",\"NotificationType\":\"1000\",\"Platform\":\"\",\"SourceId\":\"123\",\"ImageURL\":\"" + ImageURL + "\",\"ReferenceType\":\""+ReferenceType+ "\",\"ReferenceId\":\""+ReferenceId+"\"}";
                    var data = Encoding.UTF8.GetBytes(postData);
                    request.ContentLength = data.Length;
                    var stream = request.GetRequestStream();
                    stream.Write(data, 0, data.Length);
                    WebResponse response = request.GetResponse();
                    StreamReader Reader = new StreamReader(response.GetResponseStream());
                    string onesignal_responseLine = Reader.ReadToEnd();
                    if (requestBegin > UsersId.Count)
                        keepLooping = false;
                }
                result.Code = Errors.Success;
                result.Message = "";
                result.Result = true;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SendFCMMsgs", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications")]
        public ResultClass<bool> CheckOrderNotificationStatus(int LoggedUser, int Type, int NotificationId)
        {
            //Insert Notification
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CheckOrdersNotifications";

                    List<SqlParameter> Params = new List<SqlParameter>()
                   {
                      new SqlParameter("LoggedUser", LoggedUser),
                      new SqlParameter("Type", Type),
                      new SqlParameter("NotificationId", NotificationId),
                   };


                    cmd.Parameters.AddRange(Params.ToArray());
                    bool NotificationStatus = false;
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        if (fieldNames.Contains("AutomaticallyProccessed"))
                            if (!Convert.IsDBNull(reader["AutomaticallyProccessed"]))
                                NotificationStatus = (bool)reader["AutomaticallyProccessed"];

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = NotificationStatus;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = false;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SendFCMMsgs", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        //NotificationsUsers
        [SwaggerWcfTag("Notifications Users")]
        public ResultClass<List<UserClass>> GetNotificationsUsers(int LoggedUser, int Id)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetNotificationsUsers";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<UserClass> Users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);

                            user.Order = order;
                            Users.Add(user);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Users;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetNotificationsUsers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications Users")]
        public ResultClass<List<UserClass>> CreateNotificationsUsers(int LoggedUser, int NotificationsTypeId,
           List<int> UsersId)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertNotificationsUsers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("NotificationsTypeId", NotificationsTypeId)
               };


                    //UsersId
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in UsersId)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@UsersId", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);



                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> users = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order;

                            users.Add(user);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = users;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateNotificationsUsers",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Notifications Users")]
        public ResultClass<List<UserClass>> DeleteNotificationsUsers(int LoggedUser, int NotificationsTypeId,
           List<int> UsersId)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteNotificationsUsers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("NotificationsTypeId", NotificationsTypeId)
               };
                    //UsersId
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in UsersId)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@UsersId", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserClass> usersList = new List<UserClass>();
                        UserClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserClass().PopulateUser(fieldNames, reader);
                            user.Order = order;

                            usersList.Add(user);

                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usersList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteNotificationsUsers",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        //SubmitDeviceRegisterationId
        [SwaggerWcfTag("Device Configuration")]
        public ResultClass<bool> SubmitDeviceRegisterationId(DeviceNotificationToken Token)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "App_SubmitDeviceRegisterationId";
                    List<SqlParameter> Params = new List<SqlParameter>();

                    Params.Add(new SqlParameter("UserId", Token.UserId));
                    Params.Add(new SqlParameter("DeviceRegistrationId", Token.DeviceRegistrationId));
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "SubmitDeviceRegistrationId", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Device Configuration")]
        public ResultClass<FCMRegistrationClass> SubmitFCMRegistrationId(FCMRegistrationClass FCMRegistration)
        {
            ResultClass<FCMRegistrationClass> result = new ResultClass<FCMRegistrationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SubmitUserFCMRegistrationId";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("UserId", FCMRegistration.UserId),
                  new SqlParameter("RegistrationId", FCMRegistration.RegistrationId),
                  new SqlParameter("Platform", FCMRegistration.Platform),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        FCMRegistrationClass fcmRegistrationClass = new FCMRegistrationClass();

                        if (!Convert.IsDBNull(rd["UserId"]))
                            fcmRegistrationClass.UserId = (int)rd["UserId"];
                        if (!Convert.IsDBNull(rd["RegistrationId"]))
                            fcmRegistrationClass.RegistrationId = rd["RegistrationId"].ToString();
                        if (!Convert.IsDBNull(rd["Platform"]))
                            fcmRegistrationClass.Platform = rd["Platform"].ToString();

                        result.Code = Errors.Success;
                        result.Result = fcmRegistrationClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "SubmitFCMRegistrationId", "", "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Device Configuration")]
        public ResultClass<string> ClearFCMRegistrationId(int LoggedUser, string RegistrationId)
        {
            ResultClass<string> result = new ResultClass<string>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ClearFCMRegistrationId";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("RegistrationId", RegistrationId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, rd.FieldCount).Select(i => rd.GetName(i)).ToArray();
                        var dbResult = String.Empty;
                        rd.Read();
                        if (fieldNames.Contains("RESULT"))
                            if (!Convert.IsDBNull(rd["RESULT"]))
                                dbResult = rd["RESULT"].ToString();

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = dbResult;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "ClearFCMRegistrationId", "", "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<bool> ClearFCMRegistrationIdByUserId(int LoggedUser)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ClearFCMRegistrationIdByUserId";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, rd.FieldCount).Select(i => rd.GetName(i)).ToArray();
                        var dbResult = false;
                        rd.Read();
                        if (fieldNames.Contains("RESULT"))
                            if (!Convert.IsDBNull(rd["RESULT"]))
                                dbResult = Convert.ToBoolean(rd["RESULT"].ToString().ToLower());

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = dbResult;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = false;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "ClearFCMRegistrationIdByUserId", "", "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public string SendFCMMsg(NotificationClass notification)
        {
            return FCMClass.SendNotification(notification);
        }

        [SwaggerWcfTag("Device Configuration")]
        public ResultClass<bool> SubmitDeviceLog(DeviceLogClass DeviceLog)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SubmitDeviceLog";

                    if (DeviceLog.UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", DeviceLog.UserId));
                    if (!string.IsNullOrWhiteSpace(DeviceLog.UUID))
                        cmd.Parameters.Add(new SqlParameter("UUID", DeviceLog.UUID));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Model))
                        cmd.Parameters.Add(new SqlParameter("Model", DeviceLog.Model));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Version))
                        cmd.Parameters.Add(new SqlParameter("Version", DeviceLog.Version));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Platform))
                        cmd.Parameters.Add(new SqlParameter("Platform", DeviceLog.Platform));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Manufacture))
                        cmd.Parameters.Add(new SqlParameter("Manufacture", DeviceLog.Manufacture));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.MobileNo))
                        cmd.Parameters.Add(new SqlParameter("MobileNo", DeviceLog.MobileNo));

                    SqlDataReader rd = cmd.ExecuteReader();

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "SubmitDeviceLog", "", "");
                }
                result.Result = false;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<bool> SubmitDeviceLogin(DeviceLogClass DeviceLog)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SubmitDeviceLogin";

                    if (DeviceLog.UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", DeviceLog.UserId));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.UUID))
                        cmd.Parameters.Add(new SqlParameter("UUID", DeviceLog.UUID));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Model))
                        cmd.Parameters.Add(new SqlParameter("Model", DeviceLog.Model));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Version))
                        cmd.Parameters.Add(new SqlParameter("Version", DeviceLog.Version));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Platform))
                        cmd.Parameters.Add(new SqlParameter("Platform", DeviceLog.Platform));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.Manufacture))
                        cmd.Parameters.Add(new SqlParameter("Manufacture", DeviceLog.Manufacture));
                    if (!String.IsNullOrWhiteSpace(DeviceLog.MobileNo))
                        cmd.Parameters.Add(new SqlParameter("MobileNo", DeviceLog.MobileNo));

                    SqlDataReader rd = cmd.ExecuteReader();

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "SubmitDeviceLog", "", "");
                }
                result.Result = false;
                return result;
            }
        }



        //Branches
        [SwaggerWcfTag("Branches")]
        public ResultClass<List<BrancheClass>> GetBranches(int CountryId, int Id, bool FilterByActive, bool ShowActive)
        {
            ResultClass<List<BrancheClass>> result = new ResultClass<List<BrancheClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBranches";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("Id",Id),

                     new SqlParameter("FilterByActive",FilterByActive),
                     new SqlParameter("ShowActive",ShowActive)
                  };

                    if (CountryId > 0)
                    {
                        Params.Add(new SqlParameter("CountryId", CountryId));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BrancheClass> Branches = new List<BrancheClass>();
                        BrancheClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BrancheClass().PopulateBranche(fieldNames, reader);

                            id.Order = order;
                            Branches.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Branches;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBranches", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Branches")]
        public ResultClass<BrancheClass> CreateBranche(int LoggedUser, BrancheClass Branche)
        {
            ResultClass<BrancheClass> result = new ResultClass<BrancheClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertBranche";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("ArabicName",Branche.ArabicName),
                     new SqlParameter("EnglishName",Branche.EnglishName),

                     new SqlParameter("CountryId",Branche.CountryId),
                     new SqlParameter("GovernorateId",Branche.GovernorateId),
                     new SqlParameter("CityId",Branche.CityId),
                     new SqlParameter("LocationId",Branche.LocationId),
                     new SqlParameter("Address",Branche.Address),

                     new SqlParameter("BrandId",Branche.BrandId),
                     new SqlParameter("IsActive",Branche.IsActive),

                     new SqlParameter("Phone",Branche.Phone),
                     new SqlParameter("Phone2",Branche.Phone2),
                     new SqlParameter("Email",Branche.Email),
                     new SqlParameter("Longitude",Branche.Longitude),
                     new SqlParameter("Latitude",Branche.Latitude),
                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrancheClass branche;
                        reader.Read();
                        branche = new BrancheClass().PopulateBranche(fieldNames, reader);

                        branche.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = branche;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateBranche", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Branches")]
        public ResultClass<BrancheClass> UpdateBranche(int LoggedUser, BrancheClass Branche)
        {
            ResultClass<BrancheClass> result = new ResultClass<BrancheClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateBranche";

                    List<SqlParameter> Params = new List<SqlParameter>()
                 {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("Id",Branche.Id),
                     new SqlParameter("ArabicName",Branche.ArabicName),
                     new SqlParameter("EnglishName",Branche.EnglishName),

                     new SqlParameter("CountryId",Branche.CountryId),
                     new SqlParameter("GovernorateId",Branche.GovernorateId),
                     new SqlParameter("CityId",Branche.CityId),
                     new SqlParameter("LocationId",Branche.LocationId),
                     new SqlParameter("Address",Branche.Address),

                     new SqlParameter("BrandId",Branche.BrandId),
                     new SqlParameter("IsActive",Branche.IsActive),
                     new SqlParameter("Phone",Branche.Phone),
                     new SqlParameter("Phone2",Branche.Phone2),
                     new SqlParameter("Email",Branche.Email),
                     new SqlParameter("Longitude",Branche.Longitude),
                     new SqlParameter("Latitude",Branche.Latitude),
                 };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrancheClass branche;
                        reader.Read();
                        branche = new BrancheClass().PopulateBranche(fieldNames, reader);

                        branche.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = branche;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateBranche", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Branches")]
        public ResultClass<BrancheClass> DeleteBranche(int LoggedUser, int Id)
        {
            ResultClass<BrancheClass> result = new ResultClass<BrancheClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteBranche";

                    List<SqlParameter> Params = new List<SqlParameter>()
                 {
                  new SqlParameter("Id",Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrancheClass branche;
                        reader.Read();
                        branche = new BrancheClass().PopulateBranche(fieldNames, reader);


                        branche.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = branche;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteBranche", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        //Cities
        [SwaggerWcfTag("Cities")]
        public ResultClass<List<CityClass>> GetCities(int GovernorateId)
        {
            ResultClass<List<CityClass>> result = new ResultClass<List<CityClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCities";
                    cmd.Parameters.Add(new SqlParameter("GovernorateId", GovernorateId));
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<CityClass> Cities = new List<CityClass>();
                        CityClass city;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            order += 1;
                            city = new CityClass().PopulateCity(fieldNames, reader);
                            city.Order = order;
                            Cities.Add(city);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Cities;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetCities", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Cities")]
        public ResultClass<List<CityClass>> GetGovernorateCities(int GovernorateId)
        {
            ResultClass<List<CityClass>> result = new ResultClass<List<CityClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCities";
                    cmd.Parameters.Add(new SqlParameter("GovernorateId", GovernorateId));
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<CityClass> Cities = new List<CityClass>();
                        CityClass city;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            order += 1;
                            city = new CityClass().PopulateCity(fieldNames, reader);
                            city.Order = order;
                            Cities.Add(city);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Cities;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernorateCities", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Locations")]
        public ResultClass<List<LocationClass>> GetGovernorateLocations(int GovernorateId)
        {
            ResultClass<List<LocationClass>> result = new ResultClass<List<LocationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetLocations";
                    cmd.Parameters.Add(new SqlParameter("GovernorateId", GovernorateId));
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<LocationClass> locations = new List<LocationClass>();
                        LocationClass location;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            order += 1;
                            location = new LocationClass().PopulateLocation(fieldNames, reader);
                            location.Order = order;
                            locations.Add(location);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = locations;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernorateLocations", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Cities")]
        public ResultClass<List<CityClass>> GetCitiesNew(List<int> GovernorateIds)
        {
            ResultClass<List<CityClass>> result = new ResultClass<List<CityClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCitiesNew";

                    //GovernorateIds
                    if (GovernorateIds.Count > 0)
                    {
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernorateIds)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernorateIds", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        cmd.Parameters.Add(pList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<CityClass> Cities = new List<CityClass>();
                        CityClass city;
                        int order = 0;
                        while (reader.Read())
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            order += 1;
                            city = new CityClass().PopulateCity(fieldNames, reader);
                            city.Order = order;
                            Cities.Add(city);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Cities;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetCitiesNew", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<CityClass> GetCity(int CityId)
        {
            ResultClass<CityClass> result = new ResultClass<CityClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCities";
                    SqlParameter Param = new SqlParameter("CityId", CityId);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        CityClass city;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        city = new CityClass().PopulateCity(fieldNames, reader);
                        city.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = city;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetCity", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Cities")]
        public ResultClass<CityClass> CreateCity(int LoggedUser, CityClass City)
        {
            ResultClass<CityClass> result = new ResultClass<CityClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCity";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("GovernorateId", City.GovernorateId),
                  new SqlParameter("ArabicName", City.ArabicName),
                  new SqlParameter("EnglishName", City.EnglishName)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        CityClass city;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        city = new CityClass().PopulateCity(fieldNames, reader);
                        city.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = city;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCity", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Cities")]
        public ResultClass<CityClass> UpdateCity(int LoggedUser, CityClass City)
        {
            ResultClass<CityClass> result = new ResultClass<CityClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCity";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", City.Id),
                  new SqlParameter("GovernorateId", City.GovernorateId),
                  new SqlParameter("ArabicName", City.ArabicName),
                  new SqlParameter("EnglishName", City.EnglishName)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        CityClass city;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        city = new CityClass().PopulateCity(fieldNames, reader);
                        city.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = city;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCity", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Cities")]
        public ResultClass<CityClass> DeleteCity(int LoggedUser, int City)
        {
            ResultClass<CityClass> result = new ResultClass<CityClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCity";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", City)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        CityClass city;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        city = new CityClass().PopulateCity(fieldNames, reader);
                        city.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = city;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteCity", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //Governorates
        [SwaggerWcfTag("Governorates")]
        public ResultClass<List<GovernorateClass>> GetGovernorates(int? CountryId)
        {
            ResultClass<List<GovernorateClass>> result = new ResultClass<List<GovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetGovernorates";
                    if (CountryId != null && CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<GovernorateClass> Governorates = new List<GovernorateClass>();
                        GovernorateClass governorate;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            governorate = new GovernorateClass().PopulateGovernorate(fieldNames, reader);

                            governorate.Order = order;

                            Governorates.Add(governorate);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Governorates;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernorates", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Governorates")]
        public ResultClass<List<GovernorateClass>> GetGovernoratesNew(List<int> CountryIds)
        {
            ResultClass<List<GovernorateClass>> result = new ResultClass<List<GovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetGovernoratesNew";

                    //CountryIds
                    if (CountryIds.Count > 0)
                    {
                        DataTable countryTable;
                        using (countryTable = new DataTable())
                        {
                            countryTable.Columns.Add("Id", typeof(string));
                            foreach (int x in CountryIds)
                                countryTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CountryIds", SqlDbType.Structured);
                        pList.Value = countryTable;
                        cmd.Parameters.Add(pList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<GovernorateClass> Governorates = new List<GovernorateClass>();
                        GovernorateClass governorate;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            governorate = new GovernorateClass().PopulateGovernorate(fieldNames, reader);

                            governorate.Order = order;

                            Governorates.Add(governorate);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Governorates;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernoratesNew", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<GovernorateClass> GetGovernorate(int? CountryId, int GovernorateId)
        {
            ResultClass<GovernorateClass> result = new ResultClass<GovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetGovernorates";
                    if (CountryId != null && CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));

                    cmd.Parameters.Add(new SqlParameter("GovernorateId", GovernorateId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        GovernorateClass governorate;
                        reader.Read();
                        governorate = new GovernorateClass().PopulateGovernorate(fieldNames, reader);


                        governorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = governorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernorate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Governorates")]
        public ResultClass<GovernorateClass> CreateGovernorate(int LoggedUser, GovernorateClass Governorate)
        {
            ResultClass<GovernorateClass> result = new ResultClass<GovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ArabicName", Governorate.ArabicName),
                  new SqlParameter("EnglishName", Governorate.EnglishName)
               };

                    if (Governorate.CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", Governorate.CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        GovernorateClass governorate;
                        reader.Read();
                        governorate = new GovernorateClass().PopulateGovernorate(fieldNames, reader);

                        governorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = governorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateGovernorate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Governorates")]
        public ResultClass<GovernorateClass> UpdateGovernorate(int LoggedUser, GovernorateClass Governorate)
        {
            ResultClass<GovernorateClass> result = new ResultClass<GovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Governorate.Id),
                  new SqlParameter("ArabicName", Governorate.ArabicName),
                  new SqlParameter("EnglishName", Governorate.EnglishName)
               };

                    if (Governorate.CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", Governorate.CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        GovernorateClass governorate;
                        reader.Read();
                        governorate = new GovernorateClass().PopulateGovernorate(fieldNames, reader);

                        governorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = governorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateGovernorate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Governorates")]
        public ResultClass<GovernorateClass> DeleteGovernorate(int LoggedUser, int Governorate)
        {
            ResultClass<GovernorateClass> result = new ResultClass<GovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Governorate)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        GovernorateClass governorate;
                        reader.Read();
                        governorate = new GovernorateClass().PopulateGovernorate(fieldNames, reader);

                        governorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = governorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteGovernorate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        //Locations
        [SwaggerWcfTag("Locations")]
        public ResultClass<List<LocationClass>> GetLocations(int GovernorateId, int CityId)
        {
            ResultClass<List<LocationClass>> result = new ResultClass<List<LocationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetLocations";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CityId", CityId),
                  new SqlParameter("GovernorateId", GovernorateId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<LocationClass> Locations = new List<LocationClass>();
                        LocationClass location;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            location = new LocationClass().PopulateLocation(fieldNames, reader);
                            location.Order = order;
                            Locations.Add(location);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Locations;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetLocations", e.Source, "");
                }
                result.Result = null;
                return result;

            }
        }

        [SwaggerWcfTag("Locations")]
        public ResultClass<List<LocationClass>> GetLocationsNew(List<int> GovernorateIds, List<int> CityIds)
        {
            ResultClass<List<LocationClass>> result = new ResultClass<List<LocationClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetLocationsNew";
                    List<SqlParameter> Params = new List<SqlParameter>();



                    if (GovernorateIds.Count > 0)
                    {
                        //GovernorateIds
                        DataTable governoratetable;
                        using (governoratetable = new DataTable())
                        {
                            governoratetable.Columns.Add("Id", typeof(string));
                            foreach (int x in GovernorateIds)
                                governoratetable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@GovernorateIds", SqlDbType.Structured);
                        pList.Value = governoratetable;
                        cmd.Parameters.Add(pList);
                    }

                    if (CityIds.Count > 0)
                    {
                        //CitiesIds
                        DataTable citytable;
                        using (citytable = new DataTable())
                        {
                            citytable.Columns.Add("Id", typeof(string));
                            foreach (int x in CityIds)
                                citytable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CityIds", SqlDbType.Structured);
                        pList.Value = citytable;
                        cmd.Parameters.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<LocationClass> Locations = new List<LocationClass>();
                        LocationClass location;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            order += 1;
                            location = new LocationClass().PopulateLocation(fieldNames, reader);

                            location.Order = order;

                            Locations.Add(location);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Locations;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetLocations", e.Source, "");
                }
                result.Result = null;
                return result;

            }
        }

        [SwaggerWcfTag("Locations")]
        public ResultClass<LocationClass> GetLocation(int LocationId)
        {
            ResultClass<LocationClass> result = new ResultClass<LocationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetLocations";
                    SqlParameter Param = new SqlParameter("LocationId", LocationId);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        LocationClass location;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        location = new LocationClass().PopulateLocation(fieldNames, reader);

                        location.Order = 1;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                List<LocationDaysClass> locationDaysList = new List<LocationDaysClass>();
                                LocationDaysClass locationDay;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    locationDay = new LocationDaysClass().PopulateLocationDay(fieldNames, reader);

                                    locationDay.Order = Order;
                                    locationDaysList.Add(locationDay);
                                }
                                location.LocationDays = locationDaysList;
                            }
                        }
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                LocationDayTimesClass locationDayTime;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    locationDayTime = new LocationDayTimesClass().PopulateLocationDayTime(fieldNames, reader);
                                    foreach (LocationDaysClass Day in location.LocationDays)
                                    {
                                        if (Day.Id == locationDayTime.LocationDayId)
                                        {
                                            Order++;
                                            locationDayTime.Order = Order;
                                            Day.LocationDayTimes.Add(locationDayTime);
                                        }
                                    }
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = location;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetLocation", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Locations")]
        public ResultClass<LocationClass> CreateLocation(int LoggedUser, LocationClass Location)
        {
            ResultClass<LocationClass> result = new ResultClass<LocationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertLocation";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                          new SqlParameter("GovernorateId", Location.GovernorateId),
                          new SqlParameter("CityId", Location.CityId),
                          new SqlParameter("ArabicName", Location.ArabicName),
                          new SqlParameter("EnglishName", Location.EnglishName),
                          new SqlParameter("DeliveryCost", Location.DeliveryCost),
                          new SqlParameter("HasImmediateDelivdery", Location.HasImmediateDelivdery),
                          new SqlParameter("ImmediateDeliveryCost", Location.ImmediateDeliveryCost),
                       };

                    //LocationDays
                    if (Location.LocationDays != null)
                    {
                        DataTable locationDayTbl;
                        using (locationDayTbl = new DataTable())
                        {
                            locationDayTbl.Columns.Add("Id", typeof(string));
                            foreach (LocationDaysClass x in Location.LocationDays)
                                locationDayTbl.Rows.Add(x.DayId);
                        }
                        var BDList = new SqlParameter("@DaysIds", SqlDbType.Structured)
                        {
                            Value = locationDayTbl
                        };
                        Params.Add(BDList);
                    }
                    //BookingDayTimes
                    if (Location.LocationDays != null)
                    {
                        DataTable locationDayTimesTbl;
                        using (locationDayTimesTbl = new DataTable())
                        {
                            //DayId
                            locationDayTimesTbl.Columns.Add("Id", typeof(string));
                            //DeliveryPeriodFrom
                            locationDayTimesTbl.Columns.Add("Param1", typeof(string));
                            //DeliveryPeriodTo
                            locationDayTimesTbl.Columns.Add("Param2", typeof(string));
                            foreach (LocationDaysClass Day in Location.LocationDays)
                            {
                                foreach (LocationDayTimesClass DayTimes in Day.LocationDayTimes)
                                {
                                    locationDayTimesTbl.Rows.Add(Day.DayId, DayTimes.DeliveryPeriodFrom, DayTimes.DeliveryPeriodTo);
                                }
                            }
                        }
                        var BDList = new SqlParameter("@DayTimes", SqlDbType.Structured);
                        BDList.Value = locationDayTimesTbl;
                        Params.Add(BDList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        LocationClass location;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        location = new LocationClass().PopulateLocation(fieldNames, reader);

                        location.Order = 1;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<LocationDaysClass> locationDaysList = new List<LocationDaysClass>();
                                LocationDaysClass locationDay;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    locationDay = new LocationDaysClass().PopulateLocationDay(fieldNames, reader);

                                    locationDay.Order = Order;
                                    locationDaysList.Add(locationDay);
                                }
                                location.LocationDays = locationDaysList;
                            }
                        }
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                //List<ItemBookingDayTimeClass> BookingDayList = new List<ItemBookingDayTimeClass>();
                                LocationDayTimesClass locationDayTime;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    locationDayTime = new LocationDayTimesClass().PopulateLocationDayTime(fieldNames, reader);
                                    foreach (LocationDaysClass Day in location.LocationDays)
                                    {
                                        if (Day.Id == locationDayTime.LocationDayId)
                                        {
                                            Order++;
                                            locationDayTime.Order = Order;
                                            Day.LocationDayTimes.Add(locationDayTime);
                                        }
                                    }
                                    //BookingDayList.Add(bookingDays);
                                }
                                //itemsDataClass.BookingDays = BookingDayList;
                            }
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = location;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateLocation", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Locations")]
        public ResultClass<LocationClass> UpdateLocation(int LoggedUser, LocationClass Location)
        {
            ResultClass<LocationClass> result = new ResultClass<LocationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateLocation";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                          new SqlParameter("Id", Location.Id),
                          new SqlParameter("GovernorateId", Location.GovernorateId),
                          new SqlParameter("CityId", Location.CityId),
                          new SqlParameter("ArabicName", Location.ArabicName),
                          new SqlParameter("EnglishName", Location.EnglishName),
                          new SqlParameter("DeliveryCost", Location.DeliveryCost),
                          new SqlParameter("HasImmediateDelivdery", Location.HasImmediateDelivdery),
                          new SqlParameter("ImmediateDeliveryCost", Location.ImmediateDeliveryCost),
                       };
                    if (Location.LocationDays != null)
                    {
                        DataTable locationDayTbl;
                        using (locationDayTbl = new DataTable())
                        {
                            locationDayTbl.Columns.Add("Id", typeof(string));
                            foreach (LocationDaysClass x in Location.LocationDays)
                                locationDayTbl.Rows.Add(x.DayId);
                        }
                        var BDList = new SqlParameter("@DaysIds", SqlDbType.Structured)
                        {
                            Value = locationDayTbl
                        };
                        Params.Add(BDList);
                    }
                    if (Location.LocationDays != null)
                    {
                        DataTable locationDayTimesTbl;
                        using (locationDayTimesTbl = new DataTable())
                        {
                            //DayId
                            locationDayTimesTbl.Columns.Add("Id", typeof(string));
                            //DeliveryPeriodFrom
                            locationDayTimesTbl.Columns.Add("Param1", typeof(string));
                            //DeliveryPeriodTo
                            locationDayTimesTbl.Columns.Add("Param2", typeof(string));
                            foreach (LocationDaysClass Day in Location.LocationDays)
                            {
                                foreach (LocationDayTimesClass DayTimes in Day.LocationDayTimes)
                                {
                                    locationDayTimesTbl.Rows.Add(Day.DayId, DayTimes.DeliveryPeriodFrom, DayTimes.DeliveryPeriodTo);
                                }
                            }
                        }
                        var BDList = new SqlParameter("@DayTimes", SqlDbType.Structured)
                        {
                            Value = locationDayTimesTbl
                        };
                        Params.Add(BDList);
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        LocationClass location;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        location = new LocationClass().PopulateLocation(fieldNames, reader);

                        location.Order = 1;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<LocationDaysClass> locationDaysList = new List<LocationDaysClass>();
                                LocationDaysClass locationDay;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    locationDay = new LocationDaysClass().PopulateLocationDay(fieldNames, reader);

                                    locationDay.Order = Order;
                                    locationDaysList.Add(locationDay);
                                }
                                location.LocationDays = locationDaysList;
                            }
                        }
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                LocationDayTimesClass locationDayTime;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    locationDayTime = new LocationDayTimesClass().PopulateLocationDayTime(fieldNames, reader);
                                    foreach (LocationDaysClass Day in location.LocationDays)
                                    {
                                        if (Day.Id == locationDayTime.LocationDayId)
                                        {
                                            Order++;
                                            locationDayTime.Order = Order;
                                            Day.LocationDayTimes.Add(locationDayTime);
                                        }
                                    }
                                }
                            }
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = location;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }

            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateLocation", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Locations")]
        public ResultClass<LocationClass> DeleteLocation(int LoggedUser, int Location)
        {
            ResultClass<LocationClass> result = new ResultClass<LocationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteLocation";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Location)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        LocationClass location;
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        location = new LocationClass().PopulateLocation(fieldNames, reader);

                        location.Order = 1;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<LocationDaysClass> locationDaysList = new List<LocationDaysClass>();
                                LocationDaysClass locationDay;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    locationDay = new LocationDaysClass().PopulateLocationDay(fieldNames, reader);

                                    locationDay.Order = Order;
                                    locationDaysList.Add(locationDay);
                                }
                                location.LocationDays = locationDaysList;
                            }
                        }
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                LocationDayTimesClass locationDayTime;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    locationDayTime = new LocationDayTimesClass().PopulateLocationDayTime(fieldNames, reader);
                                    foreach (LocationDaysClass Day in location.LocationDays)
                                    {
                                        if (Day.Id == locationDayTime.LocationDayId)
                                        {
                                            Order++;
                                            locationDayTime.Order = Order;
                                            Day.LocationDayTimes.Add(locationDayTime);
                                        }
                                    }
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = location;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteLocation", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //Companies
        [SwaggerWcfTag("Companies")]
        public ResultClass<List<CompanyClass>> GetCompanies(int LoggedUser)
        {
            ResultClass<List<CompanyClass>> result = new ResultClass<List<CompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<CompanyClass> Companies = new List<CompanyClass>();
                        CompanyClass company;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            order += 1;
                            company = new CompanyClass().PopulateCompany(fieldNames, reader);
                            company.Order = order;

                            Companies.Add(company);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Companies;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetCompanies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Companies")]
        public ResultClass<CompanyClass> GetCompany(int CompanyId)
        {
            ResultClass<CompanyClass> result = new ResultClass<CompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCompanies";
                    SqlParameter Param = new SqlParameter("CompanyId", CompanyId);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        CompanyClass company;
                        reader.Read();
                        company = new CompanyClass().PopulateCompany(fieldNames, reader);
                        company.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = company;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Companies")]
        public ResultClass<CompanyClass> CreateCompany(int LoggedUser, CompanyClass Company)
        {
            ResultClass<CompanyClass> result = new ResultClass<CompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ArabicName", Company.ArabicName),
                  new SqlParameter("EnglishName", Company.EnglishName)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        CompanyClass company;
                        reader.Read();
                        company = new CompanyClass().PopulateCompany(fieldNames, reader);

                        company.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = company;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Companies")]
        public ResultClass<CompanyClass> UpdateCompany(int LoggedUser, CompanyClass Company)
        {
            ResultClass<CompanyClass> result = new ResultClass<CompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Company.Id),
                  new SqlParameter("ArabicName", Company.ArabicName),
                  new SqlParameter("EnglishName", Company.EnglishName)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        CompanyClass company;
                        reader.Read();

                        company = new CompanyClass().PopulateCompany(fieldNames, reader);

                        company.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = company;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Companies")]
        public ResultClass<CompanyClass> DeleteCompany(int LoggedUser, int Company)
        {
            ResultClass<CompanyClass> result = new ResultClass<CompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Company)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        CompanyClass company;
                        reader.Read();
                        company = new CompanyClass().PopulateCompany(fieldNames, reader);

                        company.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = company;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        //Transfers
        [SwaggerWcfTag("Transfers")]
        public ResultClass<List<TransferClass>> GetTransfers()
        {
            ResultClass<List<TransferClass>> result = new ResultClass<List<TransferClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTransfers";
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<TransferClass> Transfers = new List<TransferClass>();
                        TransferClass Transfer;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            order += 1;
                            Transfer = new TransferClass().PopulateTransfer(fieldNames, reader);


                            Transfer.Order = order;

                            Transfers.Add(Transfer);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Transfers;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetTransfers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Transfers")]
        public ResultClass<TransferClass> GetTransfer(int TransferId)
        {
            ResultClass<TransferClass> result = new ResultClass<TransferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTransfers";
                    SqlParameter Param = new SqlParameter("TransferId", TransferId);
                    cmd.Parameters.Add(Param);
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        TransferClass Transfer;
                        reader.Read();
                        Transfer = new TransferClass().PopulateTransfer(fieldNames, reader);

                        Transfer.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Transfer;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetTransfer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<TransferClass> CreateTransfer(int LoggedUser, TransferClass Transfer)
        {
            ResultClass<TransferClass> result = new ResultClass<TransferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertTransfer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Sender_UserId", Transfer.Sender_UserId),
                  new SqlParameter("Receiver_UserId", Transfer.Receiver_UserId),
                  new SqlParameter("Amount", Transfer.Amount),
                  new SqlParameter("TransferMethodId", Transfer.TransferMethodId),
                  new SqlParameter("TransferStatusId", Transfer.TransferStatusId)
               };

                    if (!String.IsNullOrWhiteSpace(Transfer.Date))
                        Params.Add(new SqlParameter("Date", Transfer.Date));

                    if (!String.IsNullOrWhiteSpace(Transfer.TransferCode))
                        Params.Add(new SqlParameter("TransferCode", Transfer.TransferCode));

                    if (!String.IsNullOrWhiteSpace(Transfer.Notes))
                        Params.Add(new SqlParameter("Notes", Transfer.Notes));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        TransferClass TransferRes;
                        reader.Read();
                        TransferRes = new TransferClass().PopulateTransfer(fieldNames, reader);


                        TransferRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = TransferRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateTransfer", e.Source, "");
                }

                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Transfers")]
        public ResultClass<TransferClass> CreateUndoTransfer(int LoggedUser, int TransferId, string Note)
        {
            ResultClass<TransferClass> result = new ResultClass<TransferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUndoTransfer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("TransferId", TransferId),
                  new SqlParameter("Note", Note)
               };


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        TransferClass TransferRes;
                        reader.Read();
                        TransferRes = new TransferClass().PopulateTransfer(fieldNames, reader);

                        if (TransferRes != null)
                        {
                            TransferResultClass transferResult = new TransferResultClass();
                            transferResult.Amount = TransferRes.Amount.ToString();
                            transferResult.Sender_UserId = TransferRes.Sender_UserId.ToString();
                            transferResult.Receiver_UserId = TransferRes.Receiver_UserId.ToString();
                            transferResult.Sender_UserFullName = TransferRes.Sender_Name;
                            transferResult.Receiver_UserFullName = TransferRes.Receiver_Name;
                            transferResult.TransferStatusId = TransferRes.TransferStatusId;

                            transferResult.ProcessInsertSingleTransferNotifications();
                        }
                        TransferRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = TransferRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUndoTransfer", e.Source, "");
                }

                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<TransferClass> UpdateTransfer(int LoggedUser, TransferClass Transfer)
        {
            ResultClass<TransferClass> result = new ResultClass<TransferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateTransfer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Sender_Id", Transfer.Id),
                  new SqlParameter("Date", Transfer.TransferStatusId),
                  new SqlParameter("Sender_UserId", Transfer.Sender_UserId),
                  new SqlParameter("Receiver_UserId", Transfer.Receiver_UserId),
                  new SqlParameter("Amount", Transfer.Amount),
                  new SqlParameter("TransferMethodId", Transfer.TransferMethodId),
                  new SqlParameter("TransferCode", Transfer.TransferStatusId),
                  new SqlParameter("TransferStatusId", Transfer.TransferStatusId),
                  new SqlParameter("Notes", Transfer.Notes)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        TransferClass TransferRes;

                        reader.Read();
                        TransferRes = new TransferClass().PopulateTransfer(fieldNames, reader);

                        TransferRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = TransferRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateTransfer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Transfers")]
        public ResultClass<TransferClass> DeleteTransfer(int LoggedUser, int TransferId)
        {
            ResultClass<TransferClass> result = new ResultClass<TransferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteTransfer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", TransferId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        TransferClass Transfer;

                        reader.Read();
                        Transfer = new TransferClass().PopulateTransfer(fieldNames, reader);

                        Transfer.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Transfer;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteTransfer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Transfer Status
        [SwaggerWcfTag("Transfers")]
        public ResultClass<List<TransferStatusClass>> GetTransferStatus()
        {
            ResultClass<List<TransferStatusClass>> result = new ResultClass<List<TransferStatusClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTransferStatus";
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferStatusClass> Statues = new List<TransferStatusClass>();
                        TransferStatusClass status;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            status = new TransferStatusClass().PopulateTransferStatus(fieldNames, reader);

                            status.Order = order;

                            Statues.Add(status);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Statues;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetTransferStatus", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Transfer Methods
        [SwaggerWcfTag("Transfers")]
        public ResultClass<List<TransferMethodClass>> GetTransferMethods()
        {
            ResultClass<List<TransferMethodClass>> result = new ResultClass<List<TransferMethodClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTransferMethods";
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferMethodClass> Methods = new List<TransferMethodClass>();
                        TransferMethodClass method;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            method = new TransferMethodClass().PopulateTransferMethod(fieldNames, reader);

                            method.Order = order;

                            Methods.Add(method);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Methods;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetTransferMethods", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Transfers")]
        public ResultClass<List<TransferResultClass>> CreateMultipleTransfer(int LoggedUser, string Date, int Sender_UserId,
          double Amount, string Notes, int TransferStatusId, List<int> Receivers_UserId)
        {
            ResultClass<List<TransferResultClass>> result = new ResultClass<List<TransferResultClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertMultipleTransfer";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Sender_UserId", Sender_UserId),
                  new SqlParameter("Amount", Amount),
                  new SqlParameter("TransferStatusId", TransferStatusId)
                    };

                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Receivers_UserId)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@Receivers_UserIDs", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);


                    if (!string.IsNullOrWhiteSpace(Date))
                        Params.Add(new SqlParameter("Date", Date));

                    if (!string.IsNullOrWhiteSpace(Notes))
                        Params.Add(new SqlParameter("Notes", Notes));


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferResultClass> transfersResultList = new List<TransferResultClass>();
                        TransferResultClass transferResult;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            transferResult = new TransferResultClass().PopulateTransferResult(fieldNames, reader);

                            if (transferResult.TransferResultStatus == 1)
                            {
                                transferResult.ProcessInsertSingleTransferNotifications();
                            }

                            transferResult.Order = order;
                            transfersResultList.Add(transferResult);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = transfersResultList;
                        return result;
                    }

                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateMultipleTransfer", e.Source, "");
                }

                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<TransferResultClass>> CreateMultipleTransferFromExcel(int LoggedUser, string Url,
           string WorksheetName, int firstRow, string UserColumn, string PointColumn)
        {
            ResultClass<List<TransferResultClass>> result = new ResultClass<List<TransferResultClass>>();
            try
            {
                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@"/", @"\");

                byte[] file = File.ReadAllBytes(filePath);
                MemoryStream ms = new MemoryStream(file);

                var package = new ExcelPackage(ms);
                //var package = new ExcelPackage(new FileInfo(filePath));
                ExcelWorksheet workSheet = package.Workbook.Worksheets[WorksheetName];

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertMultipleTransferFromExcel";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    List<SqlParameter> Params = new List<SqlParameter>();

                    //Populate data
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(int));
                        table.Columns.Add("Name", typeof(string));

                        string user = String.Empty;
                        int point = 0;

                        for (int i = firstRow; i <= workSheet.Dimension.End.Row; i++)
                        {
                            user = workSheet.Cells[UserColumn + i.ToString()].Value?.ToString();
                            point = Convert.ToInt32(workSheet.Cells[PointColumn + i.ToString()].Value);

                            if ((!String.IsNullOrWhiteSpace(user)) && (point > 0))
                                table.Rows.Add(point, user);
                        }
                    }

                    var pList = new SqlParameter("@ExcelDataList", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferResultClass> transfersResultList = new List<TransferResultClass>();
                        TransferResultClass transferResult;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            transferResult = new TransferResultClass().PopulateTransferResult(fieldNames, reader);

                            transferResult.Order = order;
                            transfersResultList.Add(transferResult);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = transfersResultList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateMultipleTransferFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Transfers")]
        public ResultClass<List<TransferResultClass>> CreateMultipleTransferFromExcelNew(int LoggedUser, List<TransferResultClass> TransferDataList)
        {
            ResultClass<List<TransferResultClass>> result = new ResultClass<List<TransferResultClass>>();
            result.Result = new List<TransferResultClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertMultipleTransferFromExcelNew";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    //Transfer Data List
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(int));
                        table.Columns.Add("Param1", typeof(string));
                        table.Columns.Add("Param2", typeof(string));
                        foreach (var item in TransferDataList)
                        {
                            try { table.Rows.Add(Convert.ToInt32(item.Amount), item.Receiver_UserFullName, item.Note); }
                            catch { table.Rows.Add(0, item.Receiver_UserFullName, item.Note); } //Wrong Amount Number
                        }
                    }
                    var pList = new SqlParameter("@TransferDataList", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferResultClass> transfersResultList = new List<TransferResultClass>();
                        TransferResultClass transferResult;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            transferResult = new TransferResultClass().PopulateTransferResult(fieldNames, reader);
                            if (transferResult.TransferResultStatus == 1)
                            {
                                transferResult.ProcessInsertSingleTransferNotifications();
                            }

                            transferResult.Order = order;
                            transfersResultList.Add(transferResult);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = transfersResultList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateMultipleTransferNew", e.Source, "");
                }

                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Transfers")]
        public ResultClass<List<TransferResultClass>> GetTransfersListFromExcel(int LoggedUser, string Url,
           string WorksheetName, int firstRow, string UserColumn, string PointColumn, string NoteColumn)
        {
            ResultClass<List<TransferResultClass>> result = new ResultClass<List<TransferResultClass>>();
            try
            {
                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@"/", @"\");

                byte[] file = File.ReadAllBytes(filePath);
                MemoryStream ms = new MemoryStream(file);

                var package = new ExcelPackage(ms);
                //var package = new ExcelPackage(new FileInfo(filePath));
                ExcelWorksheet workSheet = package.Workbook.Worksheets[WorksheetName];

                int order = 0;

                List<TransferResultClass> transfersResultList = new List<TransferResultClass>();
                TransferResultClass transferResult;

                for (int i = firstRow; i <= workSheet.Dimension.End.Row; i++)
                {
                    //Intilize Params
                    string user = String.Empty;
                    string note = String.Empty;
                    string point = String.Empty;

                    order++;
                    transferResult = new TransferResultClass();

                    user = workSheet.Cells[UserColumn + i.ToString()]?.Value?.ToString();
                    point = workSheet.Cells[PointColumn + i.ToString()]?.Value?.ToString();
                    if (!String.IsNullOrWhiteSpace(NoteColumn))
                        note = workSheet.Cells[NoteColumn + i.ToString()]?.Value?.ToString();

                    int temp = 0;

                    transferResult.Receiver_UserFullName = user;
                    transferResult.Amount = point;
                    transferResult.Note = note;
                    transferResult.Order = order;

                    if ((!String.IsNullOrWhiteSpace(user)) && (Int32.TryParse(point, out temp)))
                        transferResult.TransferResultStatus = 1; //Success
                    else
                        transferResult.TransferResultStatus = 0; // Fail


                    transfersResultList.Add(transferResult);

                }

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = transfersResultList;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetTransfersListFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<RequestClass> CreateWithdrawTransfer(int LoggedUser, string MobileNo, TransferClass Transfer)
        {
            ResultClass<RequestClass> result = new ResultClass<RequestClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    Random r = new Random();
                    int rInt = r.Next(1, 9999); //for ints

                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertRequest";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Sender_UserId", Transfer.Sender_UserId),
                  new SqlParameter("Receiver_UserId", Transfer.Receiver_UserId),
                  new SqlParameter("Amount", Transfer.Amount),
                  new SqlParameter("TransferMethodId", Transfer.TransferMethodId),
                  new SqlParameter("TransferStatusId", Transfer.TransferStatusId),
                  new SqlParameter("PinCode", rInt),
               };

                    if (!String.IsNullOrWhiteSpace(Transfer.Date))
                        Params.Add(new SqlParameter("Date", Transfer.Date));

                    if (!String.IsNullOrWhiteSpace(Transfer.TransferCode))
                        Params.Add(new SqlParameter("TransferCode", Transfer.TransferCode));

                    if (!String.IsNullOrWhiteSpace(Transfer.Notes))
                        Params.Add(new SqlParameter("Notes", Transfer.Notes));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        RequestClass RequestRes;
                        reader.Read();
                        RequestRes = new RequestClass().PopulateRequest(fieldNames, reader);

                        //Send SMS

                        string Body = "Nuqaty App Code: " + rInt + "Transaction Id: " + RequestRes.Id +
                           "Amount: " + Transfer.Amount + "From UserId: " + Transfer.Receiver_UserId +
                           "Bill Number: " + Transfer.Notes;

                        //var apiResult = SendSMS(MobileNo, Body);
                        //if (apiResult.Code != 0 || apiResult.Result.status != "0")
                        //{
                        //   result.Message = apiResult.Message;
                        //   result.Code = apiResult.Code;
                        //   result.Result = null;

                        //   return result;
                        //}

                        RequestRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = RequestRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int errorCode;
                if (Int32.TryParse(e.Message, out errorCode))
                {
                    result.Code = errorCode;
                    result.Message = Errors.GetErrorMessage(errorCode);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateWithdrawTransfer", e.Source, "");
                }

                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<TransferClass> VerifyWithdrawTransfer(int LoggedUser, string RequestId, string PinCode)
        {
            ResultClass<TransferClass> result = new ResultClass<TransferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_VerifyWithdrawTransfer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("RequestId", RequestId),
                  new SqlParameter("PinCode", PinCode),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        TransferClass TransferRes;
                        reader.Read();
                        TransferRes = new TransferClass().PopulateTransfer(fieldNames, reader);

                        TransferRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = TransferRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int errorCode;
                if (Int32.TryParse(e.Message, out errorCode))
                {
                    result.Code = errorCode;
                    result.Message = Errors.GetErrorMessage(errorCode);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "VerifyWithdrawTransfer", e.Source, "");
                }

                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("WithdrawTransfer")]
        public ResultClass<List<TransferResultClass>> CreateMultipleWithdrawTransfer(int LoggedUser, string Date, List<int> Senders_UserIds,
        double Amount, string Notes, int TransferStatusId, int Receiver_UserId)
        {
            ResultClass<List<TransferResultClass>> result = new ResultClass<List<TransferResultClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertMultipleWithdrawTransfer";

                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Senders_UserIds)
                            table.Rows.Add(x);
                    }

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Receiver_UserId", Receiver_UserId),
                  new SqlParameter("Amount", Amount),
                  new SqlParameter("TransferStatusId", TransferStatusId)
               };

                    if (!String.IsNullOrWhiteSpace(Date))
                        Params.Add(new SqlParameter("Date", Date));

                    if (!String.IsNullOrWhiteSpace(Notes))
                        Params.Add(new SqlParameter("Notes", Notes));

                    var pList = new SqlParameter("@Senders_UserIds", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferResultClass> transfersResultList = new List<TransferResultClass>();
                        TransferResultClass transferResult;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            transferResult = new TransferResultClass().PopulateTransferResult(fieldNames, reader);

                            if (transferResult.TransferResultStatus == 1)
                            {
                                transferResult.ProcessInsertSingleTransferNotifications();
                            }

                            transferResult.Order = order;
                            transfersResultList.Add(transferResult);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = transfersResultList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateMultipleWithdrawTransfer", e.Source, "");
                }

                result.Result = null;
                return result;
            }
        }


        //MainBalances
        [SwaggerWcfTag("MainBalances")]
        public ResultClass<List<MainBalanceClass>> GetMainBalances(int LoggedUser)
        {
            ResultClass<List<MainBalanceClass>> result = new ResultClass<List<MainBalanceClass>>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetMainBalances";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        int order = 0;
                        List<MainBalanceClass> MainBalances = new List<MainBalanceClass>();
                        MainBalanceClass mainBalance;
                        while (reader.Read())
                        {
                            order = order + 1;
                            mainBalance = new MainBalanceClass().PopulateMainBalance(fieldNames, reader);

                            mainBalance.Order = order;

                            MainBalances.Add(mainBalance);
                        }

                        result.Code = Errors.Success;
                        result.Result = MainBalances;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetMainBalances", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("MainBalances")]
        public ResultClass<MainBalanceClass> GetMainBalance(int LoggedUser, int MainBalanceId)
        {
            ResultClass<MainBalanceClass> result = new ResultClass<MainBalanceClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetMainBalances";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("MainBalanceId", MainBalanceId)

               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        int order = 0;
                        reader.Read();

                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        MainBalanceClass mainBalance = new MainBalanceClass().PopulateMainBalance(fieldNames, reader);


                        mainBalance.Order = order;

                        result.Code = Errors.Success;
                        result.Result = mainBalance;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetMainBalance", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("MainBalances")]
        public ResultClass<MainBalanceClass> CreateMainBalance(MainBalanceClass MainBalance)
        {
            ResultClass<MainBalanceClass> result = new ResultClass<MainBalanceClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertMainBalance";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", MainBalance.UserId),
                  new SqlParameter("Amount", MainBalance.Amount)
               };

                    if (!string.IsNullOrWhiteSpace(MainBalance.Date))
                        Params.Add(new SqlParameter("Date", MainBalance.Date));

                    if (!string.IsNullOrWhiteSpace(MainBalance.Notes))
                        Params.Add(new SqlParameter("Notes", MainBalance.Notes));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();
                        MainBalanceClass mainBalance = new MainBalanceClass().PopulateMainBalance(fieldNames, reader);

                        mainBalance.ProcessInsertMainBalanceNotification();

                        mainBalance.Order = 1;
                        result.Code = Errors.Success;
                        result.Result = mainBalance;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "CreateMainBalance", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("MainBalances")]
        public ResultClass<MainBalanceClass> UpdateMainBalance(MainBalanceClass MainBalance)
        {
            ResultClass<MainBalanceClass> result = new ResultClass<MainBalanceClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateMainBalance";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", MainBalance.Id),
                  new SqlParameter("LoggedUser", MainBalance.UserId),
                  new SqlParameter("Amount", MainBalance.Amount)
               };

                    if (!string.IsNullOrWhiteSpace(MainBalance.Date))
                        Params.Add(new SqlParameter("Date", MainBalance.Date));

                    if (!string.IsNullOrWhiteSpace(MainBalance.Notes))
                        Params.Add(new SqlParameter("Notes", MainBalance.Notes));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();
                        MainBalanceClass mainBalance = new MainBalanceClass().PopulateMainBalance(fieldNames, reader);

                        mainBalance.ProcessUpdateMainBalanceNotification();

                        mainBalance.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = mainBalance;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "UpdateMainBalance", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("MainBalances")]
        public ResultClass<MainBalanceClass> DeleteMainBalance(int LoggedUser, int MainBalanceId)
        {
            ResultClass<MainBalanceClass> result = new ResultClass<MainBalanceClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteMainBalance";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", MainBalanceId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();
                        MainBalanceClass mainBalance = new MainBalanceClass().PopulateMainBalance(fieldNames, reader);

                        mainBalance.ProcessDeleteMainBalanceNotification();

                        mainBalance.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = mainBalance;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteMainBalance", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("MainBalances")]
        public ResultClass<double> GetTotalMainBalance()
        {
            ResultClass<double> result = new ResultClass<double>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTotalMainBalance";
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        reader.Read();
                        result.Code = Errors.Success;
                        result.Result = Convert.ToDouble(reader["TotalMainBalance"]);
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = 0;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetTotalMainBalance", e.Source, "");
                }
                result.Result = 0;
                return result;
            }
        }

        //Jobs
        //Branchs

        [SwaggerWcfTag("Jobs")]
        public ResultClass<List<JobClass>> GetJobs()
        {
            ResultClass<List<JobClass>> result = new ResultClass<List<JobClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetJobs";

                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        int Order = 0;
                        JobClass job;
                        List<JobClass> jobList = new List<JobClass>();
                        while (rd.Read())
                        {
                            Order += 1;
                            job = new JobClass();

                            if (!Convert.IsDBNull(rd["Id"]))
                                job.Id = (int)rd["Id"];
                            if (!Convert.IsDBNull(rd["ArabicName"]))
                                job.ArabicName = rd["ArabicName"].ToString();
                            if (!Convert.IsDBNull(rd["EnglishName"]))
                                job.EnglishName = rd["EnglishName"].ToString();
                            if (!Convert.IsDBNull(rd["Code"]))
                                job.Code = rd["Code"].ToString();

                            job.Order = Order;
                            jobList.Add(job);

                        }
                        result.Code = Errors.Success;
                        result.Result = jobList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetJobs", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Jobs")]
        public ResultClass<JobClass> GetJob(int Id)
        {
            ResultClass<JobClass> result = new ResultClass<JobClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetJobs";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        JobClass job = new JobClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            job.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            job.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            job.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            job.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = job;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetJob", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Jobs")]
        public ResultClass<JobClass> CreateJob(int LoggedUser, JobClass Job)
        {
            ResultClass<JobClass> result = new ResultClass<JobClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertJob";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("EnglishName", Job.EnglishName),
                  new SqlParameter("ArabicName", Job.ArabicName),
                  new SqlParameter("Code", Job.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        JobClass job = new JobClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            job.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            job.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            job.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            job.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = job;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateJob", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Jobs")]
        public ResultClass<JobClass> UpdateJob(int LoggedUser, JobClass Job)
        {
            ResultClass<JobClass> result = new ResultClass<JobClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateJob";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Job.Id),
                  new SqlParameter("EnglishName", Job.EnglishName),
                  new SqlParameter("ArabicName", Job.ArabicName),
                  new SqlParameter("Code", Job.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        JobClass job = new JobClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            job.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            job.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            job.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            job.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = job;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateJob", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Jobs")]
        public ResultClass<JobClass> DeleteJob(int LoggedUser, int Id)
        {
            ResultClass<JobClass> result = new ResultClass<JobClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteJob";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        JobClass job = new JobClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            job.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            job.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            job.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            job.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = job;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteJob", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }





        //Positions
        //Jobs
        //Branchs
        [SwaggerWcfTag("Positions")]
        public ResultClass<PositionClass> CreatePosition(int LoggedUser, PositionClass Position)
        {
            ResultClass<PositionClass> result = new ResultClass<PositionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertPosition";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("EnglishName", Position.EnglishName),
                  new SqlParameter("ArabicName", Position.ArabicName),
                  new SqlParameter("Code", Position.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        PositionClass position = new PositionClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            position.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            position.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            position.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            position.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = position;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreatePosition", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Positions")]
        public ResultClass<PositionClass> UpdatePosition(int LoggedUser, PositionClass Position)
        {
            ResultClass<PositionClass> result = new ResultClass<PositionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdatePosition";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Position.Id),
                  new SqlParameter("EnglishName", Position.EnglishName),
                  new SqlParameter("ArabicName", Position.ArabicName),
                  new SqlParameter("Code", Position.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        PositionClass position = new PositionClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            position.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            position.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            position.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            position.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = position;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdatePosition", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Positions")]
        public ResultClass<PositionClass> DeletePosition(int LoggedUser, int Id)
        {
            ResultClass<PositionClass> result = new ResultClass<PositionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeletePosition";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        PositionClass position = new PositionClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            position.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            position.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            position.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            position.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = position;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeletePosition", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Positions")]
        public ResultClass<List<PositionClass>> GetPositions()
        {
            ResultClass<List<PositionClass>> result = new ResultClass<List<PositionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetPositions";

                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        PositionClass position;
                        int Order = 0;
                        List<PositionClass> positionList = new List<PositionClass>();
                        while (rd.Read())
                        {
                            Order += 1;
                            position = new PositionClass();

                            if (!Convert.IsDBNull(rd["Id"]))
                                position.Id = (int)rd["Id"];
                            if (!Convert.IsDBNull(rd["ArabicName"]))
                                position.ArabicName = rd["ArabicName"].ToString();
                            if (!Convert.IsDBNull(rd["EnglishName"]))
                                position.EnglishName = rd["EnglishName"].ToString();
                            if (!Convert.IsDBNull(rd["Code"]))
                                position.Code = rd["Code"].ToString();

                            position.Order = Order;
                            positionList.Add(position);

                        }
                        result.Code = Errors.Success;
                        result.Result = positionList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetPositions", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Positions")]
        public ResultClass<PositionClass> GetPosition(int Id)
        {
            ResultClass<PositionClass> result = new ResultClass<PositionClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetPositions";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        PositionClass position = new PositionClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            position.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            position.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            position.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            position.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = position;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetPosition", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //Work Domains
        //Postions
        //Jobs
        //Branchs
        [SwaggerWcfTag("WorkDomains")]
        public ResultClass<WorkDomainClass> CreateWorkDomain(int LoggedUser, WorkDomainClass WorkDomain)
        {
            ResultClass<WorkDomainClass> result = new ResultClass<WorkDomainClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertWorkDomain";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("EnglishName", WorkDomain.EnglishName),
                  new SqlParameter("ArabicName", WorkDomain.ArabicName),
                  new SqlParameter("Code", WorkDomain.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        WorkDomainClass workDomain = new WorkDomainClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            workDomain.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            workDomain.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            workDomain.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            workDomain.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = workDomain;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateWorkDomain", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("WorkDomains")]
        public ResultClass<WorkDomainClass> UpdateWorkDomain(int LoggedUser, WorkDomainClass WorkDomain)
        {
            ResultClass<WorkDomainClass> result = new ResultClass<WorkDomainClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateWorkDomain";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", WorkDomain.Id),
                  new SqlParameter("EnglishName", WorkDomain.EnglishName),
                  new SqlParameter("ArabicName", WorkDomain.ArabicName),
                  new SqlParameter("Code", WorkDomain.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        WorkDomainClass workDomain = new WorkDomainClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            workDomain.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            workDomain.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            workDomain.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            workDomain.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = workDomain;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateWorkDomain", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("WorkDomains")]
        public ResultClass<WorkDomainClass> DeleteWorkDomain(int LoggedUser, int Id)
        {
            ResultClass<WorkDomainClass> result = new ResultClass<WorkDomainClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteWorkDomain";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        WorkDomainClass workDomain = new WorkDomainClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            workDomain.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            workDomain.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            workDomain.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            workDomain.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = workDomain;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteWorkDomain", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("WorkDomains")]
        public ResultClass<List<WorkDomainClass>> GetWorkDomains()
        {
            ResultClass<List<WorkDomainClass>> result = new ResultClass<List<WorkDomainClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetWorkDomains";

                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        int Order = 0;
                        WorkDomainClass workDomain;
                        List<WorkDomainClass> workDomainList = new List<WorkDomainClass>();
                        while (rd.Read())
                        {
                            Order += 1;
                            workDomain = new WorkDomainClass();

                            if (!Convert.IsDBNull(rd["Id"]))
                                workDomain.Id = (int)rd["Id"];
                            if (!Convert.IsDBNull(rd["ArabicName"]))
                                workDomain.ArabicName = rd["ArabicName"].ToString();
                            if (!Convert.IsDBNull(rd["EnglishName"]))
                                workDomain.EnglishName = rd["EnglishName"].ToString();
                            if (!Convert.IsDBNull(rd["Code"]))
                                workDomain.Code = rd["Code"].ToString();
                            workDomain.Order = Order;
                            workDomainList.Add(workDomain);

                        }
                        result.Code = Errors.Success;
                        result.Result = workDomainList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetWorkDomains", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("WorkDomains")]
        public ResultClass<WorkDomainClass> GetWorkDomain(int Id)
        {
            ResultClass<WorkDomainClass> result = new ResultClass<WorkDomainClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetWorkDomains";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        WorkDomainClass workDomain = new WorkDomainClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            workDomain.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            workDomain.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            workDomain.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            workDomain.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = workDomain;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetWorkDomain", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //Education Level
        [SwaggerWcfTag("EducationLevel")]
        public ResultClass<EducationLevelClass> CreateEducationLevel(int LoggedUser, EducationLevelClass EducationLevel)
        {
            ResultClass<EducationLevelClass> result = new ResultClass<EducationLevelClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertEducationLevel";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("EnglishName", EducationLevel.EnglishName),
                  new SqlParameter("ArabicName", EducationLevel.ArabicName),
                  new SqlParameter("Code", EducationLevel.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        EducationLevelClass educationLevel = new EducationLevelClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            educationLevel.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            educationLevel.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            educationLevel.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            educationLevel.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = educationLevel;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateEducationLevel", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("EducationLevel")]
        public ResultClass<EducationLevelClass> UpdateEducationLevel(int LoggedUser, EducationLevelClass EducationLevel)
        {
            ResultClass<EducationLevelClass> result = new ResultClass<EducationLevelClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateEducationLevel";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", EducationLevel.Id),
                  new SqlParameter("EnglishName", EducationLevel.EnglishName),
                  new SqlParameter("ArabicName", EducationLevel.ArabicName),
                  new SqlParameter("Code", EducationLevel.Code)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        EducationLevelClass educationLevel = new EducationLevelClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            educationLevel.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            educationLevel.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            educationLevel.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            educationLevel.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = educationLevel;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateEducationLevel", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("EducationLevel")]
        public ResultClass<EducationLevelClass> DeleteEducationLevel(int LoggedUser, int Id)
        {
            ResultClass<EducationLevelClass> result = new ResultClass<EducationLevelClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteEducationLevel";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        EducationLevelClass educationLevel = new EducationLevelClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            educationLevel.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            educationLevel.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            educationLevel.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            educationLevel.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = educationLevel;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteEducationLevel", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("EducationLevel")]
        public ResultClass<List<EducationLevelClass>> GetEducationLevels()
        {
            ResultClass<List<EducationLevelClass>> result = new ResultClass<List<EducationLevelClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetEducationLevels";

                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        int Order = 0;
                        EducationLevelClass educationLevel;
                        List<EducationLevelClass> educationLevelList = new List<EducationLevelClass>();
                        while (rd.Read())
                        {
                            Order += 1;
                            educationLevel = new EducationLevelClass();

                            if (!Convert.IsDBNull(rd["Id"]))
                                educationLevel.Id = (int)rd["Id"];
                            if (!Convert.IsDBNull(rd["ArabicName"]))
                                educationLevel.ArabicName = rd["ArabicName"].ToString();
                            if (!Convert.IsDBNull(rd["EnglishName"]))
                                educationLevel.EnglishName = rd["EnglishName"].ToString();
                            if (!Convert.IsDBNull(rd["Code"]))
                                educationLevel.Code = rd["Code"].ToString();
                            educationLevel.Order = Order;
                            educationLevelList.Add(educationLevel);

                        }
                        result.Code = Errors.Success;
                        result.Result = educationLevelList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetEducationLevels", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("EducationLevel")]
        public ResultClass<EducationLevelClass> GetEducationLevel(int Id)
        {
            ResultClass<EducationLevelClass> result = new ResultClass<EducationLevelClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetEducationLevels";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        EducationLevelClass educationLevel = new EducationLevelClass();

                        if (!Convert.IsDBNull(rd["Id"]))
                            educationLevel.Id = (int)rd["Id"];
                        if (!Convert.IsDBNull(rd["ArabicName"]))
                            educationLevel.ArabicName = rd["ArabicName"].ToString();
                        if (!Convert.IsDBNull(rd["EnglishName"]))
                            educationLevel.EnglishName = rd["EnglishName"].ToString();
                        if (!Convert.IsDBNull(rd["Code"]))
                            educationLevel.Code = rd["Code"].ToString();

                        result.Code = Errors.Success;
                        result.Result = educationLevel;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetEducationLevel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("Brands")]
        public ResultClass<List<BrandClass>> GetBrands()
        {
            ResultClass<List<BrandClass>> result = new ResultClass<List<BrandClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBrands";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BrandClass> Brands = new List<BrandClass>();
                        BrandClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BrandClass().PopulateBrand(fieldNames, reader);

                            id.Order = order;
                            Brands.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Brands;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBrands", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Brands")]
        public ResultClass<List<BrandClass>> GetBrandsByDepartment(int DepartmentId)
        {
            ResultClass<List<BrandClass>> result = new ResultClass<List<BrandClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBrandsByDepartment";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("DepartmentId", DepartmentId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BrandClass> Brands = new List<BrandClass>();
                        BrandClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BrandClass().PopulateBrand(fieldNames, reader);

                            id.Order = order;
                            Brands.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Brands;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBrandsByDepartment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Brands")]
        public ResultClass<BrandClass> GetBrand(int Id)
        {
            ResultClass<BrandClass> result = new ResultClass<BrandClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBrands";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass id;
                        reader.Read();
                        id = new BrandClass().PopulateBrand(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBrand", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        public ResultClass<BrandDataClass> GetBrandData(int Id)
        {
            ResultClass<BrandDataClass> result = new ResultClass<BrandDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBrandData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };



                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    BrandDataClass brandData = new BrandDataClass();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass id;
                        reader.Read();
                        id = new BrandClass().PopulateBrand(fieldNames, reader);
                        
                        id.Order = 1;
                        brandData.Brand = id;
                        List<BrandDepartmentClass> brandDepartments = new List<BrandDepartmentClass>();
                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            BrandDepartmentClass brandDepartment;
                           
                            int order = 0;
                            while (reader.Read())
                            {
                                brandDepartment = new BrandDepartmentClass();
                                order = order + 1;
                                brandDepartment.Department = new ItemDepartmentClass();

                                if (fieldNames.Contains("Id"))
                                    if (!Convert.IsDBNull(reader["Id"]))
                                        brandDepartment.Id = Convert.ToInt32(reader["Id"]);

                                if (fieldNames.Contains("DepartmentId"))
                                    if (!Convert.IsDBNull(reader["DepartmentId"]))
                                        brandDepartment.Department.Id = Convert.ToInt32(reader["DepartmentId"]);

                                if (fieldNames.Contains("DepartmentArabicName"))
                                    if (!Convert.IsDBNull(reader["DepartmentArabicName"]))
                                        brandDepartment.Department.ArabicName = reader["DepartmentArabicName"].ToString();

                                if (fieldNames.Contains("DepartmentEnglishName"))
                                    if (!Convert.IsDBNull(reader["DepartmentEnglishName"]))
                                        brandDepartment.Department.EnglishName = reader["DepartmentEnglishName"].ToString();

                                if (fieldNames.Contains("ImageURL"))
                                    if (!Convert.IsDBNull(reader["ImageURL"]))
                                        brandDepartment.ImageURL = reader["ImageURL"].ToString();

                                if (fieldNames.Contains("WebImageURL"))
                                    if (!Convert.IsDBNull(reader["WebImageURL"]))
                                        brandDepartment.WebImageURL = reader["WebImageURL"].ToString();

                                brandDepartment.Department.Order = order;
                                brandDepartments.Add(brandDepartment);
                            }
                        }
                        
                        brandData.Departments = brandDepartments;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = brandData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBrandData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Brands")]
        public ResultClass<BrandDataClass> CreateBrandData(int LoggedUser, BrandDataClass BrandData)
        {
            ResultClass<BrandDataClass> result = new ResultClass<BrandDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertBrandData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", BrandData.Brand.ArabicName),
                  new SqlParameter("EnglishName", BrandData.Brand.EnglishName),
                  new SqlParameter("Code", BrandData.Brand.Code),
                  new SqlParameter("Disabled", BrandData.Brand.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (BrandData.Brand.LogoURL != "")
                        Params.Add(new SqlParameter("LogoURL", BrandData.Brand.LogoURL));
                    if (BrandData.Brand.CoverImageURL != "")
                        Params.Add(new SqlParameter("CoverImageURL", BrandData.Brand.CoverImageURL));

                    if (BrandData.Departments != null)
                    {
                        DataTable departments;
                        using (departments = new DataTable())
                        {
                            departments.Columns.Add("Id", typeof(int));
                            departments.Columns.Add("Param1", typeof(string));
                            departments.Columns.Add("Param2", typeof(string));
                            foreach (BrandDepartmentClass x in BrandData.Departments)
                                departments.Rows.Add(x.Department.Id, x.ImageURL, x.WebImageURL);
                        }
                        var departmentsList = new SqlParameter("@Departments", SqlDbType.Structured);
                        departmentsList.Value = departments;

                        Params.Add(departmentsList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    BrandDataClass brandData = new BrandDataClass();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass id;
                        reader.Read();
                        id = new BrandClass().PopulateBrand(fieldNames, reader);

                        id.Order = 1;
                        brandData.Brand = id;
                        List<BrandDepartmentClass> brandDepartments = new List<BrandDepartmentClass>();
                        if (reader.NextResult())
                        {
                            BrandDepartmentClass brandDepartment;
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            int order = 0;
                            while (reader.Read())
                            {
                                brandDepartment = new BrandDepartmentClass();
                                order = order + 1;
                                brandDepartment.Department = new ItemDepartmentClass();

                                if (fieldNames.Contains("Id"))
                                    if (!Convert.IsDBNull(reader["Id"]))
                                        brandDepartment.Id = Convert.ToInt32(reader["Id"]);

                                if (fieldNames.Contains("DepartmentId"))
                                    if (!Convert.IsDBNull(reader["DepartmentId"]))
                                        brandDepartment.Department.Id = Convert.ToInt32(reader["DepartmentId"]);

                                if (fieldNames.Contains("DepartmentArabicName"))
                                    if (!Convert.IsDBNull(reader["DepartmentArabicName"]))
                                        brandDepartment.Department.ArabicName = reader["DepartmentArabicName"].ToString();

                                if (fieldNames.Contains("DepartmentEnglishName"))
                                    if (!Convert.IsDBNull(reader["DepartmentEnglishName"]))
                                        brandDepartment.Department.EnglishName = reader["DepartmentEnglishName"].ToString();

                                if (fieldNames.Contains("ImageURL"))
                                    if (!Convert.IsDBNull(reader["ImageURL"]))
                                        brandDepartment.ImageURL = reader["ImageURL"].ToString();

                                if (fieldNames.Contains("WebImageURL"))
                                    if (!Convert.IsDBNull(reader["WebImageURL"]))
                                        brandDepartment.WebImageURL = reader["WebImageURL"].ToString();

                                brandDepartment.Department.Order = order;
                                brandDepartments.Add(brandDepartment);
                            }
                        }

                        brandData.Departments = brandDepartments;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = brandData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateBrandData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Brands")]
        public ResultClass<BrandDataClass> UpdateBrandData(int LoggedUser, BrandDataClass BrandData)
        {
            ResultClass<BrandDataClass> result = new ResultClass<BrandDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateBrandData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", BrandData.Brand.ArabicName),
                  new SqlParameter("EnglishName", BrandData.Brand.EnglishName),
                  new SqlParameter("Id", BrandData.Brand.Id),
                  new SqlParameter("Code", BrandData.Brand.Code),
                  new SqlParameter("Disabled", BrandData.Brand.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (BrandData.Brand.LogoURL != "")
                        Params.Add(new SqlParameter("LogoURL", BrandData.Brand.LogoURL));
                    if (BrandData.Brand.CoverImageURL != "")
                        Params.Add(new SqlParameter("CoverImageURL", BrandData.Brand.CoverImageURL));

                    if (BrandData.Departments != null)
                    {
                        DataTable departments;
                        using (departments = new DataTable())
                        {
                            departments.Columns.Add("Id", typeof(int));
                            departments.Columns.Add("Param1", typeof(string));
                            departments.Columns.Add("Param2", typeof(string));
                            foreach (BrandDepartmentClass x in BrandData.Departments)
                                departments.Rows.Add(x.Department.Id, x.ImageURL);
                        }
                        var departmentsList = new SqlParameter("@Departments", SqlDbType.Structured);
                        departmentsList.Value = departments;

                        Params.Add(departmentsList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    BrandDataClass brandData = new BrandDataClass();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass id;
                        reader.Read();
                        id = new BrandClass().PopulateBrand(fieldNames, reader);

                        id.Order = 1;
                        brandData.Brand = id;
                        List<BrandDepartmentClass> brandDepartments = new List<BrandDepartmentClass>();
                        if (reader.NextResult())
                        {
                            BrandDepartmentClass brandDepartment;
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            int order = 0;
                            while (reader.Read())
                            {
                                brandDepartment = new BrandDepartmentClass();
                                order = order + 1;
                                brandDepartment.Department = new ItemDepartmentClass();

                                if (fieldNames.Contains("Id"))
                                    if (!Convert.IsDBNull(reader["Id"]))
                                        brandDepartment.Id = Convert.ToInt32(reader["Id"]);

                                if (fieldNames.Contains("DepartmentId"))
                                    if (!Convert.IsDBNull(reader["DepartmentId"]))
                                        brandDepartment.Department.Id = Convert.ToInt32(reader["DepartmentId"]);

                                if (fieldNames.Contains("DepartmentArabicName"))
                                    if (!Convert.IsDBNull(reader["DepartmentArabicName"]))
                                        brandDepartment.Department.ArabicName = reader["DepartmentArabicName"].ToString();

                                if (fieldNames.Contains("DepartmentEnglishName"))
                                    if (!Convert.IsDBNull(reader["DepartmentEnglishName"]))
                                        brandDepartment.Department.EnglishName = reader["DepartmentEnglishName"].ToString();

                                if (fieldNames.Contains("ImageURL"))
                                    if (!Convert.IsDBNull(reader["ImageURL"]))
                                        brandDepartment.ImageURL = reader["ImageURL"].ToString();

                                if (fieldNames.Contains("WebImageURL"))
                                    if (!Convert.IsDBNull(reader["WebImageURL"]))
                                        brandDepartment.WebImageURL = reader["WebImageURL"].ToString();

                                brandDepartment.Department.Order = order;
                                brandDepartments.Add(brandDepartment);
                            }
                        }

                        brandData.Departments = brandDepartments;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = brandData;
                        return result;
                    }

                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateBrandData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Brands")]
        public ResultClass<BrandClass> CreateBrand(int LoggedUser, BrandClass Brand)
        {
            ResultClass<BrandClass> result = new ResultClass<BrandClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertBrand";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", Brand.ArabicName),
                  new SqlParameter("EnglishName", Brand.EnglishName),
                  new SqlParameter("Code", Brand.Code),
                  new SqlParameter("Disabled", Brand.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (Brand.LogoURL != "")
                        Params.Add(new SqlParameter("LogoURL", Brand.LogoURL));
                    if (Brand.CoverImageURL != "")
                        Params.Add(new SqlParameter("CoverImageURL", Brand.CoverImageURL));
                        

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass brand;
                        reader.Read();
                        brand = new BrandClass().PopulateBrand(fieldNames, reader);

                        brand.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = brand;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateBrand", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Brands")]
        public ResultClass<BrandClass> UpdateBrand(int LoggedUser, BrandClass Brand)
        {
            ResultClass<BrandClass> result = new ResultClass<BrandClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateBrand";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Brand.Id),
                  new SqlParameter("ArabicName", Brand.ArabicName),
                  new SqlParameter("EnglishName", Brand.EnglishName),
                  new SqlParameter("Code", Brand.Code),
                  new SqlParameter("Disabled", Brand.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (Brand.LogoURL != "")
                        Params.Add(new SqlParameter("LogoURL", Brand.LogoURL));
                    if (Brand.CoverImageURL != "")
                        Params.Add(new SqlParameter("CoverImageURL", Brand.CoverImageURL));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass brand;
                        reader.Read();
                        brand = new BrandClass().PopulateBrand(fieldNames, reader);

                        brand.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = brand;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateBrand", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Brands")]
        public ResultClass<BrandClass> DeleteBrand(int LoggedUser, int Id)
        {
            ResultClass<BrandClass> result = new ResultClass<BrandClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteBrand";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BrandClass brand;
                        reader.Read();
                        brand = new BrandClass().PopulateBrand(fieldNames, reader);

                        brand.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = brand;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteBrand", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("Colors")]
        public ResultClass<List<ColorClass>> GetColors()
        {
            ResultClass<List<ColorClass>> result = new ResultClass<List<ColorClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetColors";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ColorClass> Colors = new List<ColorClass>();
                        ColorClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ColorClass().PopulateColor(fieldNames, reader);

                            id.Order = order;
                            Colors.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Colors;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetColors", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Colors")]
        public ResultClass<ColorClass> GetColor(int Id)
        {
            ResultClass<ColorClass> result = new ResultClass<ColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetColors";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ColorClass id;
                        reader.Read();
                        id = new ColorClass().PopulateColor(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Colors")]
        public ResultClass<ColorClass> CreateColor(int LoggedUser, ColorClass Color)
        {
            ResultClass<ColorClass> result = new ResultClass<ColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertColor";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ArabicName", Color.ArabicName),
                  new SqlParameter("EnglishName", Color.EnglishName),
                  new SqlParameter("Code", Color.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ColorClass color;
                        reader.Read();
                        color = new ColorClass().PopulateColor(fieldNames, reader);


                        color.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = color;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Colors")]
        public ResultClass<ColorClass> UpdateColor(int LoggedUser, ColorClass Color)
        {
            ResultClass<ColorClass> result = new ResultClass<ColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateColor";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Color.Id),
                  new SqlParameter("ArabicName", Color.ArabicName),
                  new SqlParameter("EnglishName", Color.EnglishName),
                  new SqlParameter("Code", Color.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ColorClass color;
                        reader.Read();
                        color = new ColorClass().PopulateColor(fieldNames, reader);

                        color.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = color;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Colors")]
        public ResultClass<ColorClass> DeleteColor(int LoggedUser, int Id)
        {
            ResultClass<ColorClass> result = new ResultClass<ColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteColor";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ColorClass color;
                        reader.Read();
                        color = new ColorClass().PopulateColor(fieldNames, reader);

                        color.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = color;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("Countries")]
        public ResultClass<List<CountryClass>> GetCountries(bool? ForSignUp)
        {
            ResultClass<List<CountryClass>> result = new ResultClass<List<CountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCountries";
                    if (ForSignUp != null)
                    {
                        if (ForSignUp == true)
                        {
                            List<SqlParameter> Params = new List<SqlParameter>()
                        {
                            new SqlParameter("ForSignUp", ForSignUp),
                        };
                            cmd.Parameters.AddRange(Params.ToArray());
                        }
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CountryClass> Countries = new List<CountryClass>();
                        CountryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CountryClass().PopulateCountry(fieldNames, reader);

                            id.Order = order;
                            Countries.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Countries;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCountries", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Countries")]
        public ResultClass<CountryClass> GetCountry(int Id)
        {
            ResultClass<CountryClass> result = new ResultClass<CountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CountryClass id;
                        reader.Read();
                        id = new CountryClass().PopulateCountry(fieldNames, reader);


                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Countries")]
        public ResultClass<CountryClass> CreateCountry_ForMatjar(int LoggedUser, CountryClass Country)
        {
            ResultClass<CountryClass> result = new ResultClass<CountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", Country.ArabicName),
                  new SqlParameter("EnglishName", Country.EnglishName),
                  new SqlParameter("Code", Country.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ShowInSignUp", Country.ShowInSignUp),
                  new SqlParameter("PolicyArabicTitle", Country.PolicyArabicTitle),
                  new SqlParameter("PolicyEnglishTitle", Country.PolicyEnglishTitle),
                  new SqlParameter("PolicyArabicDescription", Country.PolicyArabicDescription),
                  new SqlParameter("PolicyEnglishDescription", Country.PolicyEnglishDescription),
                  new SqlParameter("PhoneDigitsCount", Country.PhoneDigitsCount),
                  new SqlParameter("CountryCode", Country.CountryCode),
                  new SqlParameter("PhoneSuffixes", Country.PhoneSuffixes),
                  new SqlParameter("SupportPhoneNumber", Country.SupportPhoneNumber),
               };


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CountryClass country;
                        reader.Read();
                        country = new CountryClass().PopulateCountry(fieldNames, reader);

                        country.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = country;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<CountryClass> CreateCountry(int LoggedUser, CountryClass Country)
        {
            ResultClass<CountryClass> result = new ResultClass<CountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", Country.ArabicName),
                  new SqlParameter("EnglishName", Country.EnglishName),
                  new SqlParameter("Code", Country.Code),
                  new SqlParameter("PolicyArabicTitle", Country.PolicyArabicTitle),
                  new SqlParameter("PolicyEnglishTitle", Country.PolicyEnglishTitle),
                  new SqlParameter("PolicyArabicDescription", Country.PolicyArabicDescription),
                  new SqlParameter("PolicyEnglishDescription", Country.PolicyEnglishDescription),
                  new SqlParameter("PhoneDigitsCount", Country.PhoneDigitsCount),
                  new SqlParameter("PhoneSuffixes", Country.PhoneSuffixes),
                  new SqlParameter("CountryCode", Country.CountryCode),
                  new SqlParameter("SupportPhoneNumber", Country.SupportPhoneNumber),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CountryClass country;
                        reader.Read();
                        country = new CountryClass().PopulateCountry(fieldNames, reader);

                        country.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = country;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<CountryClass> UpdateCountry(int LoggedUser, CountryClass Country)
        {
            ResultClass<CountryClass> result = new ResultClass<CountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Country.Id),
                  new SqlParameter("ArabicName", Country.ArabicName),
                  new SqlParameter("EnglishName", Country.EnglishName),
                  new SqlParameter("Code", Country.Code),
                  new SqlParameter("PolicyArabicTitle", Country.PolicyArabicTitle),
                  new SqlParameter("PolicyEnglishTitle", Country.PolicyEnglishTitle),
                  new SqlParameter("PolicyArabicDescription", Country.PolicyArabicDescription),
                  new SqlParameter("PolicyEnglishDescription", Country.PolicyEnglishDescription),
                  new SqlParameter("PhoneDigitsCount", Country.PhoneDigitsCount),
                  new SqlParameter("PhoneSuffixes", Country.PhoneSuffixes),
                  new SqlParameter("CountryCode", Country.CountryCode),
                  new SqlParameter("SupportPhoneNumber", Country.SupportPhoneNumber),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CountryClass country;
                        reader.Read();
                        country = new CountryClass().PopulateCountry(fieldNames, reader);

                        country.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = country;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Countries")]
        public ResultClass<CountryClass> UpdateCountry_ForMatjar(int LoggedUser, CountryClass Country)
        {
            ResultClass<CountryClass> result = new ResultClass<CountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Country.Id),
                  new SqlParameter("ArabicName", Country.ArabicName),
                  new SqlParameter("EnglishName", Country.EnglishName),
                  new SqlParameter("Code", Country.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ShowInSignUp", Country.ShowInSignUp),
                  new SqlParameter("PolicyArabicTitle", Country.PolicyArabicTitle),
                  new SqlParameter("PolicyEnglishTitle", Country.PolicyEnglishTitle),
                  new SqlParameter("PolicyArabicDescription", Country.PolicyArabicDescription),
                  new SqlParameter("PolicyEnglishDescription", Country.PolicyEnglishDescription),
                  new SqlParameter("PhoneDigitsCount", Country.PhoneDigitsCount),
                  new SqlParameter("PhoneSuffixes", Country.PhoneSuffixes),
                  new SqlParameter("CountryCode", Country.CountryCode),
                  new SqlParameter("SupportPhoneNumber", Country.SupportPhoneNumber),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CountryClass country;
                        reader.Read();
                        country = new CountryClass().PopulateCountry(fieldNames, reader);

                        country.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = country;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Countries")]
        public ResultClass<CountryClass> DeleteCountry(int LoggedUser, int Id)
        {
            ResultClass<CountryClass> result = new ResultClass<CountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CountryClass country;
                        reader.Read();
                        country = new CountryClass().PopulateCountry(fieldNames, reader);

                        country.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = country;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        [SwaggerWcfTag("Currencies")]
        public ResultClass<List<CurrencyClass>> GetCurrencies(bool FilterByDisabled, bool ShowDisabled)
        {
            ResultClass<List<CurrencyClass>> result = new ResultClass<List<CurrencyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCurrencies";

                    cmd.Parameters.Add(new SqlParameter("FilterByDisabled", FilterByDisabled));
                    cmd.Parameters.Add(new SqlParameter("ShowDisabled", ShowDisabled));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CurrencyClass> Currencies = new List<CurrencyClass>();
                        CurrencyClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CurrencyClass().PopulateCurrency(fieldNames, reader);

                            id.Order = order;
                            Currencies.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Currencies;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCurrencies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Currencies")]
        public ResultClass<CurrencyClass> GetCurrency(int Id)
        {
            ResultClass<CurrencyClass> result = new ResultClass<CurrencyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCurrencies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CurrencyClass id;
                        reader.Read();
                        id = new CurrencyClass().PopulateCurrency(fieldNames, reader);


                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCurrency", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Currencies")]
        public ResultClass<CurrencyClass> CreateCurrency(int LoggedUser, CurrencyClass Currency)
        {
            ResultClass<CurrencyClass> result = new ResultClass<CurrencyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCurrency";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ArabicName", Currency.ArabicName),
                  new SqlParameter("EnglishName", Currency.EnglishName),
                  new SqlParameter("ArabicCode", Currency.ArabicCode),
                  new SqlParameter("EnglishCode", Currency.EnglishCode),
                  new SqlParameter("Equal", Currency.Equal),
                  new SqlParameter("IsMainCurrency", Currency.IsMainCurrency),
                  new SqlParameter("CalculationType", Currency.CalculationType),
                  new SqlParameter("Disabled", Currency.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };
                    if (Currency.CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", Currency.CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CurrencyClass currency;
                        reader.Read();
                        currency = new CurrencyClass().PopulateCurrency(fieldNames, reader);

                        currency.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = currency;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCurrency", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Currencies")]
        public ResultClass<CurrencyClass> UpdateCurrency(int LoggedUser, CurrencyClass Currency)
        {
            ResultClass<CurrencyClass> result = new ResultClass<CurrencyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCurrency";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("Id", Currency.Id),
                  new SqlParameter("ArabicName", Currency.ArabicName),
                  new SqlParameter("EnglishName", Currency.EnglishName),
                  new SqlParameter("ArabicCode", Currency.ArabicCode),
                  new SqlParameter("EnglishCode", Currency.EnglishCode),
                  new SqlParameter("Equal", Currency.Equal),
                  new SqlParameter("IsMainCurrency", Currency.IsMainCurrency),
                  new SqlParameter("CalculationType", Currency.CalculationType),
                  new SqlParameter("Disabled", Currency.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };
                    if (Currency.CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", Currency.CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CurrencyClass currency;
                        reader.Read();
                        currency = new CurrencyClass().PopulateCurrency(fieldNames, reader);

                        currency.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = currency;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCurrency", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Currencies")]
        public ResultClass<CurrencyClass> DeleteCurrency(int LoggedUser, int Id)
        {
            ResultClass<CurrencyClass> result = new ResultClass<CurrencyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCurrency";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CurrencyClass currency;
                        reader.Read();
                        currency = new CurrencyClass().PopulateCurrency(fieldNames, reader);

                        currency.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = currency;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteCurrency", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("CountriesCurrencies")]
        public ResultClass<List<CountryCurrencyClass>> GetCountryCurrencies(int? CountryId, int? CurrencyId, bool FilterByDisabled, bool ShowDisabled)
        {
            ResultClass<List<CountryCurrencyClass>> result = new ResultClass<List<CountryCurrencyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCountryCurrencies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("FilterByDisabled", FilterByDisabled),
                  new SqlParameter("ShowDisabled", ShowDisabled)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    if (CountryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));
                    if (CurrencyId > 0)
                        cmd.Parameters.Add(new SqlParameter("CurrencyId", CurrencyId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<CountryCurrencyClass> list = new List<CountryCurrencyClass>();
                        CountryCurrencyClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new CountryCurrencyClass().PopulateCountryCurrency(fieldNames, reader);

                            id.Order = order;

                            list.Add(id);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = list;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCountryCurrencies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("CountriesCurrencies")]
        public ResultClass<List<CountryCurrencyClass>> CreateCountryCurrencies(int LoggedUser, int CountryId, List<int> CurrencyIds, bool Disabled)
        {
            ResultClass<List<CountryCurrencyClass>> result = new ResultClass<List<CountryCurrencyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCountryCurrencies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CountryId", CountryId),
                  new SqlParameter("Disabled", Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };
                    //CurrencyIds
                    if (CurrencyIds != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in CurrencyIds)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CurrencyIds", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CountryCurrencyClass> list = new List<CountryCurrencyClass>();
                        CountryCurrencyClass id;
                        int order = 0;

                        while (reader.Read())
                        {
                            order += 1;
                            id = new CountryCurrencyClass().PopulateCountryCurrency(fieldNames, reader);
                            id.Order = order;

                            list.Add(id);
                        }


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = list;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCountryCurrencies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("CountriesCurrencies")]
        public ResultClass<List<CountryCurrencyClass>> DeleteCountryCurrencies(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<CountryCurrencyClass>> result = new ResultClass<List<CountryCurrencyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCountryCurrency";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])};

                    //Ids
                    if (Ids != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Ids)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Ids", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CountryCurrencyClass> list = new List<CountryCurrencyClass>();
                        CountryCurrencyClass id;
                        int order = 0;

                        while (reader.Read())
                        {
                            order += 1;
                            id = new CountryCurrencyClass().PopulateCountryCurrency(fieldNames, reader);
                            id.Order = order;

                            list.Add(id);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = list;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteCountryCurrencies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //Categories
        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryClass> GetCategory(int LoggedUser, int Id)
        {
            ResultClass<CategoryClass> result = new ResultClass<CategoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategories";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }

                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass id;
                        reader.Read();
                        id = new CategoryClass().PopulateCategory(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryDataClass> GetCategoryData(int LoggedUser, int Id)
        {
            ResultClass<CategoryDataClass> result = new ResultClass<CategoryDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategoryData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("CategoryId", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    CategoryDataClass categoryData = new CategoryDataClass();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }
                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass id;
                        reader.Read();
                        id = new CategoryClass().PopulateCategory(fieldNames, reader);
                        categoryData.CategoryClass = id;

                        reader.NextResult(); //to skip the category parents result

                        if ((reader.NextResult()) && (reader.HasRows))
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<CategoryCountryClass> countries = new List<CategoryCountryClass>();
                            CategoryCountryClass categoryCountry;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                categoryCountry = new CategoryCountryClass().PopulateCategoryCountry(fieldNames, reader);

                                categoryCountry.Order = order;
                                countries.Add(categoryCountry);
                            }
                            categoryData.Countries = countries;
                        }
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = categoryData;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategoryData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryClass> CreateCategory(int LoggedUser, CategoryClass Category)
        {
            ResultClass<CategoryClass> result = new ResultClass<CategoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCategory";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ArabicName", Category.ArabicName),
                  new SqlParameter("EnglishName", Category.EnglishName),
                  new SqlParameter("Code", Category.Code),
                  new SqlParameter("Type", Category.Type),
                  new SqlParameter("ArabicDescription", Category.ArabicDescription),
                  new SqlParameter("EnglishDescription", Category.EnglishDescription),
                  new SqlParameter("ParentId", Category.ParentId),
                  new SqlParameter("Disabled", Category.Disabled),
                  new SqlParameter("Notes", Category.Notes),
                  new SqlParameter("ImageURL", Category.ImageURL),
                  new SqlParameter("ShowName", Category.ShowName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass category;
                        reader.Read();
                        category = new CategoryClass().PopulateCategory(fieldNames, reader);


                        category.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = category;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCategory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryDataClass> CreateCategoryData(int LoggedUser, CategoryClass Category, List<int> Countries)
        {
            ResultClass<CategoryDataClass> result = new ResultClass<CategoryDataClass>();
            CategoryDataClass categoryDataClass = new CategoryDataClass();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCategoryData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("ArabicName", Category.ArabicName),
                        new SqlParameter("EnglishName", Category.EnglishName),
                        new SqlParameter("Code", Category.Code),
                        new SqlParameter("Type", Category.Type),
                        new SqlParameter("ArabicDescription", Category.ArabicDescription),
                        new SqlParameter("EnglishDescription", Category.EnglishDescription),
                        new SqlParameter("ParentId", Category.ParentId),
                        new SqlParameter("Disabled", Category.Disabled),
                        new SqlParameter("Notes", Category.Notes),
                        new SqlParameter("ImageURL", Category.ImageURL),
                        new SqlParameter("ShowName", Category.ShowName),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    //Country
                    if (Countries != null)
                    {
                        DataTable Countrytable;
                        using (Countrytable = new DataTable())
                        {
                            Countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                Countrytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Countries", SqlDbType.Structured);
                        CList.Value = Countrytable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass category;
                        reader.Read();
                        category = new CategoryClass().PopulateCategory(fieldNames, reader);

                        categoryDataClass.CategoryClass = category;

                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<CategoryCountryClass> CountriesList = new List<CategoryCountryClass>();
                                CategoryCountryClass categoryCountry;

                                while (reader.Read())
                                {
                                    categoryCountry = new CategoryCountryClass().PopulateCategoryCountry(fieldNames, reader);

                                    CountriesList.Add(categoryCountry);
                                }
                                categoryDataClass.Countries = CountriesList;
                            }
                        }

                        category.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = categoryDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCategoryData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryClass> UpdateCategory(int LoggedUser, CategoryClass Category)
        {
            ResultClass<CategoryClass> result = new ResultClass<CategoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCategory";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Category.Id),
                  new SqlParameter("ArabicName", Category.ArabicName),
                  new SqlParameter("EnglishName", Category.EnglishName),
                  new SqlParameter("Code", Category.Code),
                  new SqlParameter("Type", Category.Type),
                  new SqlParameter("ImageURL", Category.ImageURL),
                  new SqlParameter("ArabicDescription", Category.ArabicDescription),
                  new SqlParameter("EnglishDescription", Category.EnglishDescription),
                  new SqlParameter("ParentId", Category.ParentId),
                  new SqlParameter("Disabled", Category.Disabled),
                  new SqlParameter("Notes", Category.Notes),
                  new SqlParameter("ShowName", Category.ShowName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass category;
                        reader.Read();
                        category = new CategoryClass().PopulateCategory(fieldNames, reader);

                        category.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = category;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCategory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //TODO: didn't work on this yet
        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryDataClass> UpdateCategoryData(int LoggedUser, CategoryClass Category, List<int> Countries)
        {
            ResultClass<CategoryDataClass> result = new ResultClass<CategoryDataClass>();
            CategoryDataClass categoryDataClass = new CategoryDataClass();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCategoryData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("Id", Category.Id),
                          new SqlParameter("ArabicName", Category.ArabicName),
                          new SqlParameter("EnglishName", Category.EnglishName),
                          new SqlParameter("Code", Category.Code),
                          new SqlParameter("Type", Category.Type),
                          new SqlParameter("ImageURL", Category.ImageURL),
                          new SqlParameter("ArabicDescription", Category.ArabicDescription),
                          new SqlParameter("EnglishDescription", Category.EnglishDescription),
                          new SqlParameter("ParentId", Category.ParentId),
                          new SqlParameter("Disabled", Category.Disabled),
                          new SqlParameter("Notes", Category.Notes),
                          new SqlParameter("ShowName", Category.ShowName),
                          new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                       };

                    //Country
                    if (Countries != null)
                    {
                        DataTable Countrytable;
                        using (Countrytable = new DataTable())
                        {
                            Countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                Countrytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Countries", SqlDbType.Structured);
                        CList.Value = Countrytable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass category;
                        reader.Read();
                        category = new CategoryClass().PopulateCategory(fieldNames, reader);
                        categoryDataClass.CategoryClass = category;

                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<CategoryCountryClass> CountriesList = new List<CategoryCountryClass>();
                                CategoryCountryClass categoryCountry;

                                while (reader.Read())
                                {
                                    categoryCountry = new CategoryCountryClass().PopulateCategoryCountry(fieldNames, reader);

                                    CountriesList.Add(categoryCountry);
                                }
                                categoryDataClass.Countries = CountriesList;
                            }
                        }

                        category.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = categoryDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateCategoryData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoryClass> DeleteCategory(int LoggedUser, int Id)
        {
            ResultClass<CategoryClass> result = new ResultClass<CategoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCategory";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CategoryClass category;
                        reader.Read();
                        category = new CategoryClass().PopulateCategory(fieldNames, reader);

                        category.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = category;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteCategory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<List<CategoryClass>> GetCategories(int LoggedUser, bool FilterByParentId, int ParentId,
          int Type, int PageId, int RecordsCount, bool FilterByDisabled, bool ShowDisabled)
        {
            ResultClass<List<CategoryClass>> result = new ResultClass<List<CategoryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategories";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount)
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    if (FilterByParentId == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByParentId", FilterByParentId));
                        cmd.Parameters.Add(new SqlParameter("ParentId", ParentId));
                    }

                    if (Type > 0)
                        cmd.Parameters.Add(new SqlParameter("Type", Type));

                    if (FilterByDisabled == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByDisabled", FilterByDisabled));
                        cmd.Parameters.Add(new SqlParameter("ShowDisabled", ShowDisabled));
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }

                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Categories.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Categories;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategories", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<List<CategoryClass>> GetMainCategoriesForCategory(int CategoryId)
        {
            ResultClass<List<CategoryClass>> result = new ResultClass<List<CategoryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetMainCategoriesForCategory";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CategoryId", CategoryId),
               };


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.Order = order;
                            Categories.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Categories;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategories", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<CategoriesWithMapClass> GetCategoriesWithMap(int LoggedUser, string CountryName, bool FilterByParentId,
        int ParentId, int Type, int PageId, int RecordsCount)
        {
            ResultClass<CategoriesWithMapClass> result = new ResultClass<CategoriesWithMapClass>();
            result.Result = new CategoriesWithMapClass();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategories";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    cmd.Parameters.AddRange(Params.ToArray());
                    if (FilterByParentId == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByParentId", FilterByParentId));
                        cmd.Parameters.Add(new SqlParameter("ParentId", ParentId));
                    }

                    if (Type > 0)
                        cmd.Parameters.Add(new SqlParameter("Type", Type));


                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }

                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.TotalCount = totalCont;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Categories.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result.Categories = Categories;

                        if ((reader.NextResult()) && (reader.HasRows))
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<CategoryMapClass> CategoriesMap = new List<CategoryMapClass>();
                            CategoryMapClass map;
                            while (reader.Read())
                            {
                                map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);


                                CategoriesMap.Add(map);

                            }
                            result.Result.CategoriesMap = CategoriesMap;
                        }
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategoriesWithMap", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<List<CategoryClass>> SearchCategories(int LoggedUser, bool FilterByParentId, int ParentId,
           int Type, int PageId, int RecordsCount, string ArabicName, string Code)
        {
            ResultClass<List<CategoryClass>> result = new ResultClass<List<CategoryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchCategoriesNew";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    if (FilterByParentId == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByParentId", FilterByParentId));
                        cmd.Parameters.Add(new SqlParameter("ParentId", ParentId));
                    }

                    if (Type > 0)
                        cmd.Parameters.Add(new SqlParameter("Type", Type));

                    if (!String.IsNullOrWhiteSpace(ArabicName))
                        cmd.Parameters.Add(new SqlParameter("ArabicName", ArabicName));

                    if (!String.IsNullOrWhiteSpace(Code))
                        cmd.Parameters.Add(new SqlParameter("Code", Code));


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Categories.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Categories;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategories", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Categories")]
        public ResultClass<IEnumerable<CategoryTreeClass<CategoryClass>>> GetCategoriesTree(int LoggedUser, string CountryName, int PageId, int RecordsCount, string Language = "ar")
        {
            ResultClass<IEnumerable<CategoryTreeClass<CategoryClass>>> result = new ResultClass<IEnumerable<CategoryTreeClass<CategoryClass>>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategories";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }

                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.TotalCount = totalCont;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Categories.Add(id);
                        }

                        var root = GenericHelpers.GenerateTree(Categories, c => c.Id, c => c.ParentId, Language);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = root;

                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategoriesTree", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }





        //Items

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemClass> GetItem(int Id)
        {
            ResultClass<ItemClass> result = new ResultClass<ItemClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItems";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemClass id;
                        reader.Read();
                        id = new ItemClass().PopulateItemClass(fieldNames, reader);


                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass>> GetItems(int LoggedUser, int CategoryId, int PageId, int RecordsCount, bool IsLikes, bool IsWishlist)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 900000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItems";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };


                    if (CategoryId > 0)
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    if (IsLikes)
                        Params.Add(new SqlParameter("IsLikes", IsLikes));

                    if (IsWishlist)
                        Params.Add(new SqlParameter("IsWishlist", IsWishlist));


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass_Short>> GetItems_Short(int LoggedUser, int CategoryId, int PageId, int RecordsCount, bool IsLikes, bool IsWishlist)
        {
            ResultClass<List<ItemClass_Short>> result = new ResultClass<List<ItemClass_Short>>();

            var apiResult = GetItems(LoggedUser, CategoryId, PageId, RecordsCount, IsLikes, IsWishlist);

            result.Code = apiResult.Code;
            result.Message = apiResult.Message;
            if (apiResult.Result != null)
                result.Result = new ItemClass_Short().PopulateItems(apiResult.Result);
            else
                result.Result = new List<ItemClass_Short>();

            return result;
        }

        /*[SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass>> GetItems(int LoggedUser, int CategoryId, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItems";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };


                    if (CategoryId > 0)
                        Params.Add(new SqlParameter("CategoryId", CategoryId));


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass_Short>> GetItems_Short(int LoggedUser, int CategoryId, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass_Short>> result = new ResultClass<List<ItemClass_Short>>();

            var apiResult = GetItems(LoggedUser, CategoryId, PageId, RecordsCount);

            result.Code = apiResult.Code;
            result.Message = apiResult.Message;
            result.Result = new ItemClass_Short().PopulateItems(apiResult.Result);

            return result;
        } */

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemClass> CreateItem(int LoggedUser, ItemClass Item)
        {
            ResultClass<ItemClass> result = new ResultClass<ItemClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ArabicName", Item.ArabicName),
                  new SqlParameter("EnglishName", Item.EnglishName),
                  new SqlParameter("Code", Item.Code),
                  new SqlParameter("ArabicDescription", Item.ArabicDescription),
                  new SqlParameter("EnglishDescription", Item.EnglishDescription),
                  new SqlParameter("BrandId", Item.BrandId),
                  //new SqlParameter("ColorId", Item.ColorId),
                  //new SqlParameter("Size", Item.Size),
                  new SqlParameter("CountryId", Item.CountryId),
                  //new SqlParameter("Price", Item.Price),
                  //new SqlParameter("RequiredPoints", Item.RequiredPoints),
                  new SqlParameter("Disabled", Item.Disabled),
                  new SqlParameter("Notes", Item.Notes),
                  new SqlParameter("ImageURL", Item.ImageURL),
                  new SqlParameter("CreatedBy", Item.CreatedBy),
                  new SqlParameter("UpdatedBy", Item.UpdatedBy),
                  new SqlParameter("CreateDate", Item.CreateDate),
                  new SqlParameter("UpdateDate", Item.UpdateDate),
                  new SqlParameter("CategoryId", Item.CategoryId),
                  new SqlParameter("SizeImageURL", Item.SizeImageURL),
                  new SqlParameter("ItemTypeId", Item.ItemTypeId),
                  new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId),
                  new SqlParameter("ItemURL", Item.ItemURL),
                  new SqlParameter("ArabicTitle", Item.ArabicTitle),
                  new SqlParameter("EnglishTitle", Item.EnglishTitle),
                  new SqlParameter("ShowCarouselInItemsList", Item.ShowCarouselInItemsList),
                  new SqlParameter("ShowDescriptionInItemsList", Item.ShowDescriptionInItemsList),



                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    if (Item.GrantedPoints > 0)
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", Item.GrantedPoints));

                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemClass item;
                        reader.Read();
                        item = new ItemClass().PopulateItemClass(fieldNames, reader);


                        item.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = item;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemClass> UpdateItem(int LoggedUser, ItemClass Item)
        {
            ResultClass<ItemClass> result = new ResultClass<ItemClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("Id", Item.Id),
                  new SqlParameter("ArabicName", Item.ArabicName),
                  new SqlParameter("EnglishName", Item.EnglishName),
                  new SqlParameter("Code", Item.Code),
                  new SqlParameter("ArabicDescription", Item.ArabicDescription),
                  new SqlParameter("EnglishDescription", Item.EnglishDescription),
                  new SqlParameter("BrandId", Item.BrandId),
                  //new SqlParameter("ColorId", Item.ColorId),
                  //new SqlParameter("Size", Item.Size),
                  new SqlParameter("CountryId", Item.CountryId),
                  //new SqlParameter("Price", Item.Price),
                  //new SqlParameter("RequiredPoints", Item.RequiredPoints),
                  new SqlParameter("Disabled", Item.Disabled),
                  new SqlParameter("Notes", Item.Notes),
                  new SqlParameter("ImageURL", Item.ImageURL),
                  new SqlParameter("UpdatedBy", Item.UpdatedBy),
                  new SqlParameter("UpdateDate", Item.UpdateDate),
                  new SqlParameter("CategoryId", Item.CategoryId),
                  new SqlParameter("SizeImageURL", Item.SizeImageURL),
                  new SqlParameter("ItemTypeId", Item.ItemTypeId),
                  new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId),
                  new SqlParameter("ItemURL", Item.ItemURL),
                  new SqlParameter("ArabicTitle", Item.ArabicTitle),
                  new SqlParameter("EnglishTitle", Item.EnglishTitle),
                  new SqlParameter("ShowCarouselInItemsList", Item.ShowCarouselInItemsList),
                  new SqlParameter("ShowDescriptionInItemsList", Item.ShowDescriptionInItemsList),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };
                    if (Item.GrantedPoints > 0)
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", Item.GrantedPoints));


                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemClass item;
                        reader.Read();
                        item = new ItemClass().PopulateItemClass(fieldNames, reader);


                        item.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = item;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemClass> DeleteItem(int LoggedUser, int Id)
        {
            ResultClass<ItemClass> result = new ResultClass<ItemClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        var item = new ItemClass().PopulateItemClass(fieldNames, reader);


                        item.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = item;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass>> DeleteMultipleItems(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            result.Result = new List<ItemClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteMultipleItems";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };


                    //Ids
                    if (Ids != null)
                    {
                        DataTable itemtable;
                        using (itemtable = new DataTable())
                        {
                            itemtable.Columns.Add("Id", typeof(string));
                            foreach (int x in Ids)
                                itemtable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Ids", SqlDbType.Structured);
                        CList.Value = itemtable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ItemClass> items = new List<ItemClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order = order + 1;
                            var item = new ItemClass().PopulateItemClass(fieldNames, reader);
                            item.Order = order;
                            items.Add(item);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteMultipleItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<bool> UpdateCategoriesItemsOrderNo(int LoggedUser, int Type, List<OrderNoClass> IdsOrders)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOrderNo";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Type", Type)
               };


                    //Ids
                    if (IdsOrders != null)
                    {
                        DataTable ordertable;
                        using (ordertable = new DataTable())
                        {
                            ordertable.Columns.Add("Id", typeof(int));
                            ordertable.Columns.Add("Name", typeof(int));
                            foreach (OrderNoClass x in IdsOrders)
                                ordertable.Rows.Add(x.Id, x.OrderNo);
                        }
                        var CList = new SqlParameter("@IdsOrders", SqlDbType.Structured);
                        CList.Value = ordertable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = false;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteMultipleItems", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemClass>> SearchItems(int LoggedUser, bool FilterByCategoryId, int CategoryId,
        bool FilterByBrandId, int BrandId, bool FilterByColorId, int ColorId, bool FilterByCountryId, int CountryId,
        string Size, bool ShowOnlyItemsWithOffers, string Name, string Code, string Description, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchItems";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("Name", Name),
                  new SqlParameter("Description", Description),
                  new SqlParameter("Size", Size),
                  new SqlParameter("Code", Code),
                  new SqlParameter("ShowOnlyItemsWithOffers", ShowOnlyItemsWithOffers),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    if ((FilterByCategoryId) && (CategoryId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCategoryId", FilterByCategoryId));
                        cmd.Parameters.Add(new SqlParameter("CategoryId", CategoryId));
                    }

                    if ((FilterByColorId) && (ColorId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByColorId", FilterByColorId));
                        cmd.Parameters.Add(new SqlParameter("ColorId", ColorId));
                    }

                    if ((FilterByBrandId) && (BrandId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByBrandId", FilterByBrandId));
                        cmd.Parameters.Add(new SqlParameter("BrandId", BrandId));
                    }

                    if ((FilterByCountryId) && (CountryId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCountryId", FilterByCountryId));
                        cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));
                    }


                    if ((PriceCountryId != null) && (PriceCurrencyId != null) && (PriceTypeId != null))
                    {
                        if ((PriceCountryId > 0) && (PriceCurrencyId > 0) && (PriceTypeId > 0))
                        {
                            cmd.Parameters.Add(new SqlParameter("PriceCountryId", PriceCountryId));
                            cmd.Parameters.Add(new SqlParameter("PriceCurrencyId", PriceCurrencyId));
                            cmd.Parameters.Add(new SqlParameter("PriceTypeId", PriceTypeId));
                        }
                    }

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemOrdersReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass>> SearchItems_Multi(int LoggedUser, ItemSearchClass itemSearch, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchItems_Multi";
                    cmd.CommandTimeout = 1500000;

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ArabicName", itemSearch.ArabicName),
                  new SqlParameter("EnglishName", itemSearch.EnglishName),
                  new SqlParameter("Code", itemSearch.Code),
                  new SqlParameter("ArabicDescription", itemSearch.ArabicDescription),
                  new SqlParameter("EnglishDescription", itemSearch.EnglishDescription),
                  new SqlParameter("Notes", itemSearch.Notes),

                  new SqlParameter("FilterByOffers", itemSearch.FilterByOffers),
                  new SqlParameter("ShowOnlyItemsWithOffers", itemSearch.ShowOnlyItemsWithOffers),
                  new SqlParameter("ShowOnlyItemsWithSpecialOffers", itemSearch.ShowOnlyItemsWithSpecialOffers),

                  new SqlParameter("FilterByDisabled", itemSearch.FilterByDisabled),
                  new SqlParameter("ShowDisabled", itemSearch.Disabled),

                  new SqlParameter("ForReports", itemSearch.ForReports),

                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount)


               };

                    if ((PriceCountryId != null) && (PriceCurrencyId != null) && (PriceTypeId != null))
                    {
                        if ((PriceCountryId > 0) && (PriceCurrencyId > 0) && (PriceTypeId > 0))
                        {
                            cmd.Parameters.Add(new SqlParameter("PriceCountryId", PriceCountryId));
                            cmd.Parameters.Add(new SqlParameter("PriceCurrencyId", PriceCurrencyId));
                            cmd.Parameters.Add(new SqlParameter("PriceTypeId", PriceTypeId));
                        }
                    }

                    if (!string.IsNullOrWhiteSpace(itemSearch.Text))
                        cmd.Parameters.Add(new SqlParameter("Text", itemSearch.Text));

                    if ((itemSearch.FilterByPrice) && ((itemSearch.MinPrice > 0) || (itemSearch.MaxPrice > 0)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByPrice", itemSearch.FilterByPrice));
                        cmd.Parameters.Add(new SqlParameter("MinPrice", itemSearch.MinPrice));
                        cmd.Parameters.Add(new SqlParameter("MaxPrice", itemSearch.MaxPrice));
                    }

                    if ((itemSearch.FilterByRequiredPoints) &&
                        ((itemSearch.MinRequiredPoints > 0) || (itemSearch.MaxRequiredPoints > 0)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByRequiredPoints", itemSearch.FilterByRequiredPoints));
                        cmd.Parameters.Add(new SqlParameter("MinRequiredPoints", itemSearch.MinRequiredPoints));
                        cmd.Parameters.Add(new SqlParameter("MaxRequiredPoints", itemSearch.MaxRequiredPoints));
                    }

                    if ((itemSearch.FilterByCategoryId) && (itemSearch.CategoryIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCategoryId", itemSearch.FilterByCategoryId));
                        //CategoryIds
                        DataTable categoryTable;
                        using (categoryTable = new DataTable())
                        {
                            categoryTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.CategoryIds)
                                categoryTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CategoryIds", SqlDbType.Structured);
                        pList.Value = categoryTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByColorId) && (itemSearch.ColorIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByColorId", itemSearch.FilterByColorId));
                        //ColorIds
                        DataTable colorTable;
                        using (colorTable = new DataTable())
                        {
                            colorTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ColorIds)
                                colorTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ColorIds", SqlDbType.Structured);
                        pList.Value = colorTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterBySizeId) && (itemSearch.SizeIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterBySizeId", itemSearch.FilterBySizeId));
                        //SizeIds
                        DataTable sizeTable;
                        using (sizeTable = new DataTable())
                        {
                            sizeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.SizeIds)
                                sizeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@SizeIds", SqlDbType.Structured);
                        pList.Value = sizeTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByBrandId) && (itemSearch.BrandIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByBrandId", itemSearch.FilterByBrandId));
                        //BrandIds
                        DataTable brandTable;
                        using (brandTable = new DataTable())
                        {
                            brandTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.BrandIds)
                                brandTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@BrandIds", SqlDbType.Structured);
                        pList.Value = brandTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByCountryId) && (itemSearch.CountryIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCountryId", itemSearch.FilterByCountryId));
                        //CountryIds
                        DataTable countryTable;
                        using (countryTable = new DataTable())
                        {
                            countryTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.CountryIds)
                                countryTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CountryIds", SqlDbType.Structured);
                        pList.Value = countryTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByUserGovernorate) && (itemSearch.UserGovernorateIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserGovernorate", itemSearch.FilterByUserGovernorate));
                        //UserGovernorateIds
                        DataTable userGovTable;
                        using (userGovTable = new DataTable())
                        {
                            userGovTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.UserGovernorateIds)
                                userGovTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserGovernorateIds", SqlDbType.Structured);
                        pList.Value = userGovTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByUserCountry) && (itemSearch.UserCountryIds != null) && (itemSearch.UserCountryIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserCountry", itemSearch.FilterByUserCountry));
                        //UserCountriesIds
                        DataTable userConTable;
                        using (userConTable = new DataTable())
                        {
                            userConTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.UserCountryIds)
                                userConTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserCountryIds", SqlDbType.Structured);
                        pList.Value = userConTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByUserCompany) && (itemSearch.UserCompanyIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserCompany", itemSearch.FilterByUserCompany));
                        //UserCompanyIds
                        DataTable userCompanyTable;
                        using (userCompanyTable = new DataTable())
                        {
                            userCompanyTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.UserCompanyIds)
                                userCompanyTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserCompanyIds", SqlDbType.Structured);
                        pList.Value = userCompanyTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByUserType) && (itemSearch.UserTypes.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserType", itemSearch.FilterByUserType));
                        //UserTypes
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.UserTypes)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByItemTypeId) && (itemSearch.ItemTypeIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemTypeId", itemSearch.FilterByItemTypeId));
                        //ItemTypes
                        DataTable itemTypeIdsTable;
                        using (itemTypeIdsTable = new DataTable())
                        {
                            itemTypeIdsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ItemTypeIds)
                                itemTypeIdsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemTypeIds", SqlDbType.Structured);
                        pList.Value = itemTypeIdsTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByItemDepartmentId) && (itemSearch.ItemDepartmentIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemDepartmentId", itemSearch.FilterByItemDepartmentId));
                        //ItemDepartment
                        DataTable itemDepartmentIdsTable;
                        using (itemDepartmentIdsTable = new DataTable())
                        {
                            itemDepartmentIdsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ItemDepartmentIds)
                                itemDepartmentIdsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemDepartmentIds", SqlDbType.Structured);
                        pList.Value = itemDepartmentIdsTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByTags) && (itemSearch.TagsIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByTags", itemSearch.FilterByTags));
                        //Tag
                        DataTable TagsIdsTable;
                        using (TagsIdsTable = new DataTable())
                        {
                            TagsIdsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.TagsIds)
                                TagsIdsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@TagsIds", SqlDbType.Structured);
                        pList.Value = TagsIdsTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByItemIds) && (itemSearch.ItemIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemIds", itemSearch.FilterByItemIds));
                        //BrandIds
                        DataTable itemsTable;
                        using (itemsTable = new DataTable())
                        {
                            itemsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ItemIds)
                                itemsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemIds", SqlDbType.Structured);
                        pList.Value = itemsTable;
                        Params.Add(pList);
                    }



                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);
                            List<ItemImageClass> images;
                            images = GetItemImages(id.Id).Result;
                            id.ItemImages = images;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItems_Multi", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsListShortWithSearchFiltersClass> SearchItems_MultiShortWithFilters(int LoggedUser, ItemSearchClass itemSearch, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId, bool CalcItemsForFilter = false, int SourceId = 0, int SourceType = 0)
        {
            ResultClass<ItemsListShortWithSearchFiltersClass> result = new ResultClass<ItemsListShortWithSearchFiltersClass>();
            try
            {
                try
                {
                    int userId = (APITestingMode) ? 7 : Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"].ToString());
                    RecordUsageData(userId, SourceId, SourceType);
                }
                catch { }

                result.Result = new ItemsListShortWithSearchFiltersClass();
                List<ItemClass_Short> AllItems = new List<ItemClass_Short>();
                if (CalcItemsForFilter)
                    AllItems = SearchItems_Multi_Short(LoggedUser, itemSearch, 1, 99999999, PriceCountryId, PriceCurrencyId, 
                        PriceTypeId).Result;

                result.Result.ItemsList = SearchItems_Multi_Short(LoggedUser, itemSearch, PageId, RecordsCount, PriceCountryId, PriceCurrencyId, PriceTypeId).Result;

                if (CalcItemsForFilter)
                {
                    if (AllItems != null)
                    {
                        if (AllItems.Count > 0)
                        {
                            List<int> items = new List<int>();
                            items = AllItems.Select(x => x.Id).ToList();
                            result.Result.ItemFilters = GetItemFilters(LoggedUser, 0, false, false, items).Result;
                        }
                        else
                        {
                            result.Result.ItemFilters = new ItemFiltersClass();
                        }
                    }
                }
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItems_MultiShortWithFilters", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsListWithSearchFiltersClass> SearchItems_MultiWithFilters(int LoggedUser, ItemSearchClass itemSearch, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId, bool CalcItemsForFilter = false, int SourceId = 0, int SourceType = 0)
        {
            ResultClass<ItemsListWithSearchFiltersClass> result = new ResultClass<ItemsListWithSearchFiltersClass>();
            try
            {
                try
                {
                    int userId = (APITestingMode) ? 7 : Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"].ToString());
                    RecordUsageData(userId, SourceId, SourceType);
                }
                catch { }

                result.Result = new ItemsListWithSearchFiltersClass();
                List<ItemClass> AllItems = new List<ItemClass>();
                if (CalcItemsForFilter)
                    AllItems = SearchItems_Multi(LoggedUser, itemSearch, 1, 99999999, PriceCountryId, PriceCurrencyId, PriceTypeId).Result;

                result.Result.ItemsList = SearchItems_Multi(LoggedUser, itemSearch, PageId, RecordsCount, PriceCountryId, PriceCurrencyId, PriceTypeId).Result;

                if (CalcItemsForFilter)
                {
                    if (AllItems != null)
                    {
                        if (AllItems.Count > 0)
                        {
                            List<int> items = new List<int>();
                            items = AllItems.Select(x => x.Id).ToList();
                            result.Result.ItemFilters = GetItemFilters(LoggedUser, 0, false, false, items).Result;
                        }
                        else
                        {
                            result.Result.ItemFilters = new ItemFiltersClass();
                        }
                    }
                }
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItems_MultiWithFilters", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsListWithSearchFiltersClass> SearchItems_MultiWithFiltersForPublic(int CountryId, ItemSearchClass itemSearch, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId, bool CalcItemsForFilter = false)
        {
            ResultClass<ItemsListWithSearchFiltersClass> result = new ResultClass<ItemsListWithSearchFiltersClass>();
            try
            {
                result.Result = new ItemsListWithSearchFiltersClass();
                List<ItemClass> AllItems = new List<ItemClass>();
                if (CalcItemsForFilter)
                    AllItems = SearchItems_MultiForPublic(CountryId, itemSearch, 1, 99999999, 0, 0, 0).Result;

                result.Result.ItemsList = SearchItems_MultiForPublic(CountryId, itemSearch, PageId, RecordsCount, 0, 0, 0).Result;
               
                if (CalcItemsForFilter)
                {
                    if (AllItems != null)
                    {
                        if (AllItems.Count > 0)
                        {
                            List<int> items = new List<int>();
                            items = AllItems.Select(x => x.Id).ToList();
                            result.Result.ItemFilters = GetItemFiltersForPublic(CountryId, 0, items).Result;
                        }
                        else
                        {
                            result.Result.ItemFilters = new ItemFiltersClass();
                        }
                    }
                }
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItems_MultiWithFiltersForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsListShortWithSearchFiltersClass> SearchItems_MultiShortWithFiltersForPublic(int CountryId, ItemSearchClass itemSearch, int PageId,
int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId, bool CalcItemsForFilter = false)
        {
            ResultClass<ItemsListShortWithSearchFiltersClass> result = new ResultClass<ItemsListShortWithSearchFiltersClass>();
            try
            {
                result.Result = new ItemsListShortWithSearchFiltersClass();
                List<ItemClass_Short> AllItems = new List<ItemClass_Short>();
                if (CalcItemsForFilter)
                    AllItems = SearchItems_Multi_ShortForPublic(CountryId, itemSearch, 1, 99999999, PriceCountryId, PriceCurrencyId, PriceTypeId).Result;

                result.Result.ItemsList = SearchItems_Multi_ShortForPublic(CountryId, itemSearch, PageId, RecordsCount, PriceCountryId, PriceCurrencyId, PriceTypeId).Result;

                if (CalcItemsForFilter)
                {
                    if (AllItems != null)
                    {
                        if (AllItems.Count > 0)
                        {
                            List<int> items = new List<int>();
                            items = AllItems.Select(x => x.Id).ToList();
                            result.Result.ItemFilters = GetItemFiltersForPublic(CountryId, 0, items).Result;
                        }
                        else
                        {
                            result.Result.ItemFilters = new ItemFiltersClass();
                        }
                    }
                }
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItems_MultiShortWithFiltersForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemClass_Short>> SearchItems_Short(int LoggedUser, bool FilterByCategoryId, int CategoryId,
        bool FilterByBrandId, int BrandId, bool FilterByColorId, int ColorId, bool FilterByCountryId, int CountryId,
        string Size, bool ShowOnlyItemsWithOffers, string Name, string Code, string Description, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId)
        {
            ResultClass<List<ItemClass_Short>> result = new ResultClass<List<ItemClass_Short>>();

            var apiResult = SearchItems(LoggedUser, FilterByCategoryId, CategoryId,
           FilterByBrandId, BrandId, FilterByColorId, ColorId, FilterByCountryId, CountryId,
           Size, ShowOnlyItemsWithOffers, Name, Code, Description, PageId, RecordsCount,
           PriceCountryId, PriceCurrencyId, PriceTypeId);

            result.Result = new ItemClass_Short().PopulateItems(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass_Short>> SearchItems_Multi_Short(int LoggedUser, ItemSearchClass itemSearch, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId)
        {
            ResultClass<List<ItemClass_Short>> result = new ResultClass<List<ItemClass_Short>>();

            var apiResult = SearchItems_Multi(LoggedUser, itemSearch, PageId, RecordsCount, PriceCountryId, PriceCurrencyId, PriceTypeId);

            if (apiResult.Result != null)
                result.Result = new ItemClass_Short().PopulateItems(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemFiltersClass> GetItemFilters(int LoggedUser, int CategoryId, bool FilterByDisabled, bool ShowDisabled, 
            List<int> itemsIds)
        {
            ResultClass<ItemFiltersClass> result = new ResultClass<ItemFiltersClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemFilters";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("FilterByDisabled", FilterByDisabled),
                  new SqlParameter("ShowDisabled", ShowDisabled)
               };

   

                    if (CategoryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CategoryId", CategoryId));


                    if (itemsIds != null)
                    {
                        if (itemsIds.Count > 0)
                        {
                            DataTable itemsIdsTable;
                            using (itemsIdsTable = new DataTable())
                            {
                                itemsIdsTable.Columns.Add("Id", typeof(string));
                                foreach (int x in itemsIds)
                                    itemsIdsTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@ItemsIds", SqlDbType.Structured);
                            pList.Value = itemsIdsTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    ItemFiltersClass ItemFilters = new ItemFiltersClass();

                    SqlDataReader reader = cmd.ExecuteReader();

                    //Brands
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BrandClass> Brands = new List<BrandClass>();
                        BrandClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BrandClass().PopulateBrand(fieldNames, reader);

                            id.Order = order;
                            Brands.Add(id);

                        }

                        ItemFilters.Brands = new List<BrandClass>();
                        ItemFilters.Brands = Brands;

                    }

                    //Countires
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<CountryClass> Countries = new List<CountryClass>();
                            CountryClass id;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                id = new CountryClass().PopulateCountry(fieldNames, reader);

                                id.Order = order;
                                Countries.Add(id);

                            }
                            ItemFilters.Countries = new List<CountryClass>();
                            ItemFilters.Countries = Countries;
                        }
                    }

                    //Colors
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<ColorClass> Colors = new List<ColorClass>();
                            ColorClass id;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                id = new ColorClass().PopulateColor(fieldNames, reader);

                                id.Order = order;
                                Colors.Add(id);

                            }
                            ItemFilters.Colors = new List<ColorClass>();
                            ItemFilters.Colors = Colors;
                        }
                    }

                    ////Categories
                    //if (reader.NextResult())
                    //{
                    //   if (reader.HasRows)
                    //   {
                    //      reader.Read();
                    //      var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                    //      int totalCont = 0;
                    //      if (fieldNames.Contains("TotalCount"))
                    //         if (!Convert.IsDBNull(reader["TotalCount"]))
                    //            totalCont = Convert.ToInt32(reader["TotalCount"]);
                    //   }
                    //}
                    //if (reader.NextResult())
                    //{
                    //   if (reader.HasRows)
                    //   {
                    //      var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                    //      List<CategoryClass> Categories = new List<CategoryClass>();
                    //      CategoryClass id;
                    //      int order = 0;
                    //      while (reader.Read())
                    //      {
                    //         order += 1;

                    //         id = new CategoryClass().PopulateCategory(fieldNames, reader);

                    //         id.Order = order;
                    //         Categories.Add(id);

                    //      }
                    //      ItemFilters.Categories = new List<CategoryClass>();
                    //      ItemFilters.Categories = Categories;
                    //   }
                    //}

                    //if (reader.NextResult())
                    //{
                    //   if (reader.HasRows)
                    //   {
                    //      var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                    //      List<CategoryMapClass> CategoriesMap = new List<CategoryMapClass>();
                    //      CategoryMapClass map;
                    //      while (reader.Read())
                    //      {
                    //         map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);


                    //         CategoriesMap.Add(map);

                    //      }
                    //      ItemFilters.CategoriesMap = new List<CategoryMapClass>();
                    //      ItemFilters.CategoriesMap = CategoriesMap;
                    //   }
                    //}

                    //Sizes
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<SizeClass> Sizes = new List<SizeClass>();
                            SizeClass id;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                id = new SizeClass().PopulateSize(fieldNames, reader);

                                id.Order = order;
                                Sizes.Add(id);

                            }
                            ItemFilters.Sizes = new List<SizeClass>();
                            ItemFilters.Sizes = Sizes;
                        }
                    }

                    //Min-Max Price
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            Tuple<Int64, Int64> MinMaxPrice = new Tuple<Int64, Int64>(0, 0);
                            Int64 MaxPrice = 0;
                            Int64 MinPrice = 0;
                            while (reader.Read())
                            {
                                if (fieldNames.Contains("MinPrice"))
                                    if (!Convert.IsDBNull(reader["MinPrice"]))
                                        MinPrice = Convert.ToInt64(reader["MinPrice"]);

                                if (fieldNames.Contains("MaxPrice"))
                                    if (!Convert.IsDBNull(reader["MaxPrice"]))
                                        MaxPrice = Convert.ToInt64(reader["MaxPrice"]);

                                MinMaxPrice = Tuple.Create(MinPrice, MaxPrice);

                            }
                            ItemFilters.MinMaxPrice = new Tuple<Int64, Int64>(0, 0);
                            ItemFilters.MinMaxPrice = MinMaxPrice;
                        }
                    }

                    //Min-Max RequiredPoints
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            Tuple<Int64, Int64> MinMaxRequiredPoints = new Tuple<Int64, Int64>(0, 0);
                            Int64 MinRequiredPoints = 0;
                            Int64 MaxRequiredPoints = 0;

                            while (reader.Read())
                            {
                                if (fieldNames.Contains("MinRequiredPoints"))
                                    if (!Convert.IsDBNull(reader["MinRequiredPoints"]))
                                        MinRequiredPoints = Convert.ToInt64(reader["MinRequiredPoints"]);

                                if (fieldNames.Contains("MaxRequiredPoints"))
                                    if (!Convert.IsDBNull(reader["MaxRequiredPoints"]))
                                        MaxRequiredPoints = Convert.ToInt64(reader["MaxRequiredPoints"]);

                                MinMaxRequiredPoints = Tuple.Create(MinRequiredPoints, MaxRequiredPoints);

                            }
                            ItemFilters.MinMaxRequiredPoints = new Tuple<Int64, Int64>(0, 0);
                            ItemFilters.MinMaxRequiredPoints = MinMaxRequiredPoints;
                        }
                    }

                    //CurrencyCodes
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            string CurrencyEnglishCode = "";
                            string CurrencyArabicCode = "";

                            reader.Read();
                            if (fieldNames.Contains("CurrencyEnglishCode"))
                                if (!Convert.IsDBNull(reader["CurrencyEnglishCode"]))
                                    CurrencyEnglishCode = reader["CurrencyEnglishCode"].ToString();

                            if (fieldNames.Contains("CurrencyArabicCode"))
                                if (!Convert.IsDBNull(reader["CurrencyArabicCode"]))
                                    CurrencyArabicCode = reader["CurrencyArabicCode"].ToString();

                            ItemFilters.CurrencyArabicCode = CurrencyArabicCode;
                            ItemFilters.CurrencyEnglishCode = CurrencyEnglishCode;
                        }
                    }

                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<ItemTypeClass> itemTypesList = new List<ItemTypeClass>();
                            ItemTypeClass itemType;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                                itemType.Order = order;
                                itemTypesList.Add(itemType);

                            }
                            ItemFilters.ItemTypes = new List<ItemTypeClass>();
                            ItemFilters.ItemTypes = itemTypesList;
                        }
                    }

                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<ItemDepartmentClass> itemDepartmentList = new List<ItemDepartmentClass>();
                            ItemDepartmentClass itemdepartment;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                itemdepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                                itemdepartment.Order = order;
                                itemDepartmentList.Add(itemdepartment);

                            }
                            ItemFilters.ItemDepartments = new List<ItemDepartmentClass>();
                            ItemFilters.ItemDepartments = itemDepartmentList;
                        }
                    }

                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<TagTypeClass> tagTypeList = new List<TagTypeClass>();
                            TagTypeClass tagType;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                tagType = new TagTypeClass().PopulateTagType(fieldNames, reader);

                                tagType.Order = order;
                                tagTypeList.Add(tagType);

                            }

                            List<TagClass> tagList = new List<TagClass>();

                            if (reader.NextResult())
                            {
                                if (reader.HasRows)
                                {
                                    fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                    
                                    TagClass tag;
                                    order = 0;
                                    while (reader.Read())
                                    {
                                        order += 1;

                                        tag = new TagClass().PopulateTag(fieldNames, reader);

                                        tag.Order = order;
                                        tagList.Add(tag);

                                    }
                                }
                            }

                            List<TagsTypeClass> tagsTypeList = new List<TagsTypeClass>();
                            TagsTypeClass tagsType;
                            foreach (var tt in tagTypeList)
                            {
                                tagsType = new TagsTypeClass();
                                tagsType.TagType = tt;
                                tagsType.Tags = tagList.Where(x => x.TagTypeId == tt.Id).ToList();

                                tagsTypeList.Add(tagsType);
                            }

                            ItemFilters.TagsTypes = new List<TagsTypeClass>();
                            ItemFilters.TagsTypes = tagsTypeList;
                        }
                    }

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = ItemFilters;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemFilters", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsDataClass> GetItemData(int LoggedUser, int ItemId)
        {
            ResultClass<ItemsDataClass> result = new ResultClass<ItemsDataClass>();
            try
            {

                try
                {
                    int userId = (APITestingMode) ? 7 : Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"].ToString());
                    RecordUsageData(userId, ItemId, 13);
                }
                catch { }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    if (ItemId > 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("ItemId", ItemId));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsDataClass itemsDataClass = new ItemsDataClass();

                        while (reader.Read())
                        {
                            itemsDataClass.ItemClass = new ItemClass().PopulateItemClass(fieldNames, reader);
                        }

                        //Companies
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCompanyClass> Companies = new List<ItemsCompanyClass>();
                                ItemsCompanyClass itemsCompany;

                                while (reader.Read())
                                {
                                    itemsCompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                                    Companies.Add(itemsCompany);
                                }
                                itemsDataClass.Companies = Companies;
                            }
                        }

                        //Governorates
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsGovernorateClass> Governorates = new List<ItemsGovernorateClass>();
                                ItemsGovernorateClass itemsGovernorate;

                                while (reader.Read())
                                {
                                    itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                                    Governorates.Add(itemsGovernorate);
                                }
                                itemsDataClass.Governorates = Governorates;
                            }
                        }

                        //Users Types
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsUsersTypeClass> UsersTypes = new List<ItemsUsersTypeClass>();
                                ItemsUsersTypeClass itemsUserType;

                                while (reader.Read())
                                {
                                    itemsUserType = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                                    UsersTypes.Add(itemsUserType);
                                }
                                itemsDataClass.UsersTypes = UsersTypes;
                            }
                        }

                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemImageClass> Images = new List<ItemImageClass>();
                                ItemImageClass itemsImage;

                                while (reader.Read())
                                {
                                    itemsImage = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                                    Images.Add(itemsImage);
                                }
                                itemsDataClass.Images = Images;
                            }
                        }

                        //Colors
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorClass> Colors = new List<ItemColorClass>();
                                ItemColorClass itemsColor;

                                while (reader.Read())
                                {
                                    itemsColor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                                    Colors.Add(itemsColor);
                                }
                                itemsDataClass.Colors = Colors;
                            }
                        }

                        //Sizes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizeClass> Sizes = new List<ItemSizeClass>();
                                ItemSizeClass itemsSize;

                                while (reader.Read())
                                {
                                    itemsSize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                                    Sizes.Add(itemsSize);
                                }
                                itemsDataClass.Sizes = Sizes;
                            }
                        }

                        //Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> PricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemPrice;
                                int order = 0;
                                while (reader.Read())
                                {
                                    order++;
                                    itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);
                                    itemPrice.Order = order;
                                    PricesList.Add(itemPrice);
                                }
                                itemsDataClass.Prices = PricesList;
                            }
                        }

                        //Config Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> ConfigPricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemConfigPrice;
                                int order = 0;
                                while (reader.Read())
                                {
                                    order++;
                                    itemConfigPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);
                                    itemConfigPrice.Order = order;
                                    ConfigPricesList.Add(itemConfigPrice);
                                }
                                itemsDataClass.ConfigPrices = ConfigPricesList;
                            }
                        }


                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCountryClass> CountriesList = new List<ItemsCountryClass>();
                                ItemsCountryClass itemCountry;

                                while (reader.Read())
                                {
                                    itemCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                                    CountriesList.Add(itemCountry);
                                }
                                itemsDataClass.Countries = CountriesList;
                            }
                        }


                        //new added
                        CategoriesWithMapClass categoriesWithMap = new CategoriesWithMapClass();
                        itemsDataClass.CategoriesMap = new CategoriesWithMapClass();

                        int totalCont = 0;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                reader.Read();
                                if (fieldNames.Contains("TotalCount"))
                                    if (!Convert.IsDBNull(reader["TotalCount"]))
                                        totalCont = Convert.ToInt32(reader["TotalCount"]);
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                List<CategoryClass> Categories = new List<CategoryClass>();
                                CategoryClass category;
                                int order = 0;
                                while (reader.Read())
                                {
                                    order += 1;
                                    category = new CategoryClass().PopulateCategory(fieldNames, reader);
                                    category.Order = order;
                                    Categories.Add(category);
                                }
                                categoriesWithMap.Categories = Categories;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<CategoryMapClass> categoriesMap = new List<CategoryMapClass>();
                                CategoryMapClass map;
                                while (reader.Read())
                                {
                                    map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);

                                    categoriesMap.Add(map);
                                }
                                categoriesWithMap.CategoriesMap = categoriesMap;
                            }
                        }

                        //BookingDay
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemBookingDayClass> BookingDayList = new List<ItemBookingDayClass>();
                                ItemBookingDayClass bookingDay;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    bookingDay = new ItemBookingDayClass().PopulateItemBookingDay(fieldNames, reader);
                                    bookingDay.Order = Order;
                                    BookingDayList.Add(bookingDay);
                                }
                                itemsDataClass.BookingDays = BookingDayList;
                            }
                        }
                        //BookingDaysTimes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                //List<ItemBookingDayTimeClass> BookingDayList = new List<ItemBookingDayTimeClass>();
                                ItemBookingDayTimeClass bookingDaysTime;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    bookingDaysTime = new ItemBookingDayTimeClass().PopulateItemBookingDayTime(fieldNames, reader);
                                    foreach (ItemBookingDayClass item in itemsDataClass.BookingDays)
                                    {
                                        if (item.Id == bookingDaysTime.ItemBookingDayId)
                                        {
                                            Order++;
                                            bookingDaysTime.Order = Order;
                                            item.ItemBookingDayTime.Add(bookingDaysTime);
                                        }
                                    }
                                    //BookingDayList.Add(bookingDays);
                                }
                                //itemsDataClass.BookingDays = BookingDayList;
                            }
                        }

                        itemsDataClass.HasSeries = false;
                        if (reader.NextResult())
                        {
                            //Series
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSeriesClass> seriesList = new List<ItemSeriesClass>();
                                ItemSeriesClass itemSeries;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSeries = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);
                                    Order++;
                                    itemSeries.Order = Order;
                                    seriesList.Add(itemSeries);
                                    if (itemSeries.Quantity > 0)
                                        itemsDataClass.HasSeries = true;
                                }
                                itemsDataClass.Series = seriesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //MatchedItems
                            /*if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }*/
                        }

                        if (reader.NextResult())
                        {
                            //Serials
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSerialClass> itemSerialsList = new List<ItemSerialClass>();
                                ItemSerialClass itemSerial;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                                    Order++;
                                    itemSerial.Order = Order;
                                    itemSerialsList.Add(itemSerial);
                                }
                                itemsDataClass.Serials = itemSerialsList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //Tags
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemTagClass> itemTagsList = new List<ItemTagClass>();
                                ItemTagClass itemTag;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemTag = new ItemTagClass().PopulateItemTag(fieldNames, reader);
                                    Order++;
                                    itemTag.Order = Order;
                                    itemTagsList.Add(itemTag);
                                }
                                itemsDataClass.Tags = itemTagsList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //SizesPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizePriceAddClass> itemSizesPricesList = new List<ItemSizePriceAddClass>();
                                ItemSizePriceAddClass itemSizePriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSizePriceAdd = new ItemSizePriceAddClass().PopulateItemSizePriceAdd(fieldNames, reader);
                                    Order++;
                                    itemSizePriceAdd.Order = Order;
                                    itemSizesPricesList.Add(itemSizePriceAdd);
                                }
                                itemsDataClass.SizesPrices = itemSizesPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //ColorsPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorPriceAddClass> itemColorsPricesList = new List<ItemColorPriceAddClass>();
                                ItemColorPriceAddClass itemColorPriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemColorPriceAdd = new ItemColorPriceAddClass().PopulateItemColorPriceAdd(fieldNames, reader);
                                    Order++;
                                    itemColorPriceAdd.Order = Order;
                                    itemColorsPricesList.Add(itemColorPriceAdd);
                                }
                                itemsDataClass.ColorsPrices = itemColorsPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //MatchedItems
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }
                        }

                        result.Result = itemsDataClass;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemData", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsDataClass> CreateItemData(int LoggedUser, ItemClass Item, List<int> Governorates,
        List<int> Companies, List<int> UserTypes, List<ItemImageClass> Images, List<ItemColorClass> Colors, List<ItemSizeClass> Sizes,
        List<ItemPriceClass> Prices, List<int> Countries, List<ItemBookingDayClass> BookingDays, List<ItemSeriesClass> Series, List<ItemSerialClass> Serials, 
        List<ItemTagClass> Tags, List<ItemSizePriceAddClass> SizesPrices, List<ItemColorPriceAddClass> ColorsPrices, List<int> MatchedItems)
        {
            ResultClass<ItemsDataClass> result = new ResultClass<ItemsDataClass>();
            ItemsDataClass itemsDataClass = new ItemsDataClass();
            try
            {
                //Check license validity
                if (!Item.Disabled)
                {
                    int resultCode = Errors.Success; //ServiceMethod.CheckItemLicenseLimit();
                    if (resultCode != Errors.Success) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ArabicName", Item.ArabicName),
                  new SqlParameter("EnglishName", Item.EnglishName),
                  new SqlParameter("Code", Item.Code.Trim()),
                  new SqlParameter("ArabicDescription", Item.ArabicDescription),
                  new SqlParameter("EnglishDescription", Item.EnglishDescription),
                  new SqlParameter("BrandId", Item.BrandId),
                  //new SqlParameter("ColorId", Item.ColorId),
                  //new SqlParameter("Size", Item.Size),
                  new SqlParameter("CountryId", Item.CountryId),
                  new SqlParameter("DefaultPriceTypeId", Item.DefaultPriceTypeId),
                  //new SqlParameter("Price", Item.Price),
                  //new SqlParameter("RequiredPoints", Item.RequiredPoints),
                  new SqlParameter("Disabled", Item.Disabled),
                  new SqlParameter("Notes", Item.Notes),
                  new SqlParameter("ImageURL", Item.ImageURL),
                  new SqlParameter("CreatedBy", Item.CreatedBy),
                  new SqlParameter("UpdatedBy", Item.UpdatedBy),
                  new SqlParameter("CreateDate", Item.CreateDate),
                  new SqlParameter("UpdateDate", Item.UpdateDate),
                  new SqlParameter("CategoryId", Item.CategoryId),
                  new SqlParameter("Param1", Item.Param1),
                  new SqlParameter("Param2", Item.Param2),
                  new SqlParameter("SizeImageURL", Item.SizeImageURL),
                  new SqlParameter("ItemURL", Item.ItemURL),
                  new SqlParameter("ArabicTitle", Item.ArabicTitle),
                  new SqlParameter("EnglishTitle", Item.EnglishTitle),
                  new SqlParameter("ShowCarouselInItemsList", Item.ShowCarouselInItemsList),
                  new SqlParameter("ShowDescriptionInItemsList", Item.ShowDescriptionInItemsList),
                  new SqlParameter("StockLevel", Item.StockLevel),
                  //new SqlParameter("ItemTypeId", Item.ItemTypeId),
                  //new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId),
               };

                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    }

                    cmd.Parameters.Add(new SqlParameter("HasStartDateBooking", Item.HasStartDateBooking));
                    if (Item.HasStartDateBooking)
                        cmd.Parameters.Add(new SqlParameter("StartDateBooking", Item.StartDateBooking));

                    cmd.Parameters.Add(new SqlParameter("HasEndDateBooking", Item.HasEndDateBooking));
                    if (Item.HasEndDateBooking)
                        cmd.Parameters.Add(new SqlParameter("EndDateBooking", Item.EndDateBooking));

                    if (Item.ItemTypeId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemTypeId", Item.ItemTypeId));
                    if (Item.ItemDepartmentId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId));


                    /*if (Item.GrantedPoints > 0)
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", Item.GrantedPoints));
                    else
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", 0));*/
                    //Governorates
                    if (Governorates != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Governorates)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    //Companies
                    if (Companies != null)
                    {
                        DataTable Companytable;
                        using (Companytable = new DataTable())
                        {
                            Companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Companies)
                                Companytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Companies", SqlDbType.Structured);
                        CList.Value = Companytable;
                        Params.Add(CList);
                    }


                    //UserTypes
                    if (UserTypes != null)
                    {
                        DataTable table2;
                        using (table2 = new DataTable())
                        {
                            table2.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypes)
                                table2.Rows.Add(x);
                        }
                        var uList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        uList.Value = table2;
                        Params.Add(uList);
                    }

                    //Colors
                    if (Colors != null)
                    {
                        DataTable colorstbl;
                        using (colorstbl = new DataTable())
                        {
                            colorstbl.Columns.Add("Id", typeof(int));
                            colorstbl.Columns.Add("ColorId", typeof(int));
                            colorstbl.Columns.Add("ColorImageURL", typeof(string));
                            colorstbl.Columns.Add("ArabicDescription", typeof(string));
                            colorstbl.Columns.Add("EnglishDescription", typeof(string));
                            colorstbl.Columns.Add("HexValue", typeof(string));
                            colorstbl.Columns.Add("ItemImageIndex", typeof(int));
                            colorstbl.Columns.Add("Disabled", typeof(bool));
                            colorstbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            foreach (var x in Colors)
                                colorstbl.Rows.Add(x.Id, x.ColorId, x.ColorImageURL, x.ArabicDescription, x.EnglishDescription, x.HexValue, x.ItemImageIndex, x.Disabled, x.RequiredPointsAdd);
                        }
                        if (colorstbl.Rows.Count > 0)
                        {
                            var colorsList = new SqlParameter("@Colors", SqlDbType.Structured);
                            colorsList.Value = colorstbl;
                            Params.Add(colorsList);
                        }
                    }

                    //Sizes
                    if (Sizes != null)
                    {
                        DataTable sizestbl;
                        using (sizestbl = new DataTable())
                        {
                            sizestbl.Columns.Add("Id", typeof(string));
                            sizestbl.Columns.Add("SizeId", typeof(string));
                            sizestbl.Columns.Add("ArabicDescription", typeof(string));
                            sizestbl.Columns.Add("EnglishDescription", typeof(string));
                            sizestbl.Columns.Add("Disabled", typeof(bool));
                            sizestbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            foreach (var x in Sizes)
                                sizestbl.Rows.Add(x.Id, x.SizeId, x.ArabicDescription, x.EnglishDescription, x.Disabled, x.RequiredPointsAdd);
                        }
                        if (sizestbl.Rows.Count > 0)
                        {
                            var sizesList = new SqlParameter("@Sizes", SqlDbType.Structured);
                            sizesList.Value = sizestbl;
                            Params.Add(sizesList);
                        }
                    }


                    //Images
                    if (Images != null)
                    {
                        DataTable imagestbl;
                        using (imagestbl = new DataTable())
                        {
                            imagestbl.Columns.Add("Id", typeof(string));
                            imagestbl.Columns.Add("Bit1", typeof(bool));
                            imagestbl.Columns.Add("Bit2", typeof(bool));
                            foreach (ItemImageClass x in Images)
                                imagestbl.Rows.Add(x.ImageUrl, x.ShowInItemCarousel, x.ShowInItemGallery);
                        }
                        var imagesList = new SqlParameter("@Images", SqlDbType.Structured);
                        imagesList.Value = imagestbl;
                        Params.Add(imagesList);
                    }

                    if (Prices != null)
                    {
                        //Prices
                        DataTable pricestbl;
                        using (pricestbl = new DataTable())
                        {
                            pricestbl.Columns.Add("Price", typeof(double));
                            pricestbl.Columns.Add("TypeId", typeof(int));
                            pricestbl.Columns.Add("CountryCurrencyId", typeof(int));
                            pricestbl.Columns.Add("RequiredPoints", typeof(int));
                            pricestbl.Columns.Add("GrantedPoints", typeof(int));

                            foreach (var x in Prices)
                                pricestbl.Rows.Add(x.Price, x.TypeId, x.CountryCurrencyId, x.RequiredPoints, x.GrantedPoints);
                        }

                        if (pricestbl.Rows.Count > 0)
                        {
                            var pricesList = new SqlParameter("@Prices", SqlDbType.Structured);
                            pricesList.Value = pricestbl;
                            Params.Add(pricesList);
                        }
                    }

                    //Country
                    if (Countries != null)
                    {
                        DataTable Countrytable;
                        using (Countrytable = new DataTable())
                        {
                            Countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                Countrytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Countries", SqlDbType.Structured);
                        CList.Value = Countrytable;
                        Params.Add(CList);
                    }

                    //BookingDays
                    if (BookingDays != null)
                    {
                        DataTable bookingdayTbl;
                        using (bookingdayTbl = new DataTable())
                        {
                            bookingdayTbl.Columns.Add("Id", typeof(string));
                            foreach (ItemBookingDayClass x in BookingDays)
                                bookingdayTbl.Rows.Add(x.DayId);
                        }
                        var BDList = new SqlParameter("@DaysIds", SqlDbType.Structured);
                        BDList.Value = bookingdayTbl;
                        Params.Add(BDList);
                    }
                    //BookingDayTimes
                    if (BookingDays != null)
                    {
                        DataTable bookingdayTimeTbl;
                        using (bookingdayTimeTbl = new DataTable())
                        {
                            bookingdayTimeTbl.Columns.Add("DayId", typeof(string));
                            bookingdayTimeTbl.Columns.Add("Time", typeof(string));
                            bookingdayTimeTbl.Columns.Add("Not", typeof(string));
                            foreach (ItemBookingDayClass Day in BookingDays)
                            {
                                foreach (ItemBookingDayTimeClass DayTimes in Day.ItemBookingDayTime)
                                {
                                    bookingdayTimeTbl.Rows.Add(Day.DayId, DayTimes.Time, DayTimes.Note);
                                }
                            }
                        }
                        var BDList = new SqlParameter("@DayTimes", SqlDbType.Structured);
                        BDList.Value = bookingdayTimeTbl;
                        Params.Add(BDList);
                    }

                    //Series
                    if (Series != null)
                    {
                        DataTable Seriestable;
                        using (Seriestable = new DataTable())
                        {
                            Seriestable.Columns.Add("Id", typeof(string));
                            Seriestable.Columns.Add("ItemId", typeof(string));
                            Seriestable.Columns.Add("ColorId", typeof(string));
                            Seriestable.Columns.Add("SizeId", typeof(string));
                            Seriestable.Columns.Add("Quantity", typeof(string));
                            foreach (ItemSeriesClass x in Series)
                                Seriestable.Rows.Add(0, 0, x.ColorId, x.SizeId, x.Quantity);
                        }
                        var CList = new SqlParameter("@Series", SqlDbType.Structured);
                        CList.Value = Seriestable;
                        Params.Add(CList);
                    }


                    //Serials
                    if (Serials != null)
                    {
                        DataTable Serialstable;
                        using (Serialstable = new DataTable())
                        {
                            Serialstable.Columns.Add("Id", typeof(string));
                            Serialstable.Columns.Add("ItemId", typeof(string));
                            Serialstable.Columns.Add("Serial", typeof(string));
                            Serialstable.Columns.Add("IsScanned", typeof(string));
                            Serialstable.Columns.Add("ScannerUserId", typeof(string));
                            Serialstable.Columns.Add("ScanningDate", typeof(string));
                            Serialstable.Columns.Add("ScanningPoints", typeof(string));
                            Serialstable.Columns.Add("Disabled", typeof(string));
                            Serialstable.Columns.Add("Notes", typeof(string));
                            Serialstable.Columns.Add("IsChecked", typeof(string));
                            Serialstable.Columns.Add("CheckDate", typeof(string));
                            Serialstable.Columns.Add("CheckerUserId", typeof(string));
                            Serialstable.Columns.Add("CreatedBy", typeof(string));
                            Serialstable.Columns.Add("CreateDate", typeof(string));
                            Serialstable.Columns.Add("GiftedPoints", typeof(string));

                            foreach (ItemSerialClass x in Serials)
                                Serialstable.Rows.Add(x.Id, x.ItemId, x.Serial, x.IsScanned, x.ScannerUserId, x.ScanningDate, x.ScanningPoints, x.Disabled, x.Notes, x.IsChecked, x.CheckDate, x.CheckerUserId
                                    ,x.CreatedBy, x.CreateDate, x.GiftedPoints);

                        }
                        var CList = new SqlParameter("@Serials", SqlDbType.Structured);
                        CList.Value = Serialstable;
                        Params.Add(CList);
                    }

                    //Tags
                    if (Tags != null)
                    {
                        DataTable tagstbl;
                        using (tagstbl = new DataTable())
                        {
                            tagstbl.Columns.Add("Item", typeof(int));
                            foreach (ItemTagClass x in Tags)
                                tagstbl.Rows.Add(x.TagId);
                        }
                        var tagsList = new SqlParameter("@Tags", SqlDbType.Structured);
                        tagsList.Value = tagstbl;
                        Params.Add(tagsList);
                    }

                    //SizesPrices
                    if (SizesPrices != null)
                    {
                        DataTable Sizespricestable;
                        using (Sizespricestable = new DataTable())
                        {
                            Sizespricestable.Columns.Add("Id", typeof(int));
                            Sizespricestable.Columns.Add("ItemId", typeof(int));
                            Sizespricestable.Columns.Add("SizeGroupId", typeof(int));
                            Sizespricestable.Columns.Add("SizeId", typeof(int));
                            Sizespricestable.Columns.Add("ItemSizeId", typeof(int));
                            Sizespricestable.Columns.Add("PriceTypeId", typeof(int));
                            Sizespricestable.Columns.Add("CountryCurrencyId", typeof(int));
                            Sizespricestable.Columns.Add("PriceAdd", typeof(double));
                            Sizespricestable.Columns.Add("RequiredPointsAdd", typeof(int));
                            Sizespricestable.Columns.Add("GrantedPointsAdd", typeof(int));
                            foreach (ItemSizePriceAddClass x in SizesPrices)
                                Sizespricestable.Rows.Add(-1, -1, x.SizeGroupId, x.SizeId, -1, x.TypeId, x.CountryCurrencyId, x.PriceAdd, x.RequiredPointsAdd, x.GrantedPointsAdd);
                        }
                        var CList = new SqlParameter("@SizesPrices", SqlDbType.Structured);
                        CList.Value = Sizespricestable;
                        Params.Add(CList);
                    }

                    //ColorsPrices
                    if (ColorsPrices != null)
                    {
                        DataTable Colorspricestable;
                        using (Colorspricestable = new DataTable())
                        {
                            Colorspricestable.Columns.Add("Id", typeof(int));
                            Colorspricestable.Columns.Add("ItemId", typeof(int));
                            Colorspricestable.Columns.Add("ColorId", typeof(int));
                            Colorspricestable.Columns.Add("ItemColorId", typeof(int));
                            Colorspricestable.Columns.Add("PriceTypeId", typeof(int));
                            Colorspricestable.Columns.Add("CountryCurrencyId", typeof(int));
                            Colorspricestable.Columns.Add("PriceAdd", typeof(double));
                            Colorspricestable.Columns.Add("RequiredPointsAdd", typeof(int));
                            Colorspricestable.Columns.Add("GrantedPointsAdd", typeof(int));

                            foreach (ItemColorPriceAddClass x in ColorsPrices)
                                Colorspricestable.Rows.Add(-1, -1, x.ColorId, -1, x.TypeId, x.CountryCurrencyId, x.PriceAdd, x.RequiredPointsAdd, x.GrantedPointsAdd);
                        }
                        var CList = new SqlParameter("@ColorsPrices", SqlDbType.Structured);
                        CList.Value = Colorspricestable;
                        Params.Add(CList);
                    }

                    //MatchedItems
                    if (MatchedItems != null)
                    {
                        DataTable Matcheditemtable;
                        using (Matcheditemtable = new DataTable())
                        {
                            Matcheditemtable.Columns.Add("Id", typeof(string));
                            foreach (int x in MatchedItems)
                                Matcheditemtable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@MatchedItemsIds", SqlDbType.Structured);
                        CList.Value = Matcheditemtable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        itemsDataClass.ItemClass = new ItemClass().PopulateItemClass(fieldNames, reader);

                        //Companies
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCompanyClass> CompaniesList = new List<ItemsCompanyClass>();
                                ItemsCompanyClass itemsCompany;

                                while (reader.Read())
                                {
                                    itemsCompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                                    CompaniesList.Add(itemsCompany);
                                }
                                itemsDataClass.Companies = CompaniesList;
                            }
                        }

                        //Governorates
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsGovernorateClass> GovernoratesList = new List<ItemsGovernorateClass>();
                                ItemsGovernorateClass itemsGovernorate;

                                while (reader.Read())
                                {
                                    itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                                    GovernoratesList.Add(itemsGovernorate);
                                }
                                itemsDataClass.Governorates = GovernoratesList;
                            }
                        }

                        //Users Types
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsUsersTypeClass> UsersTypesList = new List<ItemsUsersTypeClass>();
                                ItemsUsersTypeClass itemsUserType;

                                while (reader.Read())
                                {
                                    itemsUserType = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                                    UsersTypesList.Add(itemsUserType);
                                }
                                itemsDataClass.UsersTypes = UsersTypesList;
                            }
                        }

                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemImageClass> ImagesList = new List<ItemImageClass>();
                                ItemImageClass itemsImage;

                                while (reader.Read())
                                {
                                    itemsImage = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                                    ImagesList.Add(itemsImage);
                                }
                                itemsDataClass.Images = ImagesList;
                            }
                        }

                        //Colors                    
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorClass> ColorsList = new List<ItemColorClass>();
                                ItemColorClass itemColor;

                                while (reader.Read())
                                {
                                    itemColor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                                    ColorsList.Add(itemColor);
                                }
                                itemsDataClass.Colors = ColorsList;
                            }
                        }

                        //Sizes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizeClass> SizesList = new List<ItemSizeClass>();
                                ItemSizeClass itemSize;

                                while (reader.Read())
                                {
                                    itemSize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                                    SizesList.Add(itemSize);
                                }
                                itemsDataClass.Sizes = SizesList;
                            }
                        }


                        //Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> PricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemPrice;

                                while (reader.Read())
                                {
                                    itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    PricesList.Add(itemPrice);
                                }
                                itemsDataClass.Prices = PricesList;
                            }
                        }

                        //Config Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> ConfigPricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemConfigPrice;

                                while (reader.Read())
                                {
                                    itemConfigPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    ConfigPricesList.Add(itemConfigPrice);
                                }
                                itemsDataClass.ConfigPrices = ConfigPricesList;
                            }
                        }
                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCountryClass> CountriesList = new List<ItemsCountryClass>();
                                ItemsCountryClass itemsCountry;

                                while (reader.Read())
                                {
                                    itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                                    CountriesList.Add(itemsCountry);
                                }
                                itemsDataClass.Countries = CountriesList;
                            }
                        }

                        //BookingDay
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemBookingDayClass> BookingDayList = new List<ItemBookingDayClass>();
                                ItemBookingDayClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    bookingDays = new ItemBookingDayClass().PopulateItemBookingDay(fieldNames, reader);

                                    bookingDays.Order = Order;
                                    BookingDayList.Add(bookingDays);
                                }
                                itemsDataClass.BookingDays = BookingDayList;
                            }
                        }
                        //BookingDaysTimes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                //List<ItemBookingDayTimeClass> BookingDayList = new List<ItemBookingDayTimeClass>();
                                ItemBookingDayTimeClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    bookingDays = new ItemBookingDayTimeClass().PopulateItemBookingDayTime(fieldNames, reader);
                                    foreach (ItemBookingDayClass item in itemsDataClass.BookingDays)
                                    {
                                        if (item.Id == bookingDays.ItemBookingDayId)
                                        {
                                            Order++;
                                            bookingDays.Order = Order;
                                            item.ItemBookingDayTime.Add(bookingDays);
                                        }
                                    }
                                    //BookingDayList.Add(bookingDays);
                                }
                                //itemsDataClass.BookingDays = BookingDayList;
                            }
                        }

                        //Series
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSeriesClass> itemSeriesList = new List<ItemSeriesClass>();
                                ItemSeriesClass itemSeries;

                                while (reader.Read())
                                {
                                    itemSeries = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);

                                    itemSeriesList.Add(itemSeries);
                                }
                                itemsDataClass.Series = itemSeriesList;
                            }
                        }

                        if (Serials != null)
                        {
                            if (reader.NextResult())
                            {
                                //Serials
                                if (reader.HasRows)
                                {
                                    fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                    List<ItemSerialClass> itemSerialsList = new List<ItemSerialClass>();
                                    ItemSerialClass itemSerial;

                                    int Order = 0;
                                    while (reader.Read())
                                    {
                                        itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                                        Order++;
                                        itemSerial.Order = Order;
                                        itemSerialsList.Add(itemSerial);
                                    }
                                    itemsDataClass.Serials = itemSerialsList;

                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            //Tags
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemTagClass> itemTagsList = new List<ItemTagClass>();
                                ItemTagClass itemTag;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemTag = new ItemTagClass().PopulateItemTag(fieldNames, reader);
                                    Order++;
                                    itemTag.Order = Order;
                                    itemTagsList.Add(itemTag);
                                }
                                itemsDataClass.Tags = itemTagsList;

                            }
                        }


                        if (reader.NextResult())
                        {
                            //SizesPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizePriceAddClass> itemSizesPricesList = new List<ItemSizePriceAddClass>();
                                ItemSizePriceAddClass itemSizePriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSizePriceAdd = new ItemSizePriceAddClass().PopulateItemSizePriceAdd(fieldNames, reader);
                                    Order++;
                                    itemSizePriceAdd.Order = Order;
                                    itemSizesPricesList.Add(itemSizePriceAdd);
                                }
                                itemsDataClass.SizesPrices = itemSizesPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //ColorsPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorPriceAddClass> itemColorsPricesList = new List<ItemColorPriceAddClass>();
                                ItemColorPriceAddClass itemColorPriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemColorPriceAdd = new ItemColorPriceAddClass().PopulateItemColorPriceAdd(fieldNames, reader);
                                    Order++;
                                    itemColorPriceAdd.Order = Order;
                                    itemColorsPricesList.Add(itemColorPriceAdd);
                                }
                                itemsDataClass.ColorsPrices = itemColorsPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //MatchedItems
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";

                        //Add Item.Code to result
                        //result.Result = null;
                        itemsDataClass.ItemClass = new ItemClass() { Code = Item.Code };
                        result.Result = itemsDataClass;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemData", e.Source, "");
                }

                //Add Item.Code to result
                itemsDataClass.ItemClass = new ItemClass() { Code = Item.Code };
                result.Result = itemsDataClass;

                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsDataClass> CreateItemDataNew(int LoggedUser, ItemClass Item, List<int> Governorates,
        List<int> Companies, List<int> UserTypes, List<ItemImageClass> Images, List<ItemColorDataClass> Colors, 
        List<ItemSizeDataClass> Sizes,
        List<ItemPriceClass> Prices, 
        List<int> Countries, 
        List<ItemBookingDayClass> BookingDays, 
        List<ItemSeriesClass> Series, List<ItemSerialClass> Serials, List<ItemTagClass> Tags, List<int> MatchedItems)
        {
            ResultClass<ItemsDataClass> result = new ResultClass<ItemsDataClass>();
            ItemsDataClass itemsDataClass = new ItemsDataClass();
            try
            {
                //Check license validity
                if (!Item.Disabled)
                {
                    int resultCode = Errors.Success; //ServiceMethod.CheckItemLicenseLimit();
                    if (resultCode != Errors.Success) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ArabicName", Item.ArabicName),
                  new SqlParameter("EnglishName", Item.EnglishName),
                  new SqlParameter("Code", Item.Code.Trim()),
                  new SqlParameter("ArabicDescription", Item.ArabicDescription),
                  new SqlParameter("EnglishDescription", Item.EnglishDescription),
                  new SqlParameter("BrandId", Item.BrandId),
                  //new SqlParameter("ColorId", Item.ColorId),
                  //new SqlParameter("Size", Item.Size),
                  new SqlParameter("CountryId", Item.CountryId),
                  new SqlParameter("DefaultPriceTypeId", Item.DefaultPriceTypeId),
                  //new SqlParameter("Price", Item.Price),
                  //new SqlParameter("RequiredPoints", Item.RequiredPoints),
                  new SqlParameter("Disabled", Item.Disabled),
                  new SqlParameter("Notes", Item.Notes),
                  new SqlParameter("ImageURL", Item.ImageURL),
                  new SqlParameter("CreatedBy", Item.CreatedBy),
                  new SqlParameter("UpdatedBy", Item.UpdatedBy),
                  new SqlParameter("CreateDate", Item.CreateDate),
                  new SqlParameter("UpdateDate", Item.UpdateDate),
                  new SqlParameter("CategoryId", Item.CategoryId),
                  new SqlParameter("Param1", Item.Param1),
                  new SqlParameter("Param2", Item.Param2),
                  new SqlParameter("SizeImageURL", Item.SizeImageURL),
                  new SqlParameter("ItemURL", Item.ItemURL),
                  new SqlParameter("ArabicTitle", Item.ArabicTitle),
                  new SqlParameter("EnglishTitle", Item.EnglishTitle),
                  new SqlParameter("ShowCarouselInItemsList", Item.ShowCarouselInItemsList),
                  new SqlParameter("ShowDescriptionInItemsList", Item.ShowDescriptionInItemsList),
                  new SqlParameter("StockLevel", Item.StockLevel),
                  
                  //new SqlParameter("ItemTypeId", Item.ItemTypeId),
                  //new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId),
               };

                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    }

                    cmd.Parameters.Add(new SqlParameter("HasStartDateBooking", Item.HasStartDateBooking));
                    if (Item.HasStartDateBooking)
                        cmd.Parameters.Add(new SqlParameter("StartDateBooking", Item.StartDateBooking));

                    cmd.Parameters.Add(new SqlParameter("HasEndDateBooking", Item.HasEndDateBooking));
                    if (Item.HasEndDateBooking)
                        cmd.Parameters.Add(new SqlParameter("EndDateBooking", Item.EndDateBooking));

                    if (Item.ItemTypeId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemTypeId", Item.ItemTypeId));
                    if (Item.ItemDepartmentId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId));


                    /*if (Item.GrantedPoints > 0)
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", Item.GrantedPoints));
                    else
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", 0));*/
                    //Governorates
                    if (Governorates != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Governorates)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    //Companies
                    if (Companies != null)
                    {
                        DataTable Companytable;
                        using (Companytable = new DataTable())
                        {
                            Companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Companies)
                                Companytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Companies", SqlDbType.Structured);
                        CList.Value = Companytable;
                        Params.Add(CList);
                    }


                    //UserTypes
                    if (UserTypes != null)
                    {
                        DataTable table2;
                        using (table2 = new DataTable())
                        {
                            table2.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypes)
                                table2.Rows.Add(x);
                        }
                        var uList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        uList.Value = table2;
                        Params.Add(uList);
                    }

                    //Colors
                    if (Colors != null)
                    {
                        DataTable colorstbl;
                        DataTable colorspricetbl;
                        using (colorstbl = new DataTable())
                        {
                            colorstbl.Columns.Add("Id", typeof(int));
                            colorstbl.Columns.Add("ColorId", typeof(int));
                            colorstbl.Columns.Add("ColorImageURL", typeof(string));
                            colorstbl.Columns.Add("ArabicDescription", typeof(string));
                            colorstbl.Columns.Add("EnglishDescription", typeof(string));
                            colorstbl.Columns.Add("HexValue", typeof(string));
                            colorstbl.Columns.Add("ItemImageIndex", typeof(int));
                            colorstbl.Columns.Add("Disabled", typeof(bool));
                            colorstbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            
                            

                            using (colorspricetbl = new DataTable())
                            {
                                colorspricetbl.Columns.Add("Id", typeof(int));
                                colorspricetbl.Columns.Add("ItemColorId", typeof(int));
                                colorspricetbl.Columns.Add("PriceTypeId", typeof(int));
                                colorspricetbl.Columns.Add("CountryCurrencyId", typeof(int));
                                colorspricetbl.Columns.Add("PriceAdd", typeof(string));
                                colorspricetbl.Columns.Add("RequiredPointsAdd", typeof(int));
                                colorspricetbl.Columns.Add("GrantedPointsAdd", typeof(int));

                                foreach (var x in Colors)
                                {
                                    colorstbl.Rows.Add(x.ItemColor.Id, x.ItemColor.ColorId, x.ItemColor.ColorImageURL, x.ItemColor.ArabicDescription, x.ItemColor.EnglishDescription, x.ItemColor.HexValue, x.ItemColor.ItemImageIndex, x.ItemColor.Disabled, x.ItemColor.RequiredPointsAdd);
                                    foreach (var xx in x.ItemColorPrices)
                                    {
                                        colorspricetbl.Rows.Add(xx.Id, x.ItemColor.Id, xx.TypeId, xx.CountryCurrencyId, xx.PriceAdd, xx.RequiredPointsAdd, xx.GrantedPointsAdd);
                                    }
                                }
                            }
                        }
                        if (colorstbl.Rows.Count > 0)
                        {
                            var colorsList = new SqlParameter("@Colors", SqlDbType.Structured);
                            colorsList.Value = colorstbl;
                            Params.Add(colorsList);
                        }

                        if (colorspricetbl.Rows.Count > 0)
                        {
                            var colorsPricesList = new SqlParameter("@ColorsPrices", SqlDbType.Structured);
                            colorsPricesList.Value = colorspricetbl;
                            Params.Add(colorsPricesList);
                        }
                    }

                    //Sizes
                    if (Sizes != null)
                    {
                        DataTable sizestbl;
                        DataTable sizespricetbl;
                        using (sizestbl = new DataTable())
                        {
                            sizestbl.Columns.Add("Id", typeof(string));
                            sizestbl.Columns.Add("SizeId", typeof(string));
                            sizestbl.Columns.Add("ArabicDescription", typeof(string));
                            sizestbl.Columns.Add("EnglishDescription", typeof(string));
                            sizestbl.Columns.Add("Disabled", typeof(bool));
                            sizestbl.Columns.Add("RequiredPointsAdd", typeof(int));

                            using (sizespricetbl = new DataTable())
                            {
                                sizespricetbl.Columns.Add("Id", typeof(int));
                                sizespricetbl.Columns.Add("ItemSizeId", typeof(int));
                                sizespricetbl.Columns.Add("PriceTypeId", typeof(int));
                                sizespricetbl.Columns.Add("CountryCurrencyId", typeof(int));
                                sizespricetbl.Columns.Add("PriceAdd", typeof(string));
                                sizespricetbl.Columns.Add("RequiredPointsAdd", typeof(int));
                                sizespricetbl.Columns.Add("GrantedPointsAdd", typeof(int));


                                foreach (var x in Sizes)
                                {
                                    sizestbl.Rows.Add(x.ItemSize.Id, x.ItemSize.SizeId, x.ItemSize.ArabicDescription, x.ItemSize.EnglishDescription, x.ItemSize.Disabled, x.ItemSize.RequiredPointsAdd);
                                    foreach (var xx in x.ItemSizePrices)
                                    {
                                        sizespricetbl.Rows.Add(xx.Id, x.ItemSize.Id, xx.TypeId, xx.CountryCurrencyId, xx.PriceAdd, xx.RequiredPointsAdd, xx.GrantedPointsAdd);
                                    }
                                }
                            }
                        }
                        if (sizestbl.Rows.Count > 0)
                        {
                            var sizesList = new SqlParameter("@Sizes", SqlDbType.Structured);
                            sizesList.Value = sizestbl;
                            Params.Add(sizesList);
                        }
                        if (sizespricetbl.Rows.Count > 0)
                        {
                            var sizesPricesList = new SqlParameter("@SizesPrices", SqlDbType.Structured);
                            sizesPricesList.Value = sizespricetbl;
                            Params.Add(sizesPricesList);
                        }
                    }


                    //Images
                    if (Images != null)
                    {
                        DataTable imagestbl;
                        using (imagestbl = new DataTable())
                        {
                            imagestbl.Columns.Add("Id", typeof(string));
                            imagestbl.Columns.Add("Bit1", typeof(bool));
                            imagestbl.Columns.Add("Bit2", typeof(bool));
                            foreach (ItemImageClass x in Images)
                                imagestbl.Rows.Add(x.ImageUrl, x.ShowInItemCarousel, x.ShowInItemGallery);
                        }
                        var imagesList = new SqlParameter("@Images", SqlDbType.Structured);
                        imagesList.Value = imagestbl;
                        Params.Add(imagesList);
                    }

                    if (Prices != null)
                    {
                        //Prices
                        DataTable pricestbl;
                        using (pricestbl = new DataTable())
                        {
                            pricestbl.Columns.Add("Price", typeof(double));
                            pricestbl.Columns.Add("TypeId", typeof(int));
                            pricestbl.Columns.Add("CountryCurrencyId", typeof(int));
                            pricestbl.Columns.Add("RequiredPoints", typeof(int));
                            pricestbl.Columns.Add("GrantedPoints", typeof(int));

                            foreach (var x in Prices)
                                pricestbl.Rows.Add(x.Price, x.TypeId, x.CountryCurrencyId, x.RequiredPoints, x.GrantedPoints);
                        }

                        if (pricestbl.Rows.Count > 0)
                        {
                            var pricesList = new SqlParameter("@Prices", SqlDbType.Structured);
                            pricesList.Value = pricestbl;
                            Params.Add(pricesList);
                        }
                    }

                    //Country
                    if (Countries != null)
                    {
                        DataTable Countrytable;
                        using (Countrytable = new DataTable())
                        {
                            Countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                Countrytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Countries", SqlDbType.Structured);
                        CList.Value = Countrytable;
                        Params.Add(CList);
                    }

                    //BookingDays
                    if (BookingDays != null)
                    {
                        DataTable bookingdayTbl;
                        using (bookingdayTbl = new DataTable())
                        {
                            bookingdayTbl.Columns.Add("Id", typeof(string));
                            foreach (ItemBookingDayClass x in BookingDays)
                                bookingdayTbl.Rows.Add(x.DayId);
                        }
                        var BDList = new SqlParameter("@DaysIds", SqlDbType.Structured);
                        BDList.Value = bookingdayTbl;
                        Params.Add(BDList);
                    }
                    //BookingDayTimes
                    if (BookingDays != null)
                    {
                        DataTable bookingdayTimeTbl;
                        using (bookingdayTimeTbl = new DataTable())
                        {
                            bookingdayTimeTbl.Columns.Add("DayId", typeof(string));
                            bookingdayTimeTbl.Columns.Add("Time", typeof(string));
                            bookingdayTimeTbl.Columns.Add("Not", typeof(string));
                            foreach (ItemBookingDayClass Day in BookingDays)
                            {
                                foreach (ItemBookingDayTimeClass DayTimes in Day.ItemBookingDayTime)
                                {
                                    bookingdayTimeTbl.Rows.Add(Day.DayId, DayTimes.Time, DayTimes.Note);
                                }
                            }
                        }
                        var BDList = new SqlParameter("@DayTimes", SqlDbType.Structured);
                        BDList.Value = bookingdayTimeTbl;
                        Params.Add(BDList);
                    }

                    //Series
                    if (Series != null)
                    {
                        DataTable Seriestable;
                        using (Seriestable = new DataTable())
                        {
                            Seriestable.Columns.Add("Id", typeof(string));
                            Seriestable.Columns.Add("ItemId", typeof(string));
                            Seriestable.Columns.Add("ColorId", typeof(string));
                            Seriestable.Columns.Add("SizeId", typeof(string));
                            Seriestable.Columns.Add("Quantity", typeof(string));
                            foreach (ItemSeriesClass x in Series)
                                Seriestable.Rows.Add(0, 0, x.ColorId, x.SizeId, x.Quantity);
                        }
                        var CList = new SqlParameter("@Series", SqlDbType.Structured);
                        CList.Value = Seriestable;
                        Params.Add(CList);
                    }


                    //Serials
                    if (Serials != null)
                    {
                        DataTable Serialstable;
                        using (Serialstable = new DataTable())
                        {
                            Serialstable.Columns.Add("Id", typeof(string));
                            Serialstable.Columns.Add("ItemId", typeof(string));
                            Serialstable.Columns.Add("Serial", typeof(string));
                            Serialstable.Columns.Add("IsScanned", typeof(string));
                            Serialstable.Columns.Add("ScannerUserId", typeof(string));
                            Serialstable.Columns.Add("ScanningDate", typeof(string));
                            Serialstable.Columns.Add("ScanningPoints", typeof(string));
                            Serialstable.Columns.Add("Disabled", typeof(string));
                            Serialstable.Columns.Add("Notes", typeof(string));
                            Serialstable.Columns.Add("IsChecked", typeof(string));
                            Serialstable.Columns.Add("CheckDate", typeof(string));
                            Serialstable.Columns.Add("CheckerUserId", typeof(string));
                            Serialstable.Columns.Add("CreatedBy", typeof(string));
                            Serialstable.Columns.Add("CreateDate", typeof(string));
                            Serialstable.Columns.Add("GiftedPoints", typeof(string));

                            foreach (ItemSerialClass x in Serials)
                                Serialstable.Rows.Add(x.Id, x.ItemId, x.Serial, x.IsScanned, x.ScannerUserId, x.ScanningDate, x.ScanningPoints, x.Disabled, x.Notes, x.IsChecked, x.CheckDate, x.CheckerUserId
                                    , x.CreatedBy, x.CreateDate, x.GiftedPoints);

                        }
                        var CList = new SqlParameter("@Serials", SqlDbType.Structured);
                        CList.Value = Serialstable;
                        Params.Add(CList);
                    }

                    //Tags
                    if (Tags != null)
                    {
                        DataTable tagstbl;
                        using (tagstbl = new DataTable())
                        {
                            tagstbl.Columns.Add("Item", typeof(int));
                            foreach (ItemTagClass x in Tags)
                                tagstbl.Rows.Add(x.TagId);
                        }
                        var tagsList = new SqlParameter("@Tags", SqlDbType.Structured);
                        tagsList.Value = tagstbl;
                        Params.Add(tagsList);
                    }

                    //MatchedItems
                    if (MatchedItems != null)
                    {
                        DataTable Matcheditemtable;
                        using (Matcheditemtable = new DataTable())
                        {
                            Matcheditemtable.Columns.Add("Id", typeof(string));
                            foreach (int x in MatchedItems)
                                Matcheditemtable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@MatchedItemsIds", SqlDbType.Structured);
                        CList.Value = Matcheditemtable;
                        Params.Add(CList);
                    }


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        itemsDataClass.ItemClass = new ItemClass().PopulateItemClass(fieldNames, reader);

                        //Companies
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCompanyClass> CompaniesList = new List<ItemsCompanyClass>();
                                ItemsCompanyClass itemsCompany;

                                while (reader.Read())
                                {
                                    itemsCompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                                    CompaniesList.Add(itemsCompany);
                                }
                                itemsDataClass.Companies = CompaniesList;
                            }
                        }

                        //Governorates
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsGovernorateClass> GovernoratesList = new List<ItemsGovernorateClass>();
                                ItemsGovernorateClass itemsGovernorate;

                                while (reader.Read())
                                {
                                    itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                                    GovernoratesList.Add(itemsGovernorate);
                                }
                                itemsDataClass.Governorates = GovernoratesList;
                            }
                        }

                        //Users Types
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsUsersTypeClass> UsersTypesList = new List<ItemsUsersTypeClass>();
                                ItemsUsersTypeClass itemsUserType;

                                while (reader.Read())
                                {
                                    itemsUserType = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                                    UsersTypesList.Add(itemsUserType);
                                }
                                itemsDataClass.UsersTypes = UsersTypesList;
                            }
                        }

                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemImageClass> ImagesList = new List<ItemImageClass>();
                                ItemImageClass itemsImage;

                                while (reader.Read())
                                {
                                    itemsImage = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                                    ImagesList.Add(itemsImage);
                                }
                                itemsDataClass.Images = ImagesList;
                            }
                        }

                        //Colors                    
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorClass> ColorsList = new List<ItemColorClass>();
                                ItemColorClass itemColor;

                                while (reader.Read())
                                {
                                    itemColor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                                    ColorsList.Add(itemColor);
                                }
                                itemsDataClass.Colors = ColorsList;
                            }
                        }

                        //Sizes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizeClass> SizesList = new List<ItemSizeClass>();
                                ItemSizeClass itemSize;

                                while (reader.Read())
                                {
                                    itemSize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                                    SizesList.Add(itemSize);
                                }
                                itemsDataClass.Sizes = SizesList;
                            }
                        }


                        //Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> PricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemPrice;

                                while (reader.Read())
                                {
                                    itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    PricesList.Add(itemPrice);
                                }
                                itemsDataClass.Prices = PricesList;
                            }
                        }

                        //Config Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> ConfigPricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemConfigPrice;

                                while (reader.Read())
                                {
                                    itemConfigPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    ConfigPricesList.Add(itemConfigPrice);
                                }
                                itemsDataClass.ConfigPrices = ConfigPricesList;
                            }
                        }
                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCountryClass> CountriesList = new List<ItemsCountryClass>();
                                ItemsCountryClass itemsCountry;

                                while (reader.Read())
                                {
                                    itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                                    CountriesList.Add(itemsCountry);
                                }
                                itemsDataClass.Countries = CountriesList;
                            }
                        }

                        //BookingDay
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemBookingDayClass> BookingDayList = new List<ItemBookingDayClass>();
                                ItemBookingDayClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    bookingDays = new ItemBookingDayClass().PopulateItemBookingDay(fieldNames, reader);

                                    bookingDays.Order = Order;
                                    BookingDayList.Add(bookingDays);
                                }
                                itemsDataClass.BookingDays = BookingDayList;
                            }
                        }
                        //BookingDaysTimes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                //List<ItemBookingDayTimeClass> BookingDayList = new List<ItemBookingDayTimeClass>();
                                ItemBookingDayTimeClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    bookingDays = new ItemBookingDayTimeClass().PopulateItemBookingDayTime(fieldNames, reader);
                                    foreach (ItemBookingDayClass item in itemsDataClass.BookingDays)
                                    {
                                        if (item.Id == bookingDays.ItemBookingDayId)
                                        {
                                            Order++;
                                            bookingDays.Order = Order;
                                            item.ItemBookingDayTime.Add(bookingDays);
                                        }
                                    }
                                    //BookingDayList.Add(bookingDays);
                                }
                                //itemsDataClass.BookingDays = BookingDayList;
                            }
                        }

                        //Series
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSeriesClass> itemSeriesList = new List<ItemSeriesClass>();
                                ItemSeriesClass itemSeries;

                                while (reader.Read())
                                {
                                    itemSeries = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);

                                    itemSeriesList.Add(itemSeries);
                                }
                                itemsDataClass.Series = itemSeriesList;
                            }
                        }

                        if (Serials != null)
                        {
                            if (reader.NextResult())
                            {
                                //Serials
                                if (reader.HasRows)
                                {
                                    fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                    List<ItemSerialClass> itemSerialsList = new List<ItemSerialClass>();
                                    ItemSerialClass itemSerial;

                                    int Order = 0;
                                    while (reader.Read())
                                    {
                                        itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                                        Order++;
                                        itemSerial.Order = Order;
                                        itemSerialsList.Add(itemSerial);
                                    }
                                    itemsDataClass.Serials = itemSerialsList;

                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            //Tags
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemTagClass> itemTagsList = new List<ItemTagClass>();
                                ItemTagClass itemTag;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemTag = new ItemTagClass().PopulateItemTag(fieldNames, reader);
                                    Order++;
                                    itemTag.Order = Order;
                                    itemTagsList.Add(itemTag);
                                }
                                itemsDataClass.Tags = itemTagsList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //SizesPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizePriceAddClass> itemSizesPricesList = new List<ItemSizePriceAddClass>();
                                ItemSizePriceAddClass itemSizePriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSizePriceAdd = new ItemSizePriceAddClass().PopulateItemSizePriceAdd(fieldNames, reader);
                                    Order++;
                                    itemSizePriceAdd.Order = Order;
                                    itemSizesPricesList.Add(itemSizePriceAdd);
                                }
                                itemsDataClass.SizesPrices = itemSizesPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //ColorsPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorPriceAddClass> itemColorsPricesList = new List<ItemColorPriceAddClass>();
                                ItemColorPriceAddClass itemColorPriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemColorPriceAdd = new ItemColorPriceAddClass().PopulateItemColorPriceAdd(fieldNames, reader);
                                    Order++;
                                    itemColorPriceAdd.Order = Order;
                                    itemColorsPricesList.Add(itemColorPriceAdd);
                                }
                                itemsDataClass.ColorsPrices = itemColorsPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //MatchedItems
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";

                        //Add Item.Code to result
                        //result.Result = null;
                        itemsDataClass.ItemClass = new ItemClass() { Code = Item.Code };
                        result.Result = itemsDataClass;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemDataNew", e.Source, "");
                }

                //Add Item.Code to result
                itemsDataClass.ItemClass = new ItemClass() { Code = Item.Code };
                result.Result = itemsDataClass;

                return result;
            }
        }


        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsDataClass> UpdateItemData(int LoggedUser, ItemClass Item, List<int> Governorates,
        List<int> Companies, List<int> UserTypes, List<ItemImageClass> Images, List<ItemColorClass> Colors, List<ItemSizeClass> Sizes, 
        List<ItemPriceClass> Prices, List<int> Countries, List<ItemBookingDayClass> BookingDays, List<ItemSeriesClass> Series, List<ItemSerialClass> Serials, 
        List<ItemTagClass> Tags, List<ItemSizePriceAddClass> SizesPrices, List<ItemColorPriceAddClass> ColorsPrices, List<int> MatchedItems)
        {
            ResultClass<ItemsDataClass> result = new ResultClass<ItemsDataClass>();
            try
            {
                //Check license validity
                if (!Item.Disabled)
                {
                    int resultCode = 0;//ServiceMethod.CheckItemLicenseLimit();
                    if (resultCode != 0) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Item.Id),
                  new SqlParameter("ArabicName", Item.ArabicName),
                  new SqlParameter("EnglishName", Item.EnglishName),
                  new SqlParameter("Code", Item.Code.Trim()),
                  new SqlParameter("ArabicDescription", Item.ArabicDescription),
                  new SqlParameter("EnglishDescription", Item.EnglishDescription),
                  new SqlParameter("BrandId", Item.BrandId),
                  //new SqlParameter("ColorId", Item.ColorId),
                  //new SqlParameter("Size", Item.Size),
                  new SqlParameter("CountryId", Item.CountryId),
                  new SqlParameter("DefaultPriceTypeId", Item.DefaultPriceTypeId),
                  //new SqlParameter("Price", Item.Price),
                  //new SqlParameter("RequiredPoints", Item.RequiredPoints),
                  new SqlParameter("Disabled", Item.Disabled),
                  new SqlParameter("Notes", Item.Notes),
                  new SqlParameter("ImageURL", Item.ImageURL),
                  new SqlParameter("UpdatedBy", Item.UpdatedBy),
                  new SqlParameter("UpdateDate", Item.UpdateDate),
                  new SqlParameter("CategoryId", Item.CategoryId),
                  new SqlParameter("Param1", Item.Param1),
                  new SqlParameter("Param2", Item.Param2),
                  new SqlParameter("SizeImageURL", Item.SizeImageURL),
                  new SqlParameter("ItemURL", Item.ItemURL),
                  new SqlParameter("ArabicTitle", Item.ArabicTitle),
                  new SqlParameter("EnglishTitle", Item.EnglishTitle),
                  new SqlParameter("ShowCarouselInItemsList", Item.ShowCarouselInItemsList),
                  new SqlParameter("ShowDescriptionInItemsList", Item.ShowDescriptionInItemsList),
                  new SqlParameter("StockLevel", Item.StockLevel),
                  
                  //new SqlParameter("ItemTypeId", Item.ItemTypeId),
                  //new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId),
               };

                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    }

                    cmd.Parameters.Add(new SqlParameter("HasStartDateBooking", Item.HasStartDateBooking));
                    if (Item.HasStartDateBooking)
                        cmd.Parameters.Add(new SqlParameter("StartDateBooking", Item.StartDateBooking));

                    cmd.Parameters.Add(new SqlParameter("HasEndDateBooking", Item.HasEndDateBooking));
                    if (Item.HasEndDateBooking)
                        cmd.Parameters.Add(new SqlParameter("EndDateBooking", Item.EndDateBooking));

                    if (Item.ItemTypeId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemTypeId", Item.ItemTypeId));
                    if (Item.ItemDepartmentId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId));


                    /*if (Item.GrantedPoints > 0)
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", Item.GrantedPoints));*/

                    //Governorates
                    if (Governorates != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Governorates)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    //Companies
                    if (Companies != null)
                    {
                        DataTable Companytable;
                        using (Companytable = new DataTable())
                        {
                            Companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Companies)
                                Companytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Companies", SqlDbType.Structured);
                        CList.Value = Companytable;
                        Params.Add(CList);
                    }

                    //Companies
                    if (Countries != null)
                    {
                        DataTable Countrytable;
                        using (Countrytable = new DataTable())
                        {
                            Countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                Countrytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Countries", SqlDbType.Structured);
                        CList.Value = Countrytable;
                        Params.Add(CList);
                    }

                    //UserTypes
                    if (UserTypes != null)
                    {
                        DataTable table2;
                        using (table2 = new DataTable())
                        {
                            table2.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypes)
                                table2.Rows.Add(x);
                        }

                        var uList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        uList.Value = table2;
                        Params.Add(uList);
                    }

                    // Images
                    if (Images != null)
                    {
                        DataTable imagestbl;
                        using (imagestbl = new DataTable())
                        {
                            imagestbl.Columns.Add("Id", typeof(string));
                            imagestbl.Columns.Add("Bit1", typeof(bool));
                            imagestbl.Columns.Add("Bit2", typeof(bool));
                            foreach (ItemImageClass x in Images)
                                imagestbl.Rows.Add(x.ImageUrl, x.ShowInItemCarousel, x.ShowInItemGallery);
                        }
                        var imagesList = new SqlParameter("@Images", SqlDbType.Structured);
                        imagesList.Value = imagestbl;
                        Params.Add(imagesList);
                    }

                    //Colors
                    if (Colors != null)
                    {
                        DataTable colorstbl;
                        using (colorstbl = new DataTable())
                        {
                            colorstbl.Columns.Add("Id", typeof(int));
                            colorstbl.Columns.Add("ColorId", typeof(int));
                            colorstbl.Columns.Add("ColorImageURL", typeof(string));
                            colorstbl.Columns.Add("ArabicDescription", typeof(string));
                            colorstbl.Columns.Add("EnglishDescription", typeof(string));
                            colorstbl.Columns.Add("HexValue", typeof(string));
                            colorstbl.Columns.Add("ItemImageIndex", typeof(int));
                            colorstbl.Columns.Add("Disabled", typeof(bool));
                            colorstbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            foreach (var x in Colors)
                                colorstbl.Rows.Add(x.Id, x.ColorId, x.ColorImageURL, x.ArabicDescription, x.EnglishDescription, x.HexValue, x.ItemImageIndex, x.Disabled, x.RequiredPointsAdd);
                        }

                        if (colorstbl.Rows.Count > 0)
                        {
                            var colorsList = new SqlParameter("@Colors", SqlDbType.Structured);
                            colorsList.Value = colorstbl;
                            Params.Add(colorsList);
                        }
                    }
                    //Sizes
                    if (Sizes != null)
                    {
                        DataTable sizestbl;
                        using (sizestbl = new DataTable())
                        {
                            sizestbl.Columns.Add("Id", typeof(string));
                            sizestbl.Columns.Add("SizeId", typeof(string));
                            sizestbl.Columns.Add("ArabicDescription", typeof(string));
                            sizestbl.Columns.Add("EnglishDescription", typeof(string));
                            sizestbl.Columns.Add("Disabled", typeof(bool));
                            sizestbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            foreach (var x in Sizes)
                                sizestbl.Rows.Add(x.Id, x.SizeId, x.ArabicDescription, x.EnglishDescription, x.Disabled, x.RequiredPointsAdd);
                        }

                        if (sizestbl.Rows.Count > 0)
                        {
                            var sizesList = new SqlParameter("@Sizes", SqlDbType.Structured);
                            sizesList.Value = sizestbl;
                            Params.Add(sizesList);
                        }
                    }

                    if (Prices != null)
                    {
                        //Prices
                        DataTable pricestbl;
                        using (pricestbl = new DataTable())
                        {
                            pricestbl.Columns.Add("Price", typeof(double));
                            pricestbl.Columns.Add("TypeId", typeof(int));
                            pricestbl.Columns.Add("CountryCurrencyId", typeof(int));
                            pricestbl.Columns.Add("RequiredPoints", typeof(int));
                            pricestbl.Columns.Add("GrantedPoints", typeof(int));

                            foreach (var x in Prices)
                                pricestbl.Rows.Add(x.Price, x.TypeId, x.CountryCurrencyId, x.RequiredPoints, x.GrantedPoints);
                        }

                        if (pricestbl.Rows.Count > 0)
                        {
                            var pricesList = new SqlParameter("@Prices", SqlDbType.Structured);
                            pricesList.Value = pricestbl;
                            Params.Add(pricesList);
                        }
                    }

                    //BookingDays
                    if (BookingDays != null)
                    {
                        DataTable bookingdayTbl;
                        using (bookingdayTbl = new DataTable())
                        {
                            bookingdayTbl.Columns.Add("Id", typeof(string));
                            foreach (ItemBookingDayClass x in BookingDays)
                                bookingdayTbl.Rows.Add(x.DayId);
                        }
                        var BDList = new SqlParameter("@DaysIds", SqlDbType.Structured);
                        BDList.Value = bookingdayTbl;
                        Params.Add(BDList);
                    }
                    //BookingDayTimes
                    if (BookingDays != null)
                    {
                        DataTable bookingdayTimeTbl;
                        using (bookingdayTimeTbl = new DataTable())
                        {
                            bookingdayTimeTbl.Columns.Add("DayId", typeof(string));
                            bookingdayTimeTbl.Columns.Add("Time", typeof(string));
                            bookingdayTimeTbl.Columns.Add("Not", typeof(string));
                            foreach (ItemBookingDayClass Day in BookingDays)
                            {
                                foreach (ItemBookingDayTimeClass DayTimes in Day.ItemBookingDayTime)
                                {
                                    bookingdayTimeTbl.Rows.Add(Day.DayId, DayTimes.Time, DayTimes.Note);
                                }
                            }
                        }
                        var BDList = new SqlParameter("@DayTimes", SqlDbType.Structured);
                        BDList.Value = bookingdayTimeTbl;
                        Params.Add(BDList);
                    }

                    //Series
                    if (Series != null)
                    {
                        DataTable Seriestable;
                        using (Seriestable = new DataTable())
                        {
                            Seriestable.Columns.Add("Id", typeof(string));
                            Seriestable.Columns.Add("ItemId", typeof(string));
                            Seriestable.Columns.Add("ColorId", typeof(string));
                            Seriestable.Columns.Add("SizeId", typeof(string));
                            Seriestable.Columns.Add("Quantity", typeof(string));
                            foreach (ItemSeriesClass x in Series)
                                Seriestable.Rows.Add(0, 0, x.ColorId, x.SizeId, x.Quantity);
                        }
                        var CList = new SqlParameter("@Series", SqlDbType.Structured);
                        CList.Value = Seriestable;
                        Params.Add(CList);
                    }

                    if (Serials != null)
                    {
                        DataTable Serialstable;
                        using (Serialstable = new DataTable())
                        {
                            Serialstable.Columns.Add("Id", typeof(string));
                            Serialstable.Columns.Add("ItemId", typeof(string));
                            Serialstable.Columns.Add("Serial", typeof(string));
                            Serialstable.Columns.Add("IsScanned", typeof(string));
                            Serialstable.Columns.Add("ScannerUserId", typeof(string));
                            Serialstable.Columns.Add("ScanningDate", typeof(string));
                            Serialstable.Columns.Add("ScanningPoints", typeof(string));
                            Serialstable.Columns.Add("Disabled", typeof(string));
                            Serialstable.Columns.Add("Notes", typeof(string));
                            Serialstable.Columns.Add("IsChecked", typeof(string));
                            Serialstable.Columns.Add("CheckDate", typeof(string));
                            Serialstable.Columns.Add("CheckerUserId", typeof(string));
                            Serialstable.Columns.Add("CreatedBy", typeof(string));
                            Serialstable.Columns.Add("CreateDate", typeof(string));
                            Serialstable.Columns.Add("GiftedPoints", typeof(string)); 

                            foreach (ItemSerialClass x in Serials)
                                Serialstable.Rows.Add(x.Id, x.ItemId, x.Serial, x.IsScanned, x.ScannerUserId, x.ScanningDate, x.ScanningPoints, x.Disabled, x.Notes, x.IsChecked, x.CheckDate, x.CheckerUserId
                                    , x.CreatedBy, x.CreateDate, x.GiftedPoints);
                        }
                        var CList = new SqlParameter("@Serials", SqlDbType.Structured);
                        CList.Value = Serialstable;
                        Params.Add(CList);
                    }

                    //SizesPrices
                    if (SizesPrices != null)
                    {
                        DataTable Sizespricestable;
                        using (Sizespricestable = new DataTable())
                        {
                            Sizespricestable.Columns.Add("Id", typeof(int));
                            Sizespricestable.Columns.Add("ItemId", typeof(int));
                            Sizespricestable.Columns.Add("SizeGroupId", typeof(int));
                            Sizespricestable.Columns.Add("SizeId", typeof(int));
                            Sizespricestable.Columns.Add("ItemSizeId", typeof(int));
                            Sizespricestable.Columns.Add("PriceTypeId", typeof(int));
                            Sizespricestable.Columns.Add("CountryCurrencyId", typeof(int));
                            Sizespricestable.Columns.Add("PriceAdd", typeof(double));
                            Sizespricestable.Columns.Add("RequiredPointsAdd", typeof(int));
                            Sizespricestable.Columns.Add("GrantedPointsAdd", typeof(int));
                            foreach (ItemSizePriceAddClass x in SizesPrices)
                                Sizespricestable.Rows.Add(-1, -1, x.SizeGroupId, x.SizeId, -1, x.TypeId, x.CountryCurrencyId, x.PriceAdd, x.RequiredPointsAdd, x.GrantedPointsAdd);
                        }
                        var CList = new SqlParameter("@SizesPrices", SqlDbType.Structured);
                        CList.Value = Sizespricestable;
                        Params.Add(CList);
                    }

                    //ColorsPrices
                    if (ColorsPrices != null)
                    {
                        DataTable Colorspricestable;
                        using (Colorspricestable = new DataTable())
                        {
                            Colorspricestable.Columns.Add("Id", typeof(int));
                            Colorspricestable.Columns.Add("ItemId", typeof(int));
                            Colorspricestable.Columns.Add("ColorId", typeof(int));
                            Colorspricestable.Columns.Add("ItemColorId", typeof(int));
                            Colorspricestable.Columns.Add("PriceTypeId", typeof(int));
                            Colorspricestable.Columns.Add("CountryCurrencyId", typeof(int));
                            Colorspricestable.Columns.Add("PriceAdd", typeof(double));
                            Colorspricestable.Columns.Add("RequiredPointsAdd", typeof(int));
                            Colorspricestable.Columns.Add("GrantedPointsAdd", typeof(int));

                            foreach (ItemColorPriceAddClass x in ColorsPrices)
                                Colorspricestable.Rows.Add(-1, -1, x.ColorId, -1, x.TypeId, x.CountryCurrencyId, x.PriceAdd, x.RequiredPointsAdd, x.GrantedPointsAdd);
                        }
                        var CList = new SqlParameter("@ColorsPrices", SqlDbType.Structured);
                        CList.Value = Colorspricestable;
                        Params.Add(CList);
                    }


                    //Tags
                    if (Tags != null)
                    {
                        DataTable tagstbl;
                        using (tagstbl = new DataTable())
                        {
                            tagstbl.Columns.Add("Item", typeof(int));
                            foreach (ItemTagClass x in Tags)
                                tagstbl.Rows.Add(x.TagId);
                        }
                        var tagsList = new SqlParameter("@Tags", SqlDbType.Structured);
                        tagsList.Value = tagstbl;
                        Params.Add(tagsList);
                    }



                    //MatchedItems
                    if (MatchedItems != null)
                    {
                        DataTable Matcheditemtable;
                        using (Matcheditemtable = new DataTable())
                        {
                            Matcheditemtable.Columns.Add("Id", typeof(string));
                            foreach (int x in MatchedItems)
                                Matcheditemtable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@MatchedItemsIds", SqlDbType.Structured);
                        CList.Value = Matcheditemtable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsDataClass itemsDataClass = new ItemsDataClass();

                        reader.Read();

                        itemsDataClass.ItemClass = new ItemClass().PopulateItemClass(fieldNames, reader);

                        //Companies
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCompanyClass> CompaniesList = new List<ItemsCompanyClass>();
                                ItemsCompanyClass itemsCompany;

                                while (reader.Read())
                                {
                                    itemsCompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                                    CompaniesList.Add(itemsCompany);
                                }
                                itemsDataClass.Companies = CompaniesList;
                            }
                        }


                        //Governorates
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsGovernorateClass> GovernoratesList = new List<ItemsGovernorateClass>();
                                ItemsGovernorateClass itemsGovernorate;

                                while (reader.Read())
                                {
                                    itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                                    GovernoratesList.Add(itemsGovernorate);
                                }
                                itemsDataClass.Governorates = GovernoratesList;
                            }
                        }


                        //Users Types
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsUsersTypeClass> UsersTypesList = new List<ItemsUsersTypeClass>();
                                ItemsUsersTypeClass itemsUserType;

                                while (reader.Read())
                                {
                                    itemsUserType = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                                    UsersTypesList.Add(itemsUserType);
                                }
                                itemsDataClass.UsersTypes = UsersTypesList;
                            }
                        }

                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemImageClass> ImagesList = new List<ItemImageClass>();
                                ItemImageClass itemsImage;

                                while (reader.Read())
                                {
                                    itemsImage = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                                    ImagesList.Add(itemsImage);
                                }
                                itemsDataClass.Images = ImagesList;
                            }
                        }

                        //Colors
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorClass> ColorsList = new List<ItemColorClass>();
                                ItemColorClass itemColor;

                                while (reader.Read())
                                {
                                    itemColor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                                    ColorsList.Add(itemColor);
                                }
                                itemsDataClass.Colors = ColorsList;
                            }
                        }

                        //Sizes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizeClass> SizesList = new List<ItemSizeClass>();
                                ItemSizeClass itemSize;

                                while (reader.Read())
                                {
                                    itemSize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                                    SizesList.Add(itemSize);
                                }
                                itemsDataClass.Sizes = SizesList;
                            }
                        }


                        //Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> PricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemPrice;

                                while (reader.Read())
                                {
                                    itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    PricesList.Add(itemPrice);
                                }
                                itemsDataClass.Prices = PricesList;
                            }
                        }

                        //Config Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> ConfigPricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemConfigPrice;

                                while (reader.Read())
                                {
                                    itemConfigPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    ConfigPricesList.Add(itemConfigPrice);
                                }
                                itemsDataClass.ConfigPrices = ConfigPricesList;
                            }
                        }

                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCountryClass> CountriesList = new List<ItemsCountryClass>();
                                ItemsCountryClass itemsCountry;

                                while (reader.Read())
                                {
                                    itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                                    CountriesList.Add(itemsCountry);
                                }
                                itemsDataClass.Countries = CountriesList;
                            }
                        }

                        //BookingDay
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemBookingDayClass> BookingDayList = new List<ItemBookingDayClass>();
                                ItemBookingDayClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    bookingDays = new ItemBookingDayClass().PopulateItemBookingDay(fieldNames, reader);
                                    bookingDays.Order = Order;
                                    BookingDayList.Add(bookingDays);
                                }
                                itemsDataClass.BookingDays = BookingDayList;
                            }
                        }
                        //BookingDaysTimes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                ItemBookingDayTimeClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    bookingDays = new ItemBookingDayTimeClass().PopulateItemBookingDayTime(fieldNames, reader);
                                    foreach (ItemBookingDayClass item in itemsDataClass.BookingDays)
                                    {
                                        if (item.Id == bookingDays.ItemBookingDayId)
                                        {
                                            Order++;
                                            bookingDays.Order = Order;
                                            item.ItemBookingDayTime.Add(bookingDays);
                                        }
                                    }
                                }
                            }
                        }

                        //Series
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSeriesClass> SeriesList = new List<ItemSeriesClass>();
                                ItemSeriesClass itemSeries;

                                while (reader.Read())
                                {
                                    itemSeries = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);

                                    SeriesList.Add(itemSeries);
                                }
                                itemsDataClass.Series = SeriesList;
                            }
                        }

                        if (Serials != null)
                        {

                            if (reader.NextResult())
                            {
                                //Serials
                                if (reader.HasRows)
                                {
                                    fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                    List<ItemSerialClass> itemSerialsList = new List<ItemSerialClass>();
                                    ItemSerialClass itemSerial;

                                    int Order = 0;
                                    while (reader.Read())
                                    {
                                        itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                                        Order++;
                                        itemSerial.Order = Order;
                                        itemSerialsList.Add(itemSerial);
                                    }
                                    itemsDataClass.Serials = itemSerialsList;

                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            //Tags
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemTagClass> itemTagsList = new List<ItemTagClass>();
                                ItemTagClass itemTag;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemTag = new ItemTagClass().PopulateItemTag(fieldNames, reader);
                                    Order++;
                                    itemTag.Order = Order;
                                    itemTagsList.Add(itemTag);
                                }
                                itemsDataClass.Tags = itemTagsList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //SizesPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizePriceAddClass> itemSizesPricesList = new List<ItemSizePriceAddClass>();
                                ItemSizePriceAddClass itemSizePriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSizePriceAdd = new ItemSizePriceAddClass().PopulateItemSizePriceAdd(fieldNames, reader);
                                    Order++;
                                    itemSizePriceAdd.Order = Order;
                                    itemSizesPricesList.Add(itemSizePriceAdd);
                                }
                                itemsDataClass.SizesPrices = itemSizesPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //ColorsPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorPriceAddClass> itemColorsPricesList = new List<ItemColorPriceAddClass>();
                                ItemColorPriceAddClass itemColorPriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemColorPriceAdd = new ItemColorPriceAddClass().PopulateItemColorPriceAdd(fieldNames, reader);
                                    Order++;
                                    itemColorPriceAdd.Order = Order;
                                    itemColorsPricesList.Add(itemColorPriceAdd);
                                }
                                itemsDataClass.ColorsPrices = itemColorsPricesList;

                            }
                        }

                        //MatchedItems
                        if (MatchedItems != null)
                        {
                            DataTable Matcheditemtable;
                            using (Matcheditemtable = new DataTable())
                            {
                                Matcheditemtable.Columns.Add("Id", typeof(string));
                                foreach (int x in MatchedItems)
                                    Matcheditemtable.Rows.Add(x);
                            }
                            var CList = new SqlParameter("@MatchedItemsIds", SqlDbType.Structured);
                            CList.Value = Matcheditemtable;
                            Params.Add(CList);
                        }

                        if (reader.NextResult())
                        {
                            //MatchedItems
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsDataClass> CreateOrUpdateItemData(int LoggedUser, ItemClass Item, List<int> Governorates,
       List<int> Companies, List<int> UserTypes, List<ItemImageClass> Images, List<ItemColorClass> Colors, List<ItemSizeClass> Sizes, 
       List<ItemPriceClass> Prices, List<int> Countries, List<ItemBookingDayClass> BookingDays, List<ItemSeriesClass> Series, List<ItemSerialClass> Serials, 
       List<ItemTagClass> Tags, List<ItemSizePriceAddClass> SizesPrices, List<ItemColorPriceAddClass> ColorsPrices, List<int> MatchedItems)
        {
            ResultClass<ItemsDataClass> result = new ResultClass<ItemsDataClass>();
            try
            {
                //Check license validity
                if (!Item.Disabled)
                {
                    int resultCode = 0;// ServiceMethod.CheckItemLicenseLimit();
                    if (resultCode != 0) throw new Exception(resultCode.ToString());
                }

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 600000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CreateOrUpdateItemData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  //new SqlParameter("Id", Item.Id),
                  new SqlParameter("ArabicName", Item.ArabicName),
                  new SqlParameter("EnglishName", Item.EnglishName),
                  new SqlParameter("Code", Item.Code.Trim()),
                  new SqlParameter("ArabicDescription", Item.ArabicDescription),
                  new SqlParameter("EnglishDescription", Item.EnglishDescription),
                  new SqlParameter("BrandId", Item.BrandId),
                  //new SqlParameter("ColorId", Item.ColorId),
                  //new SqlParameter("Size", Item.Size),
                  new SqlParameter("CountryId", Item.CountryId),
                  new SqlParameter("DefaultPriceTypeId", Item.DefaultPriceTypeId),
                  //new SqlParameter("Price", Item.Price),
                  //new SqlParameter("RequiredPoints", Item.RequiredPoints),
                  new SqlParameter("Disabled", Item.Disabled),
                  new SqlParameter("Notes", Item.Notes),
                  new SqlParameter("ImageURL", Item.ImageURL),
                  new SqlParameter("CreatedBy", Item.CreatedBy),
                  new SqlParameter("UpdatedBy", Item.UpdatedBy),
                  new SqlParameter("CreateDate", Item.CreateDate),
                  new SqlParameter("UpdateDate", Item.UpdateDate),
                  new SqlParameter("CategoryId", Item.CategoryId),
                  new SqlParameter("Param1", Item.Param1),
                  new SqlParameter("Param2", Item.Param2),
                  new SqlParameter("SizeImageURL", Item.SizeImageURL),
                  new SqlParameter("OrderNo", Item.OrderNo),
                  new SqlParameter("ItemURL", Item.ItemURL),
                  new SqlParameter("ArabicTitle", Item.ArabicTitle),
                  new SqlParameter("EnglishTitle", Item.EnglishTitle),
                  new SqlParameter("ShowCarouselInItemsList", Item.ShowCarouselInItemsList),
                  new SqlParameter("ShowDescriptionInItemsList", Item.ShowDescriptionInItemsList),
                  new SqlParameter("StockLevel", Item.StockLevel),
                  //new SqlParameter("ItemTypeId", Item.ItemTypeId),
                  //new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId),
               };

                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    };


                    cmd.Parameters.Add(new SqlParameter("HasStartDateBooking", Item.HasStartDateBooking));
                    if (Item.HasStartDateBooking)
                        cmd.Parameters.Add(new SqlParameter("StartDateBooking", Item.StartDateBooking));

                    cmd.Parameters.Add(new SqlParameter("HasEndDateBooking", Item.HasEndDateBooking));
                    if (Item.HasEndDateBooking)
                        cmd.Parameters.Add(new SqlParameter("EndDateBooking", Item.EndDateBooking));

                    if (Item.ItemTypeId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemTypeId", Item.ItemTypeId));
                    if (Item.ItemDepartmentId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemDepartmentId", Item.ItemDepartmentId));


                    /*if (Item.GrantedPoints > 0)
                        cmd.Parameters.Add(new SqlParameter("GrantedPoints", Item.GrantedPoints));*/

                    //Governorates
                    if (Governorates != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Governorates)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    //Companies
                    if (Companies != null)
                    {
                        DataTable Companytable;
                        using (Companytable = new DataTable())
                        {
                            Companytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Companies)
                                Companytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Companies", SqlDbType.Structured);
                        CList.Value = Companytable;
                        Params.Add(CList);
                    }

                    //Companies
                    if (Countries != null)
                    {
                        DataTable Countrytable;
                        using (Countrytable = new DataTable())
                        {
                            Countrytable.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                Countrytable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@Countries", SqlDbType.Structured);
                        CList.Value = Countrytable;
                        Params.Add(CList);
                    }

                    //UserTypes
                    if (UserTypes != null)
                    {
                        DataTable table2;
                        using (table2 = new DataTable())
                        {
                            table2.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypes)
                                table2.Rows.Add(x);
                        }

                        var uList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        uList.Value = table2;
                        Params.Add(uList);
                    }

                    // Images
                    if (Images != null)
                    {
                        DataTable imagestbl;
                        using (imagestbl = new DataTable())
                        {
                            imagestbl.Columns.Add("Id", typeof(string));
                            imagestbl.Columns.Add("Bit1", typeof(bool));
                            imagestbl.Columns.Add("Bit2", typeof(bool));
                            foreach (ItemImageClass x in Images)
                                imagestbl.Rows.Add(x.ImageUrl, x.ShowInItemCarousel, x.ShowInItemGallery);
                        }
                        var imagesList = new SqlParameter("@Images", SqlDbType.Structured);
                        imagesList.Value = imagestbl;
                        Params.Add(imagesList);
                    }

                    //Colors
                    if (Colors != null)
                    {
                        DataTable colorstbl;
                        using (colorstbl = new DataTable())
                        {
                            colorstbl.Columns.Add("Id", typeof(int));
                            colorstbl.Columns.Add("ColorId", typeof(int));
                            colorstbl.Columns.Add("ColorImageURL", typeof(string));
                            colorstbl.Columns.Add("ArabicDescription", typeof(string));
                            colorstbl.Columns.Add("EnglishDescription", typeof(string));
                            colorstbl.Columns.Add("HexValue", typeof(string));
                            colorstbl.Columns.Add("ItemImageIndex", typeof(int));
                            colorstbl.Columns.Add("Disabled", typeof(bool));
                            colorstbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            foreach (var x in Colors)
                                colorstbl.Rows.Add(x.Id, x.ColorId, x.ColorImageURL, x.ArabicDescription, x.EnglishDescription, x.HexValue, x.ItemImageIndex, x.Disabled, x.RequiredPointsAdd);
                        }

                        if (colorstbl.Rows.Count > 0)
                        {
                            var colorsList = new SqlParameter("@Colors", SqlDbType.Structured);
                            colorsList.Value = colorstbl;
                            Params.Add(colorsList);
                        }
                    }
                    //Sizes
                    if (Sizes != null)
                    {
                        DataTable sizestbl;
                        using (sizestbl = new DataTable())
                        {
                            sizestbl.Columns.Add("Id", typeof(string));
                            sizestbl.Columns.Add("SizeId", typeof(string));
                            sizestbl.Columns.Add("ArabicDescription", typeof(string));
                            sizestbl.Columns.Add("EnglishDescription", typeof(string));
                            sizestbl.Columns.Add("Disabled", typeof(bool));
                            sizestbl.Columns.Add("RequiredPointsAdd", typeof(int));
                            foreach (var x in Sizes)
                                sizestbl.Rows.Add(x.Id, x.SizeId, x.ArabicDescription, x.EnglishDescription, x.Disabled, x.RequiredPointsAdd);
                        }

                        if (sizestbl.Rows.Count > 0)
                        {
                            var sizesList = new SqlParameter("@Sizes", SqlDbType.Structured);
                            sizesList.Value = sizestbl;
                            Params.Add(sizesList);
                        }
                    }

                    if (Prices != null)
                    {
                        if (Prices.Count > 0)
                        {
                            //Prices
                            DataTable pricestbl;
                            using (pricestbl = new DataTable())
                            {
                                pricestbl.Columns.Add("Price", typeof(double));
                                pricestbl.Columns.Add("TypeId", typeof(int));
                                pricestbl.Columns.Add("CountryCurrencyId", typeof(int));
                                pricestbl.Columns.Add("RequiredPoints", typeof(int));
                                pricestbl.Columns.Add("GrantedPoints", typeof(int));
                                foreach (var x in Prices)
                                    pricestbl.Rows.Add(x.Price, x.TypeId, x.CountryCurrencyId, x.RequiredPoints, x.GrantedPoints);
                            }

                            if (pricestbl.Rows.Count > 0)
                            {
                                var pricesList = new SqlParameter("@Prices", SqlDbType.Structured);
                                pricesList.Value = pricestbl;
                                Params.Add(pricesList);
                            }
                        }
                    }

                    //BookingDays
                    if (BookingDays != null)
                    {
                        if (BookingDays.Count > 0)
                        {
                            DataTable bookingdayTbl;
                            using (bookingdayTbl = new DataTable())
                            {
                                bookingdayTbl.Columns.Add("Id", typeof(string));
                                foreach (ItemBookingDayClass x in BookingDays)
                                    bookingdayTbl.Rows.Add(x.DayId);
                            }
                            var BDList = new SqlParameter("@DaysIds", SqlDbType.Structured);
                            BDList.Value = bookingdayTbl;
                            Params.Add(BDList);
                        }
                    }
                    //BookingDayTimes
                    if (BookingDays != null)
                    {
                        if (BookingDays.Count > 0)
                        {
                            DataTable bookingdayTimeTbl;
                            using (bookingdayTimeTbl = new DataTable())
                            {
                                bookingdayTimeTbl.Columns.Add("DayId", typeof(string));
                                bookingdayTimeTbl.Columns.Add("Time", typeof(string));
                                bookingdayTimeTbl.Columns.Add("Not", typeof(string));
                                foreach (ItemBookingDayClass Day in BookingDays)
                                {
                                    foreach (ItemBookingDayTimeClass DayTimes in Day.ItemBookingDayTime)
                                    {
                                        bookingdayTimeTbl.Rows.Add(Day.DayId, DayTimes.Time, DayTimes.Note);
                                    }
                                }
                            }
                            if (bookingdayTimeTbl.Rows.Count > 0)
                            {
                                var BDList = new SqlParameter("@DayTimes", SqlDbType.Structured);
                                BDList.Value = bookingdayTimeTbl;
                                Params.Add(BDList);
                            }
                        }
                    }

                    //Series
                    if (Series != null)
                    {
                        if (Series.Count > 0)
                        {
                            DataTable Seriestable;
                            using (Seriestable = new DataTable())
                            {
                                Seriestable.Columns.Add("Id", typeof(string));
                                Seriestable.Columns.Add("ItemId", typeof(string));
                                Seriestable.Columns.Add("ColorId", typeof(string));
                                Seriestable.Columns.Add("SizeId", typeof(string));
                                Seriestable.Columns.Add("Quantity", typeof(string));
                                foreach (ItemSeriesClass x in Series)
                                    Seriestable.Rows.Add(0, 0, x.ColorId, x.SizeId, x.Quantity);
                            }
                            var CList = new SqlParameter("@Series", SqlDbType.Structured);
                            CList.Value = Seriestable;
                            Params.Add(CList);
                        }
                    }

                    if (Serials != null)
                    {
                        if (Serials.Count > 0)
                        {
                            DataTable Serialstable;
                            using (Serialstable = new DataTable())
                            {
                                Serialstable.Columns.Add("Id", typeof(string));
                                Serialstable.Columns.Add("ItemId", typeof(string));
                                Serialstable.Columns.Add("Serial", typeof(string));
                                Serialstable.Columns.Add("IsScanned", typeof(string));
                                Serialstable.Columns.Add("ScannerUserId", typeof(string));
                                Serialstable.Columns.Add("ScanningDate", typeof(string));
                                Serialstable.Columns.Add("ScanningPoints", typeof(string));
                                Serialstable.Columns.Add("Disabled", typeof(string));
                                Serialstable.Columns.Add("Notes", typeof(string));
                                Serialstable.Columns.Add("IsChecked", typeof(string));
                                Serialstable.Columns.Add("CheckDate", typeof(string));
                                Serialstable.Columns.Add("CheckerUserId", typeof(string));
                                Serialstable.Columns.Add("CreatedBy", typeof(string));
                                Serialstable.Columns.Add("CreateDate", typeof(string));
                                Serialstable.Columns.Add("GiftedPoints", typeof(string));

                                foreach (ItemSerialClass x in Serials)
                                    Serialstable.Rows.Add(x.Id, x.ItemId, x.Serial, x.IsScanned, x.ScannerUserId, x.ScanningDate, x.ScanningPoints, x.Disabled, x.Notes, x.IsChecked, x.CheckDate, x.CheckerUserId
                                        , x.CreatedBy, x.CreateDate, x.GiftedPoints);
                            }
                            var CList = new SqlParameter("@Serials", SqlDbType.Structured);
                            CList.Value = Serialstable;
                            Params.Add(CList);
                        }
                    }

                    //Tags
                    if (Tags != null)
                    {
                        DataTable tagstbl;
                        using (tagstbl = new DataTable())
                        {
                            tagstbl.Columns.Add("Item", typeof(int));
                            foreach (ItemTagClass x in Tags)
                                tagstbl.Rows.Add(x.TagId);
                        }
                        var tagsList = new SqlParameter("@Tags", SqlDbType.Structured);
                        tagsList.Value = tagstbl;
                        Params.Add(tagsList);
                    }

                    //SizesPrices
                    if (SizesPrices != null)
                    {
                        DataTable Sizespricestable;
                        using (Sizespricestable = new DataTable())
                        {
                            Sizespricestable.Columns.Add("Id", typeof(int));
                            Sizespricestable.Columns.Add("ItemId", typeof(int));                            
                            Sizespricestable.Columns.Add("SizeGroupId", typeof(int));
                            Sizespricestable.Columns.Add("SizeId", typeof(int));
                            Sizespricestable.Columns.Add("ItemSizeId", typeof(int));
                            Sizespricestable.Columns.Add("PriceTypeId", typeof(int));
                            Sizespricestable.Columns.Add("CountryCurrencyId", typeof(int));                            
                            Sizespricestable.Columns.Add("PriceAdd", typeof(double));
                            Sizespricestable.Columns.Add("RequiredPointsAdd", typeof(int));
                            Sizespricestable.Columns.Add("GrantedPointsAdd", typeof(int));
                            foreach (ItemSizePriceAddClass x in SizesPrices)
                                Sizespricestable.Rows.Add(-1, -1, x.SizeGroupId, x.SizeId, -1, x.TypeId, x.CountryCurrencyId, x.PriceAdd, x.RequiredPointsAdd, x.GrantedPointsAdd);
                        }
                        var CList = new SqlParameter("@SizesPrices", SqlDbType.Structured);
                        CList.Value = Sizespricestable;
                        Params.Add(CList);
                    }

                    //ColorsPrices
                    if (ColorsPrices != null)
                    {
                        DataTable Colorspricestable;
                        using (Colorspricestable = new DataTable())
                        {
                            Colorspricestable.Columns.Add("Id", typeof(int));
                            Colorspricestable.Columns.Add("ItemId", typeof(int));
                            Colorspricestable.Columns.Add("ColorId", typeof(int));
                            Colorspricestable.Columns.Add("ItemColorId", typeof(int));
                            Colorspricestable.Columns.Add("PriceTypeId", typeof(int));
                            Colorspricestable.Columns.Add("CountryCurrencyId", typeof(int));
                            Colorspricestable.Columns.Add("PriceAdd", typeof(double));
                            Colorspricestable.Columns.Add("RequiredPointsAdd", typeof(int));
                            Colorspricestable.Columns.Add("GrantedPointsAdd", typeof(int));

                            foreach (ItemColorPriceAddClass x in ColorsPrices)
                                Colorspricestable.Rows.Add(-1, -1, x.ColorId, -1, x.TypeId, x.CountryCurrencyId, x.PriceAdd, x.RequiredPointsAdd, x.GrantedPointsAdd);
                        }
                        var CList = new SqlParameter("@ColorsPrices", SqlDbType.Structured);
                        CList.Value = Colorspricestable;
                        Params.Add(CList);
                    }

                    //MatchedItems
                    if (MatchedItems != null)
                    {
                        DataTable Matcheditemtable;
                        using (Matcheditemtable = new DataTable())
                        {
                            Matcheditemtable.Columns.Add("Id", typeof(string));
                            foreach (int x in MatchedItems)
                                Matcheditemtable.Rows.Add(x);
                        }
                        var CList = new SqlParameter("@MatchedItemsIds", SqlDbType.Structured);
                        CList.Value = Matcheditemtable;
                        Params.Add(CList);
                    }


                    if (Item.OnRequest == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("OnRequest", Item.OnRequest));
                        cmd.Parameters.Add(new SqlParameter("OnRequestArabicMessage", Item.OnRequestArabicMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestEnglishMessage", Item.OnRequestEnglishMessage));
                        cmd.Parameters.Add(new SqlParameter("OnRequestDays", Item.OnRequestDays));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsDataClass itemsDataClass = new ItemsDataClass();

                        reader.Read();

                        itemsDataClass.ItemClass = new ItemClass().PopulateItemClass(fieldNames, reader);

                        //Companies
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCompanyClass> CompaniesList = new List<ItemsCompanyClass>();
                                ItemsCompanyClass itemsCompany;

                                while (reader.Read())
                                {
                                    itemsCompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                                    CompaniesList.Add(itemsCompany);
                                }
                                itemsDataClass.Companies = CompaniesList;
                            }
                        }


                        //Governorates
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsGovernorateClass> GovernoratesList = new List<ItemsGovernorateClass>();
                                ItemsGovernorateClass itemsGovernorate;

                                while (reader.Read())
                                {
                                    itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                                    GovernoratesList.Add(itemsGovernorate);
                                }
                                itemsDataClass.Governorates = GovernoratesList;
                            }
                        }


                        //Users Types
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsUsersTypeClass> UsersTypesList = new List<ItemsUsersTypeClass>();
                                ItemsUsersTypeClass itemsUserType;

                                while (reader.Read())
                                {
                                    itemsUserType = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                                    UsersTypesList.Add(itemsUserType);
                                }
                                itemsDataClass.UsersTypes = UsersTypesList;
                            }
                        }

                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemImageClass> ImagesList = new List<ItemImageClass>();
                                ItemImageClass itemsImage;

                                while (reader.Read())
                                {
                                    itemsImage = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                                    ImagesList.Add(itemsImage);
                                }
                                itemsDataClass.Images = ImagesList;
                            }
                        }

                        //Colors
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorClass> ColorsList = new List<ItemColorClass>();
                                ItemColorClass itemColor;

                                while (reader.Read())
                                {
                                    itemColor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                                    ColorsList.Add(itemColor);
                                }
                                itemsDataClass.Colors = ColorsList;
                            }
                        }

                        //Sizes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizeClass> SizesList = new List<ItemSizeClass>();
                                ItemSizeClass itemSize;

                                while (reader.Read())
                                {
                                    itemSize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                                    SizesList.Add(itemSize);
                                }
                                itemsDataClass.Sizes = SizesList;
                            }
                        }


                        //Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> PricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemPrice;

                                while (reader.Read())
                                {
                                    itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    PricesList.Add(itemPrice);
                                }
                                itemsDataClass.Prices = PricesList;
                            }
                        }

                        //Config Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> ConfigPricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemConfigPrice;

                                while (reader.Read())
                                {
                                    itemConfigPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    ConfigPricesList.Add(itemConfigPrice);
                                }
                                itemsDataClass.ConfigPrices = ConfigPricesList;
                            }
                        }

                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCountryClass> CountriesList = new List<ItemsCountryClass>();
                                ItemsCountryClass itemsCountry;

                                while (reader.Read())
                                {
                                    itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                                    CountriesList.Add(itemsCountry);
                                }
                                itemsDataClass.Countries = CountriesList;
                            }
                        }

                        //BookingDay
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemBookingDayClass> BookingDayList = new List<ItemBookingDayClass>();
                                ItemBookingDayClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    Order++;
                                    bookingDays = new ItemBookingDayClass().PopulateItemBookingDay(fieldNames, reader);
                                    bookingDays.Order = Order;
                                    BookingDayList.Add(bookingDays);
                                }
                                itemsDataClass.BookingDays = BookingDayList;
                            }
                        }
                        //BookingDaysTimes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                ItemBookingDayTimeClass bookingDays;
                                int Order = 0;
                                while (reader.Read())
                                {
                                    bookingDays = new ItemBookingDayTimeClass().PopulateItemBookingDayTime(fieldNames, reader);
                                    foreach (ItemBookingDayClass item in itemsDataClass.BookingDays)
                                    {
                                        if (item.Id == bookingDays.ItemBookingDayId)
                                        {
                                            Order++;
                                            bookingDays.Order = Order;
                                            item.ItemBookingDayTime.Add(bookingDays);
                                        }
                                    }
                                }
                            }
                        }


                        //Series
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSeriesClass> SeriesList = new List<ItemSeriesClass>();
                                ItemSeriesClass itemSeries;

                                while (reader.Read())
                                {
                                    itemSeries = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);

                                    SeriesList.Add(itemSeries);
                                }
                                itemsDataClass.Series = SeriesList;
                            }
                        }


                        if (Serials != null)
                        {
                            if (reader.NextResult())
                            {
                                //Serials
                                if (reader.HasRows)
                                {
                                    fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                    List<ItemSerialClass> itemSerialsList = new List<ItemSerialClass>();
                                    ItemSerialClass itemSerial;

                                    int Order = 0;
                                    while (reader.Read())
                                    {
                                        itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                                        Order++;
                                        itemSerial.Order = Order;
                                        itemSerialsList.Add(itemSerial);
                                    }
                                    itemsDataClass.Serials = itemSerialsList;

                                }
                            }
                        }


                        if (reader.NextResult())
                        {
                            //Tags
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemTagClass> itemTagsList = new List<ItemTagClass>();
                                ItemTagClass itemTag;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemTag = new ItemTagClass().PopulateItemTag(fieldNames, reader);
                                    Order++;
                                    itemTag.Order = Order;
                                    itemTagsList.Add(itemTag);
                                }
                                itemsDataClass.Tags = itemTagsList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //SizesPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizePriceAddClass> itemSizesPricesList = new List<ItemSizePriceAddClass>();
                                ItemSizePriceAddClass itemSizePriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemSizePriceAdd = new ItemSizePriceAddClass().PopulateItemSizePriceAdd(fieldNames, reader);
                                    Order++;
                                    itemSizePriceAdd.Order = Order;
                                    itemSizesPricesList.Add(itemSizePriceAdd);
                                }
                                itemsDataClass.SizesPrices = itemSizesPricesList;

                            }
                        }

                        if (reader.NextResult())
                        {
                            //ColorsPrices
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorPriceAddClass> itemColorsPricesList = new List<ItemColorPriceAddClass>();
                                ItemColorPriceAddClass itemColorPriceAdd;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    itemColorPriceAdd = new ItemColorPriceAddClass().PopulateItemColorPriceAdd(fieldNames, reader);
                                    Order++;
                                    itemColorPriceAdd.Order = Order;
                                    itemColorsPricesList.Add(itemColorPriceAdd);
                                }
                                itemsDataClass.ColorsPrices = itemColorsPricesList;

                            }
                        }

                        //MatchedItems
                        if (MatchedItems != null)
                        {
                            DataTable Matcheditemtable;
                            using (Matcheditemtable = new DataTable())
                            {
                                Matcheditemtable.Columns.Add("Id", typeof(string));
                                foreach (int x in MatchedItems)
                                    Matcheditemtable.Rows.Add(x);
                            }
                            var CList = new SqlParameter("@MatchedItemsIds", SqlDbType.Structured);
                            CList.Value = Matcheditemtable;
                            Params.Add(CList);
                        }


                        if (reader.NextResult())
                        {
                            //MatchedItems
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrUpdateItemData", e.Source, "");
                }
                result.Result = new ItemsDataClass { ItemClass = new ItemClass { Code = Item.Code } };
                return result;
            }
        }


        /// <summary>
        /// this API added for matjar to return Item with Map without touch the get Items in Atlas
        /// </summary>
        [SwaggerWcfTag("Items")]
        public ResultClass<ItemsWithMapClass> GetItemsWithMap(int LoggedUser, int? CategoryId, string CountryName, int PageId, int RecordsCount, bool OrderByKey, string OrderKey)
        {
            ResultClass<ItemsWithMapClass> result = new ResultClass<ItemsWithMapClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItems";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    if ((OrderByKey) || (!string.IsNullOrWhiteSpace(OrderKey)))
                    {
                        Params.Add(new SqlParameter("OrderByKey", OrderByKey));
                        Params.Add(new SqlParameter("OrderKey", OrderKey));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemsWithMapClass itemsWithMapClass = new ItemsWithMapClass();
                        itemsWithMapClass.Items = new List<ItemClass>();
                        result.Result = new ItemsWithMapClass();

                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass item;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;
                            item = new ItemClass().PopulateItemClass(fieldNames, reader);
                            item.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(item);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result.Items = Items;

                        CategoriesWithMapClass categoriesWithMap = new CategoriesWithMapClass();
                        itemsWithMapClass.CategoriesMap = new CategoriesWithMapClass();

                        int totalCont = 0;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                reader.Read();
                                if (fieldNames.Contains("TotalCount"))
                                    if (!Convert.IsDBNull(reader["TotalCount"]))
                                        totalCont = Convert.ToInt32(reader["TotalCount"]);
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                List<CategoryClass> Categories = new List<CategoryClass>();
                                CategoryClass category;
                                order = 0;
                                while (reader.Read())
                                {
                                    order += 1;
                                    category = new CategoryClass().PopulateCategory(fieldNames, reader);
                                    category.Order = order + (RecordsCount * (PageId - 1));
                                    Categories.Add(category);
                                }
                                categoriesWithMap.Categories = Categories;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<CategoryMapClass> categoriesMap = new List<CategoryMapClass>();
                                CategoryMapClass map;
                                while (reader.Read())
                                {
                                    map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);

                                    categoriesMap.Add(map);
                                }
                                categoriesWithMap.CategoriesMap = categoriesMap;
                            }
                        }
                        result.Result.CategoriesMap = categoriesWithMap;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsWithMap", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        //For Matjar

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass>> GetFeatureItems(int LoggedUser, int? CategoryId, string CountryName, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItems";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("OrderByTotalLike", true),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetFeatureItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemClass>> GetBestSellingItems(int LoggedUser, int? CategoryId, string CountryName, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsBestSelling";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBestSellingItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Items")]
        public ResultClass<List<ResultClass<ItemsDataClass>>> CreateItemsFromExcel(int LoggedUser, string Url)
        {
            
            ResultClass<List<ResultClass<ItemsDataClass>>> result = new ResultClass<List<ResultClass<ItemsDataClass>>>();
            try
            {
                

                //Sheets name
                string itemWorksheetName = "توصيف المادة";
                string countryWorksheetName = "محددات ظهور - بلدان";
                string governorateWorksheetName = "محددات ظهور - محافظات";
                string sizeWorksheetName = "القياسات";
                string colorWorksheetName = "الالوان";
                string priceWorksheetName = "الاسعار";
                string seriesWorksheetName = "السيريات";
                string serialsWorksheetName = "الارقام التسلسلية";
                string tagsWorksheetName = "التاغات";
                string sizesPricesWorksheetName = "اسعار القياسات";
                string colorsPricesWorksheetName = "اسعار الالوان";
                string matchedItemsWorksheetName = "الأصناف المشابهة";

                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@"/", @"\");

                byte[] file = File.ReadAllBytes(@filePath);
                MemoryStream ms = new MemoryStream(file);
                var package = new ExcelPackage(ms);
                ExcelPackage.LicenseContext =  LicenseContext.NonCommercial;

                

                ExcelWorksheet ItemWorkSheet = null;
                ExcelWorksheet CountryWorkSheet = null;
                ExcelWorksheet GovernorateWorkSheet = null;
                ExcelWorksheet SizeWorkSheet = null;
                ExcelWorksheet ColorWorkSheet = null;
                ExcelWorksheet PriceWorkSheet = null;
                ExcelWorksheet SeriesWorkSheet = null;
                ExcelWorksheet SerialsWorkSheet = null;
                ExcelWorksheet TagsWorkSheet = null;
                ExcelWorksheet SizesPricesWorkSheet = null;
                ExcelWorksheet ColorsPricesWorkSheet = null;
                ExcelWorksheet MatchedItemsWorkSheet = null;

                try
                {
                   ItemWorkSheet = package.Workbook.Worksheets[itemWorksheetName];
                }
                catch {

                }
                try { 
                   CountryWorkSheet = package.Workbook.Worksheets[countryWorksheetName];
                }
                catch
                {
                }
                try { 
                   GovernorateWorkSheet = package.Workbook.Worksheets[governorateWorksheetName];
                }
                catch
                {
                    
                }
                try { 
                   SizeWorkSheet = package.Workbook.Worksheets[sizeWorksheetName];
                }
                catch
                {
                }
                try { 
                   ColorWorkSheet = package.Workbook.Worksheets[colorWorksheetName];
                }
                catch
                {
                }
                try { 
                   PriceWorkSheet = package.Workbook.Worksheets[priceWorksheetName];
                }
                catch
                {
                }
                try { 
                   SeriesWorkSheet = package.Workbook.Worksheets[seriesWorksheetName];
                }
                catch
                {
                }
                try
                { 
                   SerialsWorkSheet = package.Workbook.Worksheets[serialsWorksheetName];
                }
                catch
                {
                }
                try
                {
                    TagsWorkSheet = package.Workbook.Worksheets[tagsWorksheetName];
                }
                catch
                {
                }
                try
                {
                    SizesPricesWorkSheet = package.Workbook.Worksheets[sizesPricesWorksheetName];
                }
                catch
                {
                }
                try
                {
                    ColorsPricesWorkSheet = package.Workbook.Worksheets[colorsPricesWorksheetName];
                }
                catch
                {
                }

                try
                {
                    MatchedItemsWorkSheet = package.Workbook.Worksheets[matchedItemsWorksheetName];
                }
                catch
                {
                }

                //Get Item Columns
                string CodeAddress = "";
                string ArabicNameAddress = "";
                string EnglishNameAddress = "";
                string CategoryIdAddress = "";
                string BrandIdAddress = "";
                string CountryIdAddress = "";
                string ItemDepartmentIdAddress = "";
                string ItemTypeIdAddress = "";
                string ArabicDescriptionAddress = "";
                string EnglishDescriptionAddress = "";
                string NotesAddress = "";
                string IsWholeSaleAddress = "";
                string DisabledAddress = "";
                string OrderNoAddress = "";
                string OnRequestAddress = "";
                string OnRequestArabicMessageAddress = "";
                string OnRequestEnglishMessageAddress = "";
                string OnRequestDaysAddress = "";

                string ArabicTitleAddress = "";
                string EnglishTitleAddress = "";
                string ShowCarouselInItemsListAddress = "";
                string ShowDescriptionInItemsListAddress = "";
                string StockLevelAddress = "";
                if (ItemWorkSheet != null)
                {
                    //Get Item Columns
                    CodeAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "رمز المادة") ?? "";
                     ArabicNameAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "اسم المادة عربي") ?? "";
                     EnglishNameAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "اسم المادة انكليزي") ?? "";
                     CategoryIdAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "رمز المجموعة") ?? "";
                     BrandIdAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "الماركة") ?? "";
                     CountryIdAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "بلد المنشا") ?? "";
                     ItemDepartmentIdAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "القسم") ?? "";
                     ItemTypeIdAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "نوع المادة") ?? "";
                     ArabicDescriptionAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "معلومات عن المادة عربي") ?? "";
                     EnglishDescriptionAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "معلومات عن المادة انكليزي") ?? "";
                     NotesAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "ملاحظات") ?? "";
                     //RequiredPointsAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "النقاط المطلوبة");
                     //GrantedPointsAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "النقاط الممنوحة");
                     IsWholeSaleAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "مادة جملة") ?? "";
                     DisabledAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "ايقاف") ?? "";
                     OrderNoAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "ترتيب الظهور") ?? ""; 
                     OnRequestAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "مادة عند الطلب") ?? "";
                     OnRequestArabicMessageAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "رسالة العربي عند الطلب") ?? "";
                     OnRequestEnglishMessageAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "رسالة الانكليزي عند الطلب") ?? "";
                     OnRequestDaysAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "عدد ايام الطلب") ?? "";

                     ArabicTitleAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "العنوان عربي") ?? "";
                     EnglishTitleAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "العنوان انكليزي") ?? "";
                     ShowCarouselInItemsListAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "اظهار الصور ضمن قائمة المواد") ?? "";
                     ShowDescriptionInItemsListAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "اظهار العنوان و الشرح ضمن قائمة المواد") ?? "";
                     StockLevelAddress = ServiceMethod.GetExcelCellByValue(ItemWorkSheet, "مستوى الكمية") ?? "";
                }

                string ItemCountries_CodeAddress = "";
                string ItemCountries_CountryIdAddress = "";

                if (CountryWorkSheet != null)
                {
                    //Get ItemCountries Columns
                    ItemCountries_CodeAddress = ServiceMethod.GetExcelCellByValue(CountryWorkSheet, "رمز المادة") ?? "";
                    ItemCountries_CountryIdAddress = ServiceMethod.GetExcelCellByValue(CountryWorkSheet, "البلد") ?? "";
                }

                string ItemGovernorates_CodeAddress = "";
                string ItemGovernorates_CountryIdAddress = "";
                string ItemGovernorates_GovernorateIdAddress = "";

                if (GovernorateWorkSheet != null)
                {
                    //Get ItemGovernorates Columns
                    ItemGovernorates_CodeAddress = ServiceMethod.GetExcelCellByValue(GovernorateWorkSheet, "رمز المادة") ?? "";
                    ItemGovernorates_CountryIdAddress = ServiceMethod.GetExcelCellByValue(GovernorateWorkSheet, "البلد") ?? "";
                    ItemGovernorates_GovernorateIdAddress = ServiceMethod.GetExcelCellByValue(GovernorateWorkSheet, "المحافظة") ?? "";
                }

                string ItemSizes_CodeAddress = "";
                string ItemSizes_SizeChartIdAddress = "";
                string ItemSizes_SizeIdAddress = "";
                string ItemSizes_ArabicDescriptionAddress = "";
                string ItemSizes_EnglishDescriptionAddress = "";

                if (SizeWorkSheet != null)
                {
                    //Get ItemSizes Columns
                    ItemSizes_CodeAddress = ServiceMethod.GetExcelCellByValue(SizeWorkSheet, "رمز المادة") ?? ""; 
                    ItemSizes_SizeChartIdAddress = ServiceMethod.GetExcelCellByValue(SizeWorkSheet, "مسطرة القياس") ?? "";
                    ItemSizes_SizeIdAddress = ServiceMethod.GetExcelCellByValue(SizeWorkSheet, "القياس") ?? "";
                    ItemSizes_ArabicDescriptionAddress = ServiceMethod.GetExcelCellByValue(SizeWorkSheet, "الوصف عربي") ?? "";
                    ItemSizes_EnglishDescriptionAddress = ServiceMethod.GetExcelCellByValue(SizeWorkSheet, "الوصف انكليزي") ?? "";
                }

                string ItemColors_CodeAddress = "";
                string ItemColors_ColorIdAddress = "";
                string ItemColors_HexValueAddress = "";
                string ItemColors_ArabicDescriptionAddress = "";
                string ItemColors_EnglishDescriptionAddress = "";

                if (ColorWorkSheet != null)
                {
                    //Get ItemColorsTbl Columns
                    ItemColors_CodeAddress = ServiceMethod.GetExcelCellByValue(ColorWorkSheet, "رمز المادة") ?? "";
                    ItemColors_ColorIdAddress = ServiceMethod.GetExcelCellByValue(ColorWorkSheet, "اللون") ?? "";
                    ItemColors_HexValueAddress = ServiceMethod.GetExcelCellByValue(ColorWorkSheet, "القيمة") ?? "";
                    ItemColors_ArabicDescriptionAddress = ServiceMethod.GetExcelCellByValue(ColorWorkSheet, "الوصف عربي") ?? "";
                    ItemColors_EnglishDescriptionAddress = ServiceMethod.GetExcelCellByValue(ColorWorkSheet, "الوصف انكليزي") ?? "";
                    //string ItemColors_ItemImageInedxAddress = ServiceMethod.GetExcelCellByValue(ColorWorkSheet, "رقم الصورة");
                }

                string ItemPrices_CodeAddress = "";
                string ItemPrices_PriceTypeIdAddress = "";
                string ItemPrices_CountryIdAddress = "";
                string ItemPrices_CurrencyIdAddress = "";
                string ItemPrices_ValueAddress = "";
                string ItemPrices_RequiredPointsAddress = "";
                string ItemPrices_GrantedPointsAddress = "";


                if (PriceWorkSheet != null)
                {
                    //Get ItemPricesTbl Columns
                    ItemPrices_CodeAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "رمز المادة") ?? "";
                    ItemPrices_PriceTypeIdAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "نوع السعر") ?? "";
                    ItemPrices_CountryIdAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "البلد") ?? "";
                    ItemPrices_CurrencyIdAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "العملة") ?? "";
                    ItemPrices_ValueAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "القيمة") ?? "";
                    ItemPrices_RequiredPointsAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "النقاط المطلوبة") ?? "";
                    ItemPrices_GrantedPointsAddress = ServiceMethod.GetExcelCellByValue(PriceWorkSheet, "النقاط الممنوحة") ?? "";
                }

                string ItemSeries_CodeAddress = "";
                string ItemSeries_ColorIdAddress = "";
                string ItemSeries_SizeIdAddress = "";
                string ItemSeries_QuantityAddress = "";


                if (SeriesWorkSheet != null)
                {
                    //Get ItemSeries Columns
                    ItemSeries_CodeAddress = ServiceMethod.GetExcelCellByValue(SeriesWorkSheet, "رمز المادة") ?? "";
                    ItemSeries_ColorIdAddress = ServiceMethod.GetExcelCellByValue(SeriesWorkSheet, "اللون") ?? "";
                    ItemSeries_SizeIdAddress = ServiceMethod.GetExcelCellByValue(SeriesWorkSheet, "القياس") ?? "";                    
                    ItemSeries_QuantityAddress = ServiceMethod.GetExcelCellByValue(SeriesWorkSheet, "الكمية") ?? "";
                }

                string ItemSerials_CodeAddress = "";
                string ItemSerials_SerialAddress = "";

                if (SerialsWorkSheet != null)
                {
                    //Get ItemSerials Columns
                    ItemSerials_CodeAddress = ServiceMethod.GetExcelCellByValue(SerialsWorkSheet, "رمز المادة") ?? "";
                    ItemSerials_SerialAddress = ServiceMethod.GetExcelCellByValue(SerialsWorkSheet, "السيريال") ?? "";
                }

                string ItemTags_CodeAddress = "";
                string ItemTags_TagTypeAddress = "";
                string ItemTags_TagAddress = "";

                if (TagsWorkSheet != null)
                {
                    //Get ItemTags Columns
                    ItemTags_CodeAddress = ServiceMethod.GetExcelCellByValue(TagsWorkSheet, "رمز المادة") ?? ""; 
                    ItemTags_TagTypeAddress = ServiceMethod.GetExcelCellByValue(TagsWorkSheet, "نوع التاغ") ?? "";
                    ItemTags_TagAddress = ServiceMethod.GetExcelCellByValue(TagsWorkSheet, "التاغ") ?? "";
                }

                string SizesPrices_CodeAddress = "";
                string SizesPrices_SizeChartIdAddress = "";
                string SizesPrices_SizeIdAddress = "";
                string SizesPrices_PriceTypeIdAddress = "";
                string SizesPrices_CountryIdAddress = "";
                string SizesPrices_CurrencyIdAddress = "";
                string SizesPrices_ValueAddress = "";
                string SizesPrices_RequiredPointsAddress = "";
                string SizesPrices_GrantedPointsAddress = "";

                if (SizesPricesWorkSheet != null)
                {
                    //Get SizesPrices Columns
                    SizesPrices_CodeAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "رمز المادة") ?? ""; 
                    SizesPrices_SizeChartIdAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "مسطرة القياس") ?? "";
                    SizesPrices_SizeIdAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "القياس") ?? "";
                    SizesPrices_PriceTypeIdAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "نوع السعر") ?? "";
                    SizesPrices_CountryIdAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "البلد") ?? "";
                    SizesPrices_CurrencyIdAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "العملة") ?? "";
                    SizesPrices_ValueAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "القيمة") ?? "";
                    SizesPrices_RequiredPointsAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "النقاط المطلوبة") ?? "";
                    SizesPrices_GrantedPointsAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "النقاط الممنوحة") ?? "";
                }



                string ColorsPrices_CodeAddress = "";
                string ColorsPrices_ColorIdAddress = "";
                string ColorsPrices_PriceTypeIdAddress = "";
                string ColorsPrices_CountryIdAddress = "";
                string ColorsPrices_CurrencyIdAddress = "";
                string ColorsPrices_ValueAddress = "";
                string ColorsPrices_RequiredPointsAddress = "";
                string ColorsPrices_GrantedPointsAddress = "";

                if (ColorsPricesWorkSheet != null)
                {
                    //Get ColorsPrices Columns
                    ColorsPrices_CodeAddress = ServiceMethod.GetExcelCellByValue(ColorsPricesWorkSheet, "رمز المادة") ?? "";
                    ColorsPrices_ColorIdAddress = ServiceMethod.GetExcelCellByValue(ColorsPricesWorkSheet, "اللون") ?? "";
                    ColorsPrices_PriceTypeIdAddress = ServiceMethod.GetExcelCellByValue(ColorsPricesWorkSheet, "نوع السعر") ?? "";
                    ColorsPrices_CountryIdAddress = ServiceMethod.GetExcelCellByValue(ColorsPricesWorkSheet, "البلد") ?? ""; 
                    ColorsPrices_CurrencyIdAddress = ServiceMethod.GetExcelCellByValue(ColorsPricesWorkSheet, "العملة") ?? "";
                    ColorsPrices_ValueAddress = ServiceMethod.GetExcelCellByValue(ColorsPricesWorkSheet, "القيمة") ?? "";
                    ColorsPrices_RequiredPointsAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "النقاط المطلوبة") ?? "";
                    ColorsPrices_GrantedPointsAddress = ServiceMethod.GetExcelCellByValue(SizesPricesWorkSheet, "النقاط الممنوحة") ?? "";

                }

                string MatchedItems_CodeAddress = "";
                string MatchedItems_ItemAddress = "";

                if (MatchedItemsWorkSheet != null)
                {
                    //Get MatchedItems Columns
                    MatchedItems_CodeAddress = ServiceMethod.GetExcelCellByValue(MatchedItemsWorkSheet, "رمز المادة") ?? "";
                    MatchedItems_ItemAddress = ServiceMethod.GetExcelCellByValue(MatchedItemsWorkSheet, "رمز المادة المشابهة") ?? "";

                }
                
                
                var CategoriesTbl = new List<CategoriesTbl>();
                var BrandsTbl = new List<BrandsTbl>();
                var CountriesTbl = new List<CountriesTbl>(); 
                var CurrenciesTbl = new List<CurrenciesTbl>();
                var CountryCurrenciesTbl = new List<CountryCurrenciesTbl>();
                var GovernoratesTbl = new List<GovernoratesTbl>();
                var ItemDepartmentsTbl = new List<ItemDepartmentsTbl>();
                var ItemTypesTbl = new List<ItemTypesTbl>();
                var SizesGroupsTbl = new List<SizesGroupsTbl>();
                var SizesTbl = new List<SizesTbl>();
                var PriceTypesTbl = new List<PriceTypesTbl>();
                var ColorsTbl = new List<ColorsTbl>();
                var SeriesTbl = new List<ItemSeriesTbl>();
                var SerialsTbl = new List<ItemSerialsTbl>();
                var ItemTagsTbl = new List<ItemTagsTbl>();
                var TagsTypesTbl = new List<TagsTypesTbl>();
                var TagsTbl = new List<TagsTbl>();
                var SizesPricesTbl = new List<ItemSizesPricesTbl>();
                var ColorsPricesTbl = new List<ItemColorsPricesTbl>();
                var ItemsTbl = new List<ItemsTbl>();

                try
                {
                    CategoriesTbl = db.CategoriesTbl.ToList();
                } 
                catch (Exception e) {
                    CategoriesTbl = new List<CategoriesTbl>();                   
                };
                try
                {
                    BrandsTbl = db.BrandsTbl.ToList();
                }
                catch (Exception e)
                {
                    BrandsTbl = new List<BrandsTbl>();
                };
                try
                {
                    CountriesTbl = db.CountriesTbl.ToList();
                }
                catch (Exception e)
                {
                    CountriesTbl = new List<CountriesTbl>();
                };
                try
                {
                    CurrenciesTbl = db.CurrenciesTbl.ToList();
                }
                catch (Exception e)
                {
                    CurrenciesTbl = new List<CurrenciesTbl>();
                };
                try
                {
                    CountryCurrenciesTbl = db.CountryCurrenciesTbl.ToList();
                }
                catch (Exception e)
                {
                    CountryCurrenciesTbl = new List<CountryCurrenciesTbl>();
                };
                try
                {
                    GovernoratesTbl = db.GovernoratesTbl.ToList();
                }
                catch (Exception e)
                {
                    GovernoratesTbl = new List<GovernoratesTbl>();
                };
                try
                {
                    ItemDepartmentsTbl = db.ItemDepartmentsTbl.ToList();
                }
                catch (Exception e)
                {
                    ItemDepartmentsTbl = new List<ItemDepartmentsTbl>();
                };

                try
                {
                    ItemTypesTbl = db.ItemTypesTbl.ToList();
                }
                catch (Exception e)
                {
                    ItemTypesTbl = new List<ItemTypesTbl>();
                };

                try
                {
                    SizesGroupsTbl = db.SizesGroupsTbl.ToList();
                }
                catch (Exception e)
                {
                    SizesGroupsTbl = new List<SizesGroupsTbl>();
                };

                try
                {
                    SizesTbl = db.SizesTbl.ToList();
                }
                catch (Exception e)
                {
                    SizesTbl = new List<SizesTbl>();
                };

                try
                {
                    PriceTypesTbl = db.PriceTypesTbl.ToList();
                }
                catch (Exception e)
                {
                    PriceTypesTbl = new List<PriceTypesTbl>();
                };
                try
                {
                    ColorsTbl = db.ColorsTbl.ToList();
                }
                catch (Exception e)
                {
                    ColorsTbl = new List<ColorsTbl>();
                };
                try
                {
                    SeriesTbl = db.ItemSeriesTbl.ToList();
                }
                catch (Exception e)
                {
                    SeriesTbl = new List<ItemSeriesTbl>();
                };
                try
                {
                    SerialsTbl = db.ItemSerialsTbl.ToList();
                }
                catch (Exception e)
                {
                    SerialsTbl = new List<ItemSerialsTbl>();
                };
                try
                {
                    TagsTbl = db.TagsTbl.ToList();
                }
                catch (Exception e)
                {
                    TagsTbl = new List<TagsTbl>();
                };

                try
                {
                    TagsTypesTbl = db.TagsTypesTbl.ToList();
                }
                catch (Exception e)
                {
                    TagsTypesTbl = new List<TagsTypesTbl>();
                };

                try
                {
                    ItemTagsTbl = db.ItemTagsTbl.ToList();
                }
                catch (Exception e)
                {
                    ItemTagsTbl = new List<ItemTagsTbl>();
                };

                try
                {
                    SizesPricesTbl = db.ItemSizesPricesTbl.ToList();
                }
                catch (Exception e)
                {
                    SizesPricesTbl = new List<ItemSizesPricesTbl>();
                };

                try
                {
                    ColorsPricesTbl = db.ItemColorsPricesTbl.ToList();
                }
                catch (Exception e)
                {
                    ColorsPricesTbl = new List<ItemColorsPricesTbl>();
                };

                try
                {
                    ItemsTbl = db.ItemsTbl.ToList();
                }
                catch (Exception e)
                {
                    ItemsTbl = new List<ItemsTbl>();
                };

                //GetCountriesCurrenciesPriceTypes 
                //var priceTypesResult = GetCountriesCurrenciesPriceTypes();

                List<ResultClass<ItemsDataClass>> itemsResultList = new List<ResultClass<ItemsDataClass>>();
                ResultClass<ItemsDataClass> ItemResult;

                ItemClass newItem;

                int firstRow = 2;
                if (ItemWorkSheet != null)
                {
                    for (int i = firstRow; i <= ItemWorkSheet.Dimension.End.Row; i++)
                    {
                        newItem = new ItemClass();

                        newItem.CreatedBy = LoggedUser;
                        newItem.UpdatedBy = LoggedUser;

                        newItem.Code = ItemWorkSheet.Cells[CodeAddress + i.ToString()]?.Value?.ToString().Trim();

                        try
                        {
                            newItem.StockLevel = Convert.ToInt32(ItemWorkSheet.Cells[StockLevelAddress + i.ToString()]?.Value?.ToString());
                        }
                        catch (Exception e)
                        { 
                            newItem.StockLevel = -1; 
                        }

                        newItem.ArabicName = ItemWorkSheet.Cells[ArabicNameAddress + i.ToString()]?.Value?.ToString().Trim();
                        newItem.EnglishName = ItemWorkSheet.Cells[EnglishNameAddress + i.ToString()]?.Value?.ToString().Trim();
                        newItem.DefaultPriceTypeId = 1;
                        newItem.ArabicDescription = ItemWorkSheet.Cells[ArabicDescriptionAddress + i.ToString()]?.Value?.ToString().Trim();
                        newItem.EnglishDescription = ItemWorkSheet.Cells[EnglishDescriptionAddress + i.ToString()]?.Value?.ToString().Trim();
                        newItem.Notes = ItemWorkSheet.Cells[NotesAddress + i.ToString()]?.Value?.ToString().Trim();
                        //newItem.RequiredPoints = Convert.ToDouble(ItemWorkSheet.Cells[RequiredPointsAddress + i.ToString()]?.Value);
                        //newItem.GrantedPoints = Convert.ToDouble(ItemWorkSheet.Cells[GrantedPointsAddress + i.ToString()]?.Value);
                        newItem.IsWholeSale = (ItemWorkSheet.Cells[IsWholeSaleAddress + i.ToString()]?.Value?.ToString() == "لا") ? false : true;
                        newItem.Disabled = (ItemWorkSheet.Cells[DisabledAddress + i.ToString()]?.Value?.ToString() == "لا") ? false : true;

                        if (OrderNoAddress != "")
                        {
                            if (ItemWorkSheet.Cells[OrderNoAddress + i.ToString()]?.Value != null)
                                newItem.OrderNo = Convert.ToInt32(ItemWorkSheet.Cells[OrderNoAddress + i.ToString()]?.Value);
                            else
                                newItem.OrderNo = i;
                        }

                        if (OnRequestAddress != "")
                        newItem.OnRequest = (ItemWorkSheet.Cells[OnRequestAddress + i.ToString()]?.Value?.ToString() == "لا") ? false : true;
                        if (OnRequestArabicMessageAddress != "")
                        newItem.OnRequestArabicMessage = ItemWorkSheet.Cells[OnRequestArabicMessageAddress + i.ToString()]?.Value?.ToString().Trim();
                        if (OnRequestEnglishMessageAddress != "")
                        newItem.OnRequestEnglishMessage = ItemWorkSheet.Cells[OnRequestEnglishMessageAddress + i.ToString()]?.Value?.ToString().Trim();
                        if (OnRequestDaysAddress != "")
                        newItem.OnRequestDays = Convert.ToInt32(ItemWorkSheet.Cells[OnRequestDaysAddress + i.ToString()]?.Value);
                        if (ArabicTitleAddress != "")
                        newItem.ArabicTitle = ItemWorkSheet.Cells[ArabicTitleAddress + i.ToString()]?.Value?.ToString().Trim();
                        if (EnglishTitleAddress != "")
                        newItem.EnglishTitle = ItemWorkSheet.Cells[EnglishTitleAddress + i.ToString()]?.Value?.ToString().Trim();
                        if (ShowCarouselInItemsListAddress != "")
                        newItem.ShowCarouselInItemsList = (ItemWorkSheet.Cells[ShowCarouselInItemsListAddress + i.ToString()]?.Value?.ToString() == "لا") ? false : true;
                        if (ShowDescriptionInItemsListAddress != "")
                        newItem.ShowDescriptionInItemsList = (ItemWorkSheet.Cells[ShowDescriptionInItemsListAddress + i.ToString()]?.Value?.ToString() == "لا") ? false : true;


                        string CategoryCellValue = ItemWorkSheet.Cells[CategoryIdAddress + i.ToString()]?.Value?.ToString();
                        int CategoryId = CategoriesTbl.Where(x => x.Code.Equals(CategoryCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newItem.CategoryId = CategoryId;
                        string BrandCellValue = ItemWorkSheet.Cells[BrandIdAddress + i.ToString()]?.Value?.ToString();
                        int BrandId = BrandsTbl.Where(x => x.ArabicName.Equals(BrandCellValue.Trim()) || x.EnglishName.Equals(BrandCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newItem.BrandId = BrandId;
                        string CountryCellValue = ItemWorkSheet.Cells[CountryIdAddress + i.ToString()]?.Value?.ToString();
                        int CountryId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryCellValue.Trim()) || x.EnglishName.Equals(CountryCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newItem.CountryId = CountryId;

                        string ItemDepartmentCellValue = ItemWorkSheet.Cells[ItemDepartmentIdAddress + i.ToString()]?.Value?.ToString();
                        int ItemDepartmentId = ItemDepartmentsTbl.Where(x => x.ArabicName.Equals(ItemDepartmentCellValue.Trim()) || x.EnglishName.Equals(ItemDepartmentCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newItem.ItemDepartmentId = ItemDepartmentId;

                        string ItemTypeCellValue = ItemWorkSheet.Cells[ItemTypeIdAddress + i.ToString()]?.Value?.ToString();
                        int ItemTypeId = ItemTypesTbl.Where(x => x.ArabicName.Equals(ItemTypeCellValue.Trim()) || x.EnglishName.Equals(ItemTypeCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newItem.ItemTypeId = ItemTypeId;

                        //Countries

                        List<int> Countries = new List<int>();
                        if (CountryWorkSheet != null)
                        {
                            for (int j = 2; j <= CountryWorkSheet.Dimension.End.Row; j++)
                            {
                                if (CountryWorkSheet.Cells[ItemCountries_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    string CountryNameCellValue = CountryWorkSheet.Cells[ItemCountries_CountryIdAddress + j.ToString()]?.Value?.ToString();
                                    int CountryNameId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryNameCellValue.Trim()) || x.EnglishName.Equals(CountryNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    Countries.Add(CountryNameId);
                                }
                            }
                        }

                        //Governorates
                        List<int> Governorates = new List<int>();
                        if (GovernorateWorkSheet != null)
                        {
                            for (int j = 2; j <= GovernorateWorkSheet.Dimension.End.Row; j++)
                            {
                                if (GovernorateWorkSheet.Cells[ItemGovernorates_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    string CountryNameCellValue = GovernorateWorkSheet.Cells[ItemGovernorates_CountryIdAddress + j.ToString()]?.Value?.ToString();
                                    int CountryNameId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryNameCellValue.Trim()) || x.EnglishName.Equals(CountryNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    string GovernorateNameCellValue = GovernorateWorkSheet.Cells[ItemGovernorates_GovernorateIdAddress + j.ToString()]?.Value?.ToString();
                                    int GovernorateNameId = GovernoratesTbl.Where(y => y.CountryId.Equals(CountryNameId)).Where(x => x.ArabicName.Equals(GovernorateNameCellValue.Trim()) || x.EnglishName.Equals(GovernorateNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    Governorates.Add(GovernorateNameId);
                                }
                            }
                        }

                        //ItemSizes
                        List<ItemSizeClass> Sizes = new List<ItemSizeClass>();
                        if (SizeWorkSheet != null)
                        {
                            ItemSizeClass sizeClass;
                            for (int j = 2; j <= SizeWorkSheet.Dimension.End.Row; j++)
                            {
                                if (SizeWorkSheet.Cells[ItemSizes_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    sizeClass = new ItemSizeClass
                                    {
                                        ArabicDescription = SizeWorkSheet.Cells[ItemSizes_ArabicDescriptionAddress + j.ToString()]?.Value?.ToString(),
                                        EnglishDescription = SizeWorkSheet.Cells[ItemSizes_EnglishDescriptionAddress + j.ToString()]?.Value?.ToString()
                                    };

                                    string SizeGroupNameCellValue = SizeWorkSheet.Cells[ItemSizes_SizeChartIdAddress + j.ToString()]?.Value?.ToString();
                                    int itemSizeGroupId = SizesGroupsTbl.Where(x => x.ArabicName.Equals(SizeGroupNameCellValue.Trim()) || x.EnglishName.Equals(SizeGroupNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    string SizeNameCellValue = SizeWorkSheet.Cells[ItemSizes_SizeIdAddress + j.ToString()]?.Value?.ToString();
                                    sizeClass.SizeId = SizesTbl.Where(x => x.SizeGroupId.Equals(itemSizeGroupId)).Where(x => x.ArabicName.Equals(SizeNameCellValue.Trim()) || x.EnglishName.Equals(SizeNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    Sizes.Add(sizeClass);
                                }
                            }
                        }

                        //ItemColors
                        List<ItemColorClass> Colors = new List<ItemColorClass>();
                        if (ColorWorkSheet != null)
                        {
                            ItemColorClass colorClass;
                            for (int j = 2; j <= ColorWorkSheet.Dimension.End.Row; j++)
                            {
                                if (ColorWorkSheet.Cells[ItemColors_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    colorClass = new ItemColorClass
                                    {
                                        ArabicDescription = ColorWorkSheet.Cells[ItemColors_ArabicDescriptionAddress + j.ToString()]?.Value?.ToString().Trim(),
                                        EnglishDescription = ColorWorkSheet.Cells[ItemColors_EnglishDescriptionAddress + j.ToString()]?.Value?.ToString().Trim(),
                                        HexValue = ColorWorkSheet.Cells[ItemColors_HexValueAddress + j.ToString()]?.Value?.ToString().Trim(),
                                        //ItemImageIndex = Convert.ToInt32(ColorWorkSheet.Cells[ItemColors_ItemImageInedxAddress + j.ToString()]?.Value),
                                    };

                                    string ColorNameCellValue = ColorWorkSheet.Cells[ItemColors_ColorIdAddress + j.ToString()]?.Value?.ToString();
                                    colorClass.ColorId = ColorsTbl.Where(x => x.ArabicName.Equals(ColorNameCellValue.Trim()) || x.EnglishName.Equals(ColorNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    Colors.Add(colorClass);
                                }
                            }
                        }

                        //GetCountriesCurrenciesPriceTypes 
                        var priceTypesResult = GetCountriesCurrenciesPriceTypes();
                        //ItemPrices
                        List<ItemPriceClass> Prices = new List<ItemPriceClass>();
                        ItemPriceClass priceClass;

                        if (priceTypesResult != null)
                        {
                            //Add by default all prices list
                            Prices.AddRange(priceTypesResult.Result.ConfigPrices);
                            Prices.AddRange(priceTypesResult.Result.Prices);

                            if (PriceWorkSheet != null)
                            {
                                for (int j = 2; j <= PriceWorkSheet.Dimension.End.Row; j++)
                                {
                                    if (PriceWorkSheet.Cells[ItemPrices_CodeAddress + j.ToString()]?.Value?.ToString().Trim() == newItem.Code.Trim())
                                    {
                                        priceClass = new ItemPriceClass();
                                        priceClass.Price = Convert.ToString(PriceWorkSheet.Cells[ItemPrices_ValueAddress + j.ToString()]?.Value).Trim();

                                        priceClass.RequiredPoints = 0;
                                        if (ItemPrices_RequiredPointsAddress != "")
                                            if (PriceWorkSheet.Cells[ItemPrices_RequiredPointsAddress + j.ToString()]?.Value != null)
                                                priceClass.RequiredPoints = Convert.ToInt32(PriceWorkSheet.Cells[ItemPrices_RequiredPointsAddress + j.ToString()]?.Value);

                                        priceClass.GrantedPoints = 0;
                                        if (ItemPrices_GrantedPointsAddress != "")
                                            if (PriceWorkSheet.Cells[ItemPrices_GrantedPointsAddress + j.ToString()]?.Value != null)
                                                priceClass.GrantedPoints = Convert.ToInt32(PriceWorkSheet.Cells[ItemPrices_GrantedPointsAddress + j.ToString()]?.Value);

                                        string TypeNameCellValue = PriceWorkSheet.Cells[ItemPrices_PriceTypeIdAddress + j.ToString()]?.Value?.ToString();
                                        priceClass.TypeId = PriceTypesTbl.Where(x => x.ArabicName.Equals(TypeNameCellValue.Trim()) || x.EnglishName.Equals(TypeNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        string CountryNameCellValue = PriceWorkSheet.Cells[ItemPrices_CountryIdAddress + j.ToString()]?.Value?.ToString();
                                        priceClass.CountryId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryNameCellValue.Trim()) || x.EnglishName.Equals(CountryNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        string CurrencyNameCellValue = PriceWorkSheet.Cells[ItemPrices_CurrencyIdAddress + j.ToString()]?.Value?.ToString();
                                        priceClass.CurrencyId = CurrenciesTbl.Where(x => x.ArabicName.Equals(CurrencyNameCellValue.Trim()) || x.EnglishName.Equals(CurrencyNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        priceClass.CountryCurrencyId = CountryCurrenciesTbl.Where(x => x.CurrencyId.Equals(priceClass.CurrencyId) && x.CountryId.Equals(priceClass.CountryId)).Select(x => x.Id).FirstOrDefault();

                                        Prices.Add(priceClass);

                                        var obj = Prices.FirstOrDefault(x => x.TypeId == priceClass.TypeId &&
                                                                         x.CountryId == priceClass.CountryId &&
                                                                         x.CurrencyId == priceClass.CurrencyId &&
                                                                         x.CountryCurrencyId == priceClass.CountryCurrencyId
                                                                         );
                                        if (obj != null) obj.Price = priceClass.Price;

                                        if (obj != null) obj.RequiredPoints = priceClass.RequiredPoints;

                                        if (obj != null) obj.GrantedPoints = priceClass.GrantedPoints;

                                        string s = new JavaScriptSerializer().Serialize(priceClass);

                                        s = new JavaScriptSerializer().Serialize(Prices);
                                        if (obj != null)
                                        {
                                            s = new JavaScriptSerializer().Serialize(obj);
                                        }
                                    }
                                }
                            }
                        }


                        //ItemSeries
                        List<ItemSeriesClass> Series = new List<ItemSeriesClass>();
                        if (SeriesWorkSheet != null)
                        {
                            ItemSeriesClass seriesClass;
                            for (int j = 2; j <= SeriesWorkSheet.Dimension.End.Row; j++)
                            {
                                if (SeriesWorkSheet.Cells[ItemSeries_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    seriesClass = new ItemSeriesClass
                                    {
                                        Quantity = Convert.ToInt32(SeriesWorkSheet.Cells[ItemSeries_QuantityAddress + j.ToString()]?.Value),
                                    };

                                    string ColorNameCellValue = ColorWorkSheet.Cells[ItemColors_ColorIdAddress + j.ToString()]?.Value?.ToString().Trim();
                                    seriesClass.ColorId = ColorsTbl.Where(x => x.ArabicName.Equals(ColorNameCellValue.Trim()) || x.EnglishName.Equals(ColorNameCellValue.Trim()) || x.Code.Equals(ColorNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    string SizeNameCellValue = SizeWorkSheet.Cells[ItemColors_ColorIdAddress + j.ToString()]?.Value?.ToString().Trim();
                                    seriesClass.SizeId = SizesTbl.Where(x => x.ArabicName.Equals(SizeNameCellValue.Trim()) || x.EnglishName.Equals(SizeNameCellValue.Trim()) || x.Code.Equals(SizeNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();


                                    Series.Add(seriesClass);
                                }
                            }
                        }

                        List<ItemSerialClass> Serials = new List<ItemSerialClass>();
                        if (SerialsWorkSheet != null)
                        {
                            ItemSerialClass serialClass;
                            for (int j = 2; j <= SerialsWorkSheet.Dimension.End.Row; j++)
                            {
                                if (SerialsWorkSheet.Cells[ItemSerials_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    serialClass = new ItemSerialClass();

                                    string SerialCellValue = SerialsWorkSheet.Cells[ItemSerials_SerialAddress + j.ToString()]?.Value?.ToString().Trim();
                                    serialClass.Serial = SerialCellValue;

                                    Serials.Add(serialClass);
                                }
                            }
                        }

                        //ItemTags
                        var TagsTypesResult = GetTagTypes(LoggedUser, 0);
                        List<ItemTagClass> Tags = new List<ItemTagClass>();

                        if (TagsWorkSheet != null)
                        {
                            var TagsResult = GetTags(LoggedUser, 0, 0);

                            ItemTagClass itemTagClass;
                            TagTypeClass tagTypeClass;
                            
                            for (int j = 2; j <= TagsWorkSheet.Dimension.End.Row; j++)
                            {
                                if (TagsWorkSheet.Cells[ItemTags_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    
                                    string tagTypeCellValue = TagsWorkSheet.Cells[ItemTags_TagTypeAddress + j.ToString()]?.Value?.ToString().Trim();
                                    string tagCellValue = TagsWorkSheet.Cells[ItemTags_TagAddress + j.ToString()]?.Value?.ToString().Trim();

                                    if (TagsTypesResult.Result.Where((tt) => ((tt.ArabicName == tagTypeCellValue) || (tt.EnglishName == tagTypeCellValue))).ToList().Count > 0)
                                    {
                                        tagTypeClass = TagsTypesResult.Result.Where((tt) => ((tt.ArabicName == tagTypeCellValue) || (tt.EnglishName == tagTypeCellValue))).ToList()[0];
                                        if (tagTypeClass != null)
                                        {
                                             var tagsList = GetTags(LoggedUser, -1, tagTypeClass.Id);  
                                            if (tagsList != null)
                                            {
                                                if (tagsList.Result != null)
                                                {
                                                    if (tagsList.Result.Where((t) => ((t.ArabicName == tagCellValue) || (t.EnglishName == tagCellValue))).ToList().Count > 0)
                                                    {
                                                        TagClass tag = tagsList.Result.Where((t) => ((t.ArabicName == tagCellValue) || (t.EnglishName == tagCellValue))).ToList()[0];
                                                        itemTagClass = new ItemTagClass();
                                                        itemTagClass.TagId = tag.Id;
                                                        itemTagClass.TagArabicName = tag.ArabicName;
                                                        itemTagClass.TagEnglishName = tag.EnglishName;
                                                        Tags.Add(itemTagClass);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }

                        //GetCountriesCurrenciesPriceTypes 
                        var priceTypesResult2 = GetCountriesCurrenciesPriceTypes();
                        //ItemColorsPrices
                        List<ItemColorPriceAddClass> ColorsPrices = new List<ItemColorPriceAddClass>();

                        if (priceTypesResult2 != null)
                        {
                            if (ColorsPricesWorkSheet != null)
                            {
                                ItemColorPriceAddClass colorPriceAddClass;
                                for (int j = 2; j <= ColorsPricesWorkSheet.Dimension.End.Row; j++)
                                {
                                    if (ColorsPricesWorkSheet.Cells[ItemColors_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                    {
                                        colorPriceAddClass = new ItemColorPriceAddClass();
                                        colorPriceAddClass.PriceAdd = Convert.ToDouble(Convert.ToString(ColorsPricesWorkSheet.Cells[ColorsPrices_ValueAddress + j.ToString()]?.Value).Trim());

                                        if (ColorsPricesWorkSheet.Cells[ColorsPrices_RequiredPointsAddress + j.ToString()]?.Value != null)
                                            if (Convert.ToString(ColorsPricesWorkSheet.Cells[ColorsPrices_RequiredPointsAddress + j.ToString()]?.Value) != "")
                                                colorPriceAddClass.RequiredPointsAdd = Convert.ToInt32(Convert.ToString(ColorsPricesWorkSheet.Cells[ColorsPrices_RequiredPointsAddress + j.ToString()]?.Value).Trim());

                                        if (ColorsPricesWorkSheet.Cells[ColorsPrices_GrantedPointsAddress + j.ToString()]?.Value != null)
                                            if (Convert.ToString(ColorsPricesWorkSheet.Cells[ColorsPrices_GrantedPointsAddress + j.ToString()]?.Value) != "")
                                                colorPriceAddClass.GrantedPointsAdd = Convert.ToInt32(Convert.ToString(ColorsPricesWorkSheet.Cells[ColorsPrices_GrantedPointsAddress + j.ToString()]?.Value).Trim());

                                        string TypeNameCellValue = ColorsPricesWorkSheet.Cells[ColorsPrices_PriceTypeIdAddress + j.ToString()]?.Value?.ToString();
                                        colorPriceAddClass.TypeId = PriceTypesTbl.Where(x => x.ArabicName.Equals(TypeNameCellValue.Trim()) || x.EnglishName.Equals(TypeNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        string CountryNameCellValue = ColorsPricesWorkSheet.Cells[ColorsPrices_CountryIdAddress + j.ToString()]?.Value?.ToString();
                                        colorPriceAddClass.CountryId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryNameCellValue.Trim()) || x.EnglishName.Equals(CountryNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        string CurrencyNameCellValue = ColorsPricesWorkSheet.Cells[ColorsPrices_CurrencyIdAddress + j.ToString()]?.Value?.ToString();
                                        colorPriceAddClass.CurrencyId = CurrenciesTbl.Where(x => x.ArabicName.Equals(CurrencyNameCellValue.Trim()) || x.EnglishName.Equals(CurrencyNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        colorPriceAddClass.CountryCurrencyId = CountryCurrenciesTbl.Where(x => x.CurrencyId.Equals(colorPriceAddClass.CurrencyId) && x.CountryId.Equals(colorPriceAddClass.CountryId)).Select(x => x.Id).FirstOrDefault();
                                        
                                        string ColorNameCellValue = ColorsPricesWorkSheet.Cells[ColorsPrices_ColorIdAddress + j.ToString()]?.Value?.ToString();
                                        colorPriceAddClass.ColorId = ColorsTbl.Where(x => x.ArabicName.Equals(ColorNameCellValue.Trim()) || x.EnglishName.Equals(ColorNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();


                                        ColorsPrices.Add(colorPriceAddClass);

                                        var obj = ColorsPrices.FirstOrDefault(x => x.TypeId == colorPriceAddClass.TypeId &&
                                                                         x.CountryId == colorPriceAddClass.CountryId &&
                                                                         x.CurrencyId == colorPriceAddClass.CurrencyId &&
                                                                         x.CountryCurrencyId == colorPriceAddClass.CountryCurrencyId &&
                                                                         x.ColorId == colorPriceAddClass.ColorId
                                                                         );

                                        if (obj != null) obj.PriceAdd = colorPriceAddClass.PriceAdd;

                                        if (obj != null) obj.RequiredPointsAdd = colorPriceAddClass.RequiredPointsAdd;

                                        if (obj != null) obj.GrantedPointsAdd = colorPriceAddClass.GrantedPointsAdd;

                                        string s = new JavaScriptSerializer().Serialize(colorPriceAddClass);

                                        s = new JavaScriptSerializer().Serialize(ColorsPrices);
                                        if (obj != null)
                                        {
                                            s = new JavaScriptSerializer().Serialize(obj);
                                        }

                                    }
                                }
                            }
                        }



                        //GetCountriesCurrenciesPriceTypes 
                        var priceTypesResult3 = GetCountriesCurrenciesPriceTypes();

                        //ItemSizesPrices
                        List<ItemSizePriceAddClass> SizesPrices = new List<ItemSizePriceAddClass>();

                        if (priceTypesResult3 != null)
                        {
                            if (SizesPricesWorkSheet != null)
                            {
                                ItemSizePriceAddClass sizePriceAddClass;
                                for (int j = 2; j <= SizesPricesWorkSheet.Dimension.End.Row; j++)
                                {
                                    if (SizesPricesWorkSheet.Cells[SizesPrices_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                    {
                                        sizePriceAddClass = new ItemSizePriceAddClass();
                                        sizePriceAddClass.PriceAdd = Convert.ToDouble(Convert.ToString(SizesPricesWorkSheet.Cells[SizesPrices_ValueAddress + j.ToString()]?.Value).Trim());

                                        if (SizesPricesWorkSheet.Cells[SizesPrices_RequiredPointsAddress + j.ToString()]?.Value != null)
                                            if (Convert.ToString(SizesPricesWorkSheet.Cells[SizesPrices_RequiredPointsAddress + j.ToString()]?.Value) != "")
                                                sizePriceAddClass.RequiredPointsAdd = Convert.ToInt32(Convert.ToString(SizesPricesWorkSheet.Cells[SizesPrices_RequiredPointsAddress + j.ToString()]?.Value).Trim());

                                        if (SizesPricesWorkSheet.Cells[SizesPrices_GrantedPointsAddress + j.ToString()]?.Value != null)
                                            if (Convert.ToString(SizesPricesWorkSheet.Cells[SizesPrices_GrantedPointsAddress + j.ToString()]?.Value) != "")
                                                sizePriceAddClass.GrantedPointsAdd = Convert.ToInt32(Convert.ToString(SizesPricesWorkSheet.Cells[SizesPrices_GrantedPointsAddress + j.ToString()]?.Value).Trim());


                                        string TypeNameCellValue = SizesPricesWorkSheet.Cells[SizesPrices_PriceTypeIdAddress + j.ToString()]?.Value?.ToString();
                                        sizePriceAddClass.TypeId = PriceTypesTbl.Where(x => x.ArabicName.Equals(TypeNameCellValue.Trim()) || x.EnglishName.Equals(TypeNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        string CountryNameCellValue = SizesPricesWorkSheet.Cells[SizesPrices_CountryIdAddress + j.ToString()]?.Value?.ToString();
                                        sizePriceAddClass.CountryId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryNameCellValue.Trim()) || x.EnglishName.Equals(CountryNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        string CurrencyNameCellValue = SizesPricesWorkSheet.Cells[SizesPrices_CurrencyIdAddress + j.ToString()]?.Value?.ToString();
                                        sizePriceAddClass.CurrencyId = CurrenciesTbl.Where(x => x.ArabicName.Equals(CurrencyNameCellValue.Trim()) || x.EnglishName.Equals(CurrencyNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        sizePriceAddClass.CountryCurrencyId = CountryCurrenciesTbl.Where(x => x.CurrencyId.Equals(sizePriceAddClass.CurrencyId) && x.CountryId.Equals(sizePriceAddClass.CountryId)).Select(x => x.Id).FirstOrDefault();

                                        string SizeGroupNameCellValue = SizesPricesWorkSheet.Cells[SizesPrices_SizeChartIdAddress + j.ToString()]?.Value?.ToString();
                                        int itemSizeGroupId = SizesGroupsTbl.Where(x => x.ArabicName.Equals(SizeGroupNameCellValue.Trim()) || x.EnglishName.Equals(SizeGroupNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                                        sizePriceAddClass.SizeGroupId = itemSizeGroupId;

                                        string SizeNameCellValue = SizesPricesWorkSheet.Cells[SizesPrices_SizeIdAddress + j.ToString()]?.Value?.ToString();
                                        sizePriceAddClass.SizeId = SizesTbl.Where(x => x.SizeGroupId.Equals(itemSizeGroupId)).Where(x => x.ArabicName.Equals(SizeNameCellValue.Trim()) || x.EnglishName.Equals(SizeNameCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                        

                                        SizesPrices.Add(sizePriceAddClass);

                                        var obj = SizesPrices.FirstOrDefault(x => x.TypeId == sizePriceAddClass.TypeId &&
                                                                         x.CountryId == sizePriceAddClass.CountryId &&
                                                                         x.CurrencyId == sizePriceAddClass.CurrencyId &&
                                                                         x.CountryCurrencyId == sizePriceAddClass.CountryCurrencyId &&
                                                                         x.SizeId == sizePriceAddClass.SizeId &&
                                                                         x.SizeGroupId == sizePriceAddClass.SizeGroupId
                                                                         );

                                        if (obj != null) obj.PriceAdd = sizePriceAddClass.PriceAdd;
                                        if (obj != null) obj.RequiredPointsAdd = sizePriceAddClass.RequiredPointsAdd;
                                        if (obj != null) obj.GrantedPointsAdd = sizePriceAddClass.GrantedPointsAdd;

                                        string s = new JavaScriptSerializer().Serialize(sizePriceAddClass);
                                        
                                        Errors.LogError(LoggedUser, "sizeprice", "sizeprice", "1.0.3", "API", "sizeprice", s, "");

                                        s = new JavaScriptSerializer().Serialize(SizesPrices);
                                        if (obj != null)
                                        {
                                            s = new JavaScriptSerializer().Serialize(obj);
                                        }

                                    }
                                }
                            }
                        }

                        List<int> MatchedItemsIds = new List<int>();
                        if (MatchedItemsWorkSheet != null)
                        {
                            for (int j = 2; j <= MatchedItemsWorkSheet.Dimension.End.Row; j++)
                            {
                                if (MatchedItemsWorkSheet.Cells[MatchedItems_CodeAddress + j.ToString()]?.Value?.ToString() == newItem.Code)
                                {
                                    string MatchedItemCellValue = MatchedItemsWorkSheet.Cells[MatchedItems_ItemAddress + j.ToString()]?.Value?.ToString();
                                    int matchedItemId = ItemsTbl.Where(x => x.Code.Equals(MatchedItemCellValue.Trim())).Select(x => x.Id).FirstOrDefault();

                                    MatchedItemsIds.Add(matchedItemId);
                                }
                            }
                        }

                        ItemResult = CreateOrUpdateItemData(LoggedUser: LoggedUser, Item: newItem, Governorates: Governorates,
                        Companies: null, UserTypes: null, Images: null, Colors: Colors, Sizes: Sizes,
                        Prices: Prices, Countries: Countries, BookingDays: null, Series: Series, Serials: Serials, Tags: Tags, 
                        ColorsPrices: ColorsPrices, SizesPrices: SizesPrices, MatchedItems: MatchedItemsIds);


                        itemsResultList.Add(ItemResult);
                    }
                }

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = itemsResultList;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException?.Message??"", "CreateItemsFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


       [SwaggerWcfTag("Users")]
        public ResultClass<List<ResultClass<UserClass>>> CreateUsersFromExcel(int LoggedUser, string Url)
        {
            ResultClass<List<ResultClass<UserClass>>> result = new ResultClass<List<ResultClass<UserClass>>>();
            try
            {
                //Sheets name
                string UsersWorksheetName = "المستخدمين";
                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@"/", @"\");

                byte[] file = File.ReadAllBytes(filePath);
                MemoryStream ms = new MemoryStream(file);
                var package = new ExcelPackage(ms);

                ExcelWorksheet UsersWorkSheet = package.Workbook.Worksheets[UsersWorksheetName];

                //Get User Columns
                string QRCode = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الرمز");
                string FullName = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الاسم الكامل");
                string NickName = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "اسم الشهرة");
                string Username = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "اسم المستخدم");
                string Birthdate = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "تاريخ الميلاد");
                string CommercialName = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الاسم التجاري");
                string Gender = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الجنس");
                string Password = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "كلمة المرور");
                string Email = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "البريد الالكتروني");
                string MobileNumber = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "رقم الموبايل");
                string MobileCountryCode = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "رمز الدولة");
                string Country = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الدولة");
                string Governorate = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "المحافظة");
                string City = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "المدينة");
                string Location = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "المنطقة");
                string Address1 = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "العنوان1");
                string Address2 = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "العنوان2");
                string Currency = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "العملة");

                string MobileNumber2 = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "رقم الموبايل 2");
                string Nationality = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الجنسية");
                string CardNumber = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "رقم البطاقة");
                string AccountNumber = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "رقم الحساب");
                string ChildCount = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "عدد الأولاد");
                string MaritalStatus = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "الحالة الإجتماعية");
                string CardType = ServiceMethod.GetExcelCellByValue(UsersWorkSheet, "نوع البطاقة");

                //Fetch Item Data Tables
                var CountriesTbl = db.CountriesTbl.ToList();
                var GovernoratesTbl = db.GovernoratesTbl.ToList();
                var CitiesTbl = db.CitiesTbl.ToList();
                var LocationsTbl = db.LocationsTbl.ToList();
                var CurrenciesTbl = db.CurrenciesTbl.ToList();
                var CountryCurrenciesTbl = db.CountryCurrenciesTbl.ToList();
                var UserTypesTbl = db.UsersTypesTbl.ToList();

                //GetCountriesCurrenciesPriceTypes 
                //var priceTypesResult = GetCountriesCurrenciesPriceTypes();

                List<ResultClass<UserClass>> usersResultList = new List<ResultClass<UserClass>>();
                ResultClass<UserClass> userResult;

                UserClass newUser;

                int firstRow = 2;
                if (UsersWorkSheet != null)
                {
                    for (int i = firstRow; i <= UsersWorkSheet.Dimension.End.Row; i++)
                    {
                        newUser = new UserClass
                        {
                            FullName = UsersWorkSheet.Cells[FullName + i.ToString()]?.Value?.ToString(),
                            NickName = UsersWorkSheet.Cells[NickName + i.ToString()]?.Value?.ToString(),
                            Username = UsersWorkSheet.Cells[Username + i.ToString()]?.Value?.ToString(),
                            Birthdate = UsersWorkSheet.Cells[Birthdate + i.ToString()]?.Value?.ToString(),
                            CommercialName = UsersWorkSheet.Cells[CommercialName + i.ToString()]?.Value?.ToString(),
                            Gender = (UsersWorkSheet.Cells[Gender + i.ToString()]?.Value?.ToString() == "ذكر") ? 1 : 2,
                            Password = UsersWorkSheet.Cells[Password + i.ToString()]?.Value?.ToString(),
                            Email = UsersWorkSheet.Cells[Email + i.ToString()]?.Value?.ToString(),
                            MobileNumber = UsersWorkSheet.Cells[MobileNumber + i.ToString()]?.Value?.ToString(),
                            MobileCountryCode = UsersWorkSheet.Cells[MobileCountryCode + i.ToString()]?.Value?.ToString(),
                            Address1 = UsersWorkSheet.Cells[Address1 + i.ToString()]?.Value?.ToString(),
                            Address2 = UsersWorkSheet.Cells[Address2 + i.ToString()]?.Value?.ToString(),
                            QRCode = UsersWorkSheet.Cells[QRCode + i.ToString()]?.Value?.ToString(),

                            MobileNumber2 = UsersWorkSheet.Cells[MobileNumber2 + i.ToString()]?.Value?.ToString(),
                            Nationality = UsersWorkSheet.Cells[Nationality + i.ToString()]?.Value?.ToString(),
                            CardNumber = UsersWorkSheet.Cells[CardNumber + i.ToString()]?.Value?.ToString(),
                            AccountNumber = UsersWorkSheet.Cells[AccountNumber + i.ToString()]?.Value?.ToString(),
                            ChildCount = UsersWorkSheet.Cells[ChildCount + i.ToString()]?.Value?.ToString(),
                            MaritalStatus = UsersWorkSheet.Cells[MaritalStatus + i.ToString()]?.Value?.ToString(),
                            CardType = UsersWorkSheet.Cells[CardType + i.ToString()]?.Value?.ToString(),
                        };


                        string CountryCellValue = UsersWorkSheet.Cells[Country + i.ToString()]?.Value?.ToString();
                        int CountryId = CountriesTbl.Where(x => x.ArabicName.Equals(CountryCellValue) || x.EnglishName.Equals(CountryCellValue)).Select(x => x.Id).FirstOrDefault();
                        newUser.CountryId = CountryId;

                        string GovernorateCellValue = UsersWorkSheet.Cells[Governorate + i.ToString()]?.Value?.ToString();
                        int GovernorateId = GovernoratesTbl.Where(y => y.CountryId.Equals(CountryId)).Where(x => x.ArabicName.Equals(GovernorateCellValue) || x.EnglishName.Equals(GovernorateCellValue)).Select(x => x.Id).FirstOrDefault();
                        newUser.GovernorateId = GovernorateId;

                        string CityCellValue = UsersWorkSheet.Cells[City + i.ToString()]?.Value?.ToString();
                        int CityId = CitiesTbl.Where(z => z.GovernorateId.Equals(GovernorateId)).Where(x => x.ArabicName.Equals(CityCellValue) || x.EnglishName.Equals(CityCellValue)).Select(x => x.Id).FirstOrDefault();
                        newUser.CityId = CityId;

                        string LocationCellValue = UsersWorkSheet.Cells[Location + i.ToString()]?.Value?.ToString();
                        int LocationId = LocationsTbl.Where(z => z.GovernorateID.Equals(GovernorateId)).Where(n => n.CityId.Equals(CityId)).Where(x => x.ArabicName.Equals(LocationCellValue) || x.EnglishName.Equals(LocationCellValue)).Select(x => x.Id).FirstOrDefault();
                        newUser.LocationId = CountryId;

                        string UserTypeCellValue = UsersWorkSheet.Cells[Country + i.ToString()]?.Value?.ToString();
                        int UserTypeId = UserTypesTbl.Where(x => x.Name.Equals(UserTypeCellValue)).Select(x => x.Id).FirstOrDefault();
                        newUser.UserType = UserTypeId;

                        string CurrencyCellValue = UsersWorkSheet.Cells[Currency + i.ToString()]?.Value?.ToString();
                        int CurrencyId = CurrenciesTbl.Where(x => x.ArabicName.Equals(CurrencyCellValue) || x.EnglishName.Equals(CurrencyCellValue)).Select(x => x.Id).FirstOrDefault();
                        newUser.CurrencyId = CurrencyId;

                        int CountryCurrencyId = CountryCurrenciesTbl.Where(x => x.CountryId.Equals(CountryId) && x.CurrencyId.Equals(CurrencyId)).Select(x => x.Id).FirstOrDefault();
                        newUser.CountryCurrencyId = CountryCurrencyId;
                        
                        newUser.UserType = 5;

                        userResult = CreateOrUpdateUser(LoggedUser: LoggedUser, User: newUser);

                        usersResultList.Add(userResult);
                    }
                }

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = usersResultList;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUsersFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsGovernorateClass> GetItemsGovernorate(int Id)
        {
            ResultClass<ItemsGovernorateClass> result = new ResultClass<ItemsGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsGovernorateClass id;
                        reader.Read();
                        id = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsGovernorate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsGovernorateClass>> GetItemsGovernorates(int ItemId)
        {
            ResultClass<List<ItemsGovernorateClass>> result = new ResultClass<List<ItemsGovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemsGovernorateClass> ItemsGovernorates = new List<ItemsGovernorateClass>();
                        ItemsGovernorateClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                            id.Order = order;
                            ItemsGovernorates.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemsGovernorates;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsGovernorates", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsGovernorateClass> CreateItemsGovernorate(int LoggedUser,
        ItemsGovernorateClass ItemsGovernorate)
        {
            ResultClass<ItemsGovernorateClass> result = new ResultClass<ItemsGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemsGovernorate.ItemId),
                  new SqlParameter("GovernorateId", ItemsGovernorate.GovernorateId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsGovernorateClass itemsgovernorate;
                        reader.Read();
                        itemsgovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                        itemsgovernorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsgovernorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsGovernorate", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsGovernorateClass>> CreateItemsGovernorates(int LoggedUser, int ItemId,
        List<int> Governorates)
        {
            ResultClass<List<ItemsGovernorateClass>> result = new ResultClass<List<ItemsGovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemId),

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Governorates)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsGovernorateClass itemsgovernorate;
                        List<ItemsGovernorateClass> itemsGovernorateList = new List<ItemsGovernorateClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemsgovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                            itemsgovernorate.Order = order;
                            itemsGovernorateList.Add(itemsgovernorate);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsGovernorateList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsGovernorates", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsGovernorateClass> UpdateItemsGovernorate(int LoggedUser,
           ItemsGovernorateClass ItemsGovernorate)
        {
            ResultClass<ItemsGovernorateClass> result = new ResultClass<ItemsGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemsGovernorate.Id),
                  new SqlParameter("ItemId", ItemsGovernorate.ItemId),
                  new SqlParameter("GovernorateId", ItemsGovernorate.GovernorateId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsGovernorateClass itemsgovernorate;
                        reader.Read();
                        itemsgovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                        itemsgovernorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsgovernorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsGovernorate", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsGovernorateClass>> UpdateItemsGovernorates(int LoggedUser, int ItemId,
           List<int> Governorates)
        {
            ResultClass<List<ItemsGovernorateClass>> result = new ResultClass<List<ItemsGovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Governorates)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsGovernorateClass itemsgovernorate;
                        List<ItemsGovernorateClass> itemsGovernorateList = new List<ItemsGovernorateClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemsgovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                            itemsgovernorate.Order = order;
                            itemsGovernorateList.Add(itemsgovernorate);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsGovernorateList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsGovernorates", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsGovernorateClass> DeleteItemsGovernorate(int LoggedUser, int Id)
        {
            ResultClass<ItemsGovernorateClass> result = new ResultClass<ItemsGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemsGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsGovernorateClass itemsgovernorate;
                        reader.Read();
                        itemsgovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                        itemsgovernorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsgovernorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemsGovernorate", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCompanyClass> GetItemsCompany(int Id)
        {
            ResultClass<ItemsCompanyClass> result = new ResultClass<ItemsCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCompanyClass id;
                        reader.Read();
                        id = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsCompanyClass>> GetItemsCompanies(int ItemId)
        {
            ResultClass<List<ItemsCompanyClass>> result = new ResultClass<List<ItemsCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemsCompanyClass> ItemsCompanies = new List<ItemsCompanyClass>();
                        ItemsCompanyClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                            id.Order = order;
                            ItemsCompanies.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemsCompanies;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsCompanies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCompanyClass> CreateItemsCompany(int LoggedUser, ItemsCompanyClass ItemsCompany)
        {
            ResultClass<ItemsCompanyClass> result = new ResultClass<ItemsCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemsCompany.ItemId),
                  new SqlParameter("CompanyId", ItemsCompany.CompanyId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCompanyClass itemscompany;
                        reader.Read();
                        itemscompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                        itemscompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemscompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsCompanyClass>> CreateItemsCompanies(int LoggedUser, int ItemId, List<int> Companies)
        {
            ResultClass<List<ItemsCompanyClass>> result = new ResultClass<List<ItemsCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Companies)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Companies", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCompanyClass itemscompany;
                        List<ItemsCompanyClass> itemscompanyList = new List<ItemsCompanyClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemscompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                            itemscompany.Order = order;
                            itemscompanyList.Add(itemscompany);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemscompanyList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsCompanies", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCompanyClass> UpdateItemsCompany(int LoggedUser, ItemsCompanyClass ItemsCompany)
        {
            ResultClass<ItemsCompanyClass> result = new ResultClass<ItemsCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemsCompany.Id),
                  new SqlParameter("ItemId", ItemsCompany.ItemId),
                  new SqlParameter("CompanyId", ItemsCompany.CompanyId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCompanyClass itemscompany;
                        reader.Read();
                        itemscompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                        itemscompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemscompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsCompanyClass>> UpdateItemsCompanies(int LoggedUser, int ItemId, List<int> Companies)
        {
            ResultClass<List<ItemsCompanyClass>> result = new ResultClass<List<ItemsCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Companies)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Companies", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCompanyClass itemscompany;
                        List<ItemsCompanyClass> itemscompanyList = new List<ItemsCompanyClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemscompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                            itemscompany.Order = order;
                            itemscompanyList.Add(itemscompany);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemscompanyList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsCompanies", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCompanyClass> DeleteItemsCompany(int LoggedUser, int Id)
        {
            ResultClass<ItemsCompanyClass> result = new ResultClass<ItemsCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemsCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCompanyClass itemscompany;
                        reader.Read();
                        itemscompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                        itemscompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemscompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemsCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCountryClass> GetItemsCountry(int Id)
        {
            ResultClass<ItemsCountryClass> result = new ResultClass<ItemsCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCountryClass id;
                        reader.Read();
                        id = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsCountryClass>> GetItemsCountries(int ItemId)
        {
            ResultClass<List<ItemsCountryClass>> result = new ResultClass<List<ItemsCountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemsCountryClass> ItemsCountries = new List<ItemsCountryClass>();
                        ItemsCountryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                            id.Order = order;
                            ItemsCountries.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemsCountries;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsCountries", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCountryClass> CreateItemsCountry(int LoggedUser, ItemsCountryClass ItemsCountry)
        {
            ResultClass<ItemsCountryClass> result = new ResultClass<ItemsCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemsCountry.ItemId),
                  new SqlParameter("CountryId", ItemsCountry.CountryId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCountryClass itemsCountry;
                        reader.Read();
                        itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);


                        itemsCountry.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsCountry;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsCountryClass>> CreateItemsCountries(int LoggedUser, int ItemId, List<int> Countries)
        {
            ResultClass<List<ItemsCountryClass>> result = new ResultClass<List<ItemsCountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Countries)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Countries", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCountryClass itemsCountry;
                        List<ItemsCountryClass> itemsCountryList = new List<ItemsCountryClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                            itemsCountry.Order = order;
                            itemsCountryList.Add(itemsCountry);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsCountryList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsCountries", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCountryClass> UpdateItemsCountry(int LoggedUser, ItemsCountryClass ItemsCountry)
        {
            ResultClass<ItemsCountryClass> result = new ResultClass<ItemsCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemsCountry.Id),
                  new SqlParameter("ItemId", ItemsCountry.ItemId),
                  new SqlParameter("CountryId", ItemsCountry.CountryId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCountryClass itemsCountry;
                        reader.Read();
                        itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                        itemsCountry.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsCountry;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsCountryClass>> UpdateItemsCountries(int LoggedUser, int ItemId, List<int> Countries)
        {
            ResultClass<List<ItemsCountryClass>> result = new ResultClass<List<ItemsCountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Countries)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Countries", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCountryClass itemsCountry;
                        List<ItemsCountryClass> itemsCountryList = new List<ItemsCountryClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                            itemsCountry.Order = order;
                            itemsCountryList.Add(itemsCountry);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsCountryList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsCountries", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsCountryClass> DeleteItemsCountry(int LoggedUser, int Id)
        {
            ResultClass<ItemsCountryClass> result = new ResultClass<ItemsCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemsCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsCountryClass itemsCountry;
                        reader.Read();
                        itemsCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                        itemsCountry.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsCountry;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemsCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsUsersTypeClass> GetItemsUsersType(int Id)
        {
            ResultClass<ItemsUsersTypeClass> result = new ResultClass<ItemsUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsUsersTypeClass id;
                        reader.Read();
                        id = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsUsersType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsUsersTypeClass>> GetItemsUsersTypes(int ItemId)
        {
            ResultClass<List<ItemsUsersTypeClass>> result = new ResultClass<List<ItemsUsersTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemsUsersTypeClass> ItemsUsersTypes = new List<ItemsUsersTypeClass>();
                        ItemsUsersTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                            id.Order = order;
                            ItemsUsersTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemsUsersTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsUsersTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsUsersTypeClass> CreateItemsUsersType(int LoggedUser, ItemsUsersTypeClass ItemsUsersType)
        {
            ResultClass<ItemsUsersTypeClass> result = new ResultClass<ItemsUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsUsersType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemsUsersType.ItemId),
                  new SqlParameter("UserTypeId", ItemsUsersType.UserTypeId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsUsersTypeClass itemsuserstype;
                        reader.Read();
                        itemsuserstype = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                        itemsuserstype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsuserstype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsUsersType", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsUsersTypeClass>> CreateItemsUsersTypes(int LoggedUser, int ItemId,
        List<int> UserTypes)
        {
            ResultClass<List<ItemsUsersTypeClass>> result = new ResultClass<List<ItemsUsersTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemsUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in UserTypes)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsUsersTypeClass itemsuserstype;
                        List<ItemsUsersTypeClass> itemsuserstypeList = new List<ItemsUsersTypeClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemsuserstype = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);


                            itemsuserstype.Order = order;
                            itemsuserstypeList.Add(itemsuserstype);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsuserstypeList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemsUsersTypes", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsUsersTypeClass> UpdateItemsUsersType(int LoggedUser, ItemsUsersTypeClass ItemsUsersType)
        {
            ResultClass<ItemsUsersTypeClass> result = new ResultClass<ItemsUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsUsersType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemsUsersType.Id),
                  new SqlParameter("ItemId", ItemsUsersType.ItemId),
                  new SqlParameter("UserTypeId", ItemsUsersType.UserTypeId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsUsersTypeClass itemsuserstype;
                        reader.Read();
                        itemsuserstype = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                        itemsuserstype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsuserstype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsUsersType", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemsUsersTypeClass>> UpdateItemsUsersTypes(int LoggedUser, int ItemId,
        List<int> UserTypes)
        {
            ResultClass<List<ItemsUsersTypeClass>> result = new ResultClass<List<ItemsUsersTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in UserTypes)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsUsersTypeClass itemsuserstype;
                        List<ItemsUsersTypeClass> itemsuserstypeList = new List<ItemsUsersTypeClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            itemsuserstype = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                            itemsuserstype.Order = order;
                            itemsuserstypeList.Add(itemsuserstype);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsuserstypeList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemsUsersTypes", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemsUsersTypeClass> DeleteItemsUsersType(int LoggedUser, int Id)
        {
            ResultClass<ItemsUsersTypeClass> result = new ResultClass<ItemsUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemsUsersType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsUsersTypeClass itemsuserstype;
                        reader.Read();
                        itemsuserstype = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                        itemsuserstype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsuserstype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemsUsersType", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("CountryCurrencyPrices")]
        public ResultClass<CountryCurrencyPriceTypeClass> GetCountriesCurrenciesPriceTypes()
        {
            ResultClass<CountryCurrencyPriceTypeClass> result = new ResultClass<CountryCurrencyPriceTypeClass>();

            result.Result = new CountryCurrencyPriceTypeClass();
            result.Result.ConfigPrices = new List<ItemPriceClass>();
            result.Result.Prices = new List<ItemPriceClass>();

            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCountriesCurrenciesPricesTypes";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemPriceClass> ItemPriceList = new List<ItemPriceClass>();
                        ItemPriceClass itemPrice;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                            itemPrice.Order = order;
                            ItemPriceList.Add(itemPrice);

                        }
                        result.Result.Prices = ItemPriceList;
                    }

                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ItemPriceClass> ConfigItemPriceList = new List<ItemPriceClass>();
                        ItemPriceClass configitemPrice;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            configitemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                            configitemPrice.Order = order;
                            ConfigItemPriceList.Add(configitemPrice);

                        }
                        result.Result.ConfigPrices = ConfigItemPriceList;
                    }

                    result.Code = Errors.Success;
                    result.Message = "";
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCountriesCurrenciesPriceTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //ItemImages

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemImageClass>> GetItemImages(int ItemId)
        {
            ResultClass<List<ItemImageClass>> result = new ResultClass<List<ItemImageClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemImages";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ItemImageClass> imageList = new List<ItemImageClass>();
                        ItemImageClass image;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            image = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                            image.Order = order;

                            imageList.Add(image);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = imageList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemImages", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemColorClass> GetItemColor(int Id)
        {
            ResultClass<ItemColorClass> result = new ResultClass<ItemColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemColors";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemColorClass id;
                        reader.Read();
                        id = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemColorClass>> GetItemColors(int ItemId)
        {
            ResultClass<List<ItemColorClass>> result = new ResultClass<List<ItemColorClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemColors";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemColorClass> ItemColors = new List<ItemColorClass>();
                        ItemColorClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                            id.Order = order;
                            ItemColors.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemColors;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemColors", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemColorClass> CreateItemColor(int LoggedUser, ItemColorClass ItemColor)
        {
            ResultClass<ItemColorClass> result = new ResultClass<ItemColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemColor";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemColor.ItemId),
                  new SqlParameter("ColorId", ItemColor.ColorId),
                  new SqlParameter("ColorImageURL", ItemColor.ColorImageURL),
                  new SqlParameter("ArabicDescription", ItemColor.ArabicDescription),
                  new SqlParameter("EnglishDescription", ItemColor.EnglishDescription),
                  new SqlParameter("ItemImageIndex", ItemColor.ItemImageIndex),
                  new SqlParameter("Disabled", ItemColor.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemColorClass itemcolor;
                        reader.Read();
                        itemcolor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                        itemcolor.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemcolor;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemColorClass> UpdateItemColor(int LoggedUser, ItemColorClass ItemColor)
        {
            ResultClass<ItemColorClass> result = new ResultClass<ItemColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemColor";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemColor.Id),
                  new SqlParameter("ItemId", ItemColor.ItemId),
                  new SqlParameter("ColorId", ItemColor.ColorId),
                  new SqlParameter("ColorImageURL", ItemColor.ColorImageURL),
                  new SqlParameter("ArabicDescription", ItemColor.ArabicDescription),
                  new SqlParameter("EnglishDescription", ItemColor.EnglishDescription),
                  new SqlParameter("ItemImageIndex", ItemColor.ItemImageIndex),
                  new SqlParameter("Disabled", ItemColor.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemColorClass itemcolor;
                        reader.Read();
                        itemcolor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                        itemcolor.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemcolor;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemColorClass> DeleteItemColor(int LoggedUser, int Id)
        {
            ResultClass<ItemColorClass> result = new ResultClass<ItemColorClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemColor";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemColorClass itemcolor;
                        reader.Read();
                        itemcolor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                        itemcolor.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemcolor;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemColor", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemSizeClass> GetItemSize(int Id)
        {
            ResultClass<ItemSizeClass> result = new ResultClass<ItemSizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemSizes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemSizeClass id;
                        reader.Read();
                        id = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemSizeClass>> GetItemSizes(int ItemId)
        {
            ResultClass<List<ItemSizeClass>> result = new ResultClass<List<ItemSizeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemSizes";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemSizeClass> ItemSizes = new List<ItemSizeClass>();
                        ItemSizeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                            id.Order = order;
                            ItemSizes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemSizes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemSizes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemSizeClass> CreateItemSize(int LoggedUser, ItemSizeClass ItemSize)
        {
            ResultClass<ItemSizeClass> result = new ResultClass<ItemSizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemSize";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemSize.ItemId),
                  new SqlParameter("SizeId", ItemSize.SizeId),
                  new SqlParameter("ArabicDescription", ItemSize.ArabicDescription),
                  new SqlParameter("EnglishDescription", ItemSize.EnglishDescription),
                  new SqlParameter("Disabled", ItemSize.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemSizeClass itemsize;
                        reader.Read();
                        itemsize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                        itemsize.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsize;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemSizeClass> UpdateItemSize(int LoggedUser, ItemSizeClass ItemSize)
        {
            ResultClass<ItemSizeClass> result = new ResultClass<ItemSizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemSize";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemSize.Id),
                  new SqlParameter("ItemId", ItemSize.ItemId),
                  new SqlParameter("SizeId", ItemSize.SizeId),
                  new SqlParameter("ArabicDescription", ItemSize.ArabicDescription),
                  new SqlParameter("EnglishDescription", ItemSize.EnglishDescription),
                  new SqlParameter("RequiredPointsAdd", ItemSize.RequiredPointsAdd),
                  new SqlParameter("Disabled", ItemSize.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemSizeClass itemsize;
                        reader.Read();
                        itemsize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                        itemsize.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsize;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemSizeClass> DeleteItemSize(int LoggedUser, int Id)
        {
            ResultClass<ItemSizeClass> result = new ResultClass<ItemSizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemSize";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemSizeClass itemsize;
                        reader.Read();
                        itemsize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                        itemsize.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemsize;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<List<ItemTypeClass>> GetItemTypesByDepartment(int DepartmentId)
        {
            ResultClass<List<ItemTypeClass>> result = new ResultClass<List<ItemTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemTypesByDepartment";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("DepartmentId", DepartmentId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemTypeClass> ItemTypes = new List<ItemTypeClass>();
                        ItemTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                            id.Order = order;
                            ItemTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemTypesByDepartment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<List<ItemTypeClass>> GetItemTypes()
        {
            ResultClass<List<ItemTypeClass>> result = new ResultClass<List<ItemTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemTypes";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemTypeClass> ItemTypes = new List<ItemTypeClass>();
                        ItemTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                            id.Order = order;
                            ItemTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeClass> GetItemType(int Id)
        {
            ResultClass<ItemTypeClass> result = new ResultClass<ItemTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass id;
                        reader.Read();
                        id = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeDataClass> GetItemTypeData(int Id)
        {
            ResultClass<ItemTypeDataClass> result = new ResultClass<ItemTypeDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemTypeData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass itemType;
                        reader.Read();
                        itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);
                        itemType.Order = 1;

                        int order = 0;
                        List<ItemDepartmentClass> itemTypeDepartments = new List<ItemDepartmentClass>();
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order++;
                                ItemDepartmentClass id = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);
                                id.Order = order;
                                itemTypeDepartments.Add(id);
                            }
                        }
                    
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new ItemTypeDataClass();
                        result.Result.ItemDepartments = itemTypeDepartments;
                        result.Result.ItemType = itemType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemTypeData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<List<ItemTypeDataClass>> GetItemTypesData()
        {
            ResultClass<List<ItemTypeDataClass>> result = new ResultClass<List<ItemTypeDataClass>>();
            try
            {
                List<ItemTypeClass> itemTypes;
                itemTypes = GetItemTypes().Result;
                ItemTypeDataClass itemTypeData;
                ItemTypeDataClass iTypeData;
                if (itemTypes != null)
                {
                    result.Result = new List<ItemTypeDataClass>();
                    foreach (var itemType in itemTypes)
                    {

                        itemTypeData = new ItemTypeDataClass();
                        itemTypeData.ItemType = itemType;
                        iTypeData = GetItemTypeData(itemType.Id).Result;
                        if (itemTypeData != null)
                            itemTypeData.ItemDepartments = iTypeData.ItemDepartments;
                        if (iTypeData.ItemDepartments != null)
                        {
                            if (iTypeData.ItemDepartments.Count < 1)
                            {
                                itemTypeData.ItemDepartments = GetItemDepartments().Result;
                            }
                        }
                        result.Result.Add(itemTypeData);
                    }
                    
                }
                result.Message = "";
                result.Code = 0;
                return result;
                
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemTypesData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeDataClass> CreateItemTypeData(int LoggedUser, ItemTypeDataClass ItemTypeData)
        {
            ResultClass<ItemTypeDataClass> result = new ResultClass<ItemTypeDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemTypeData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                    new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("ArabicName", ItemTypeData.ItemType.ArabicName),
                    new SqlParameter("EnglishName", ItemTypeData.ItemType.EnglishName),

               };


                    if (ItemTypeData.ItemDepartments != null)
                    {
                        DataTable departmentstbl;
                        using (departmentstbl = new DataTable())
                        {
                            departmentstbl.Columns.Add("Item", typeof(int));;
                            foreach (ItemDepartmentClass x in ItemTypeData.ItemDepartments)
                                departmentstbl.Rows.Add(x.Id);
                        }
                        var departmentsList = new SqlParameter("@ItemDepartmentsIds", SqlDbType.Structured);
                        departmentsList.Value = departmentstbl;

                        Params.Add(departmentsList);
                    }


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass itemType;
                        reader.Read();
                        itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);
                        itemType.Order = 1;

                        int order = 0;
                        List<ItemDepartmentClass> itemTypeDepartments = new List<ItemDepartmentClass>();
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order++;
                                ItemDepartmentClass id = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);
                                id.Order = order;
                                itemTypeDepartments.Add(id);
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new ItemTypeDataClass();
                        result.Result.ItemDepartments = itemTypeDepartments;
                        result.Result.ItemType = itemType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemTypeData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeDataClass> UpdateItemTypeData(int LoggedUser, ItemTypeDataClass ItemTypeData)
        {
            ResultClass<ItemTypeDataClass> result = new ResultClass<ItemTypeDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemTypeData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("ArabicName", ItemTypeData.ItemType.ArabicName),
                    new SqlParameter("EnglishName", ItemTypeData.ItemType.EnglishName),
                  new SqlParameter("Id", ItemTypeData.ItemType.Id),

               };


                    if (ItemTypeData.ItemDepartments != null)
                    {
                        DataTable departmentstbl;
                        using (departmentstbl = new DataTable())
                        {
                            departmentstbl.Columns.Add("Item", typeof(int)); ;
                            foreach (ItemDepartmentClass x in ItemTypeData.ItemDepartments)
                                departmentstbl.Rows.Add(x.Id);
                        }
                        var departmentsList = new SqlParameter("@ItemDepartmentsIds", SqlDbType.Structured);
                        departmentsList.Value = departmentstbl;

                        Params.Add(departmentsList);
                    }


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass itemType;
                        reader.Read();
                        itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);
                        itemType.Order = 1;

                        int order = 0;
                        List<ItemDepartmentClass> itemTypeDepartments = new List<ItemDepartmentClass>();
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order++;
                                ItemDepartmentClass id = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);
                                id.Order = order;
                                itemTypeDepartments.Add(id);
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new ItemTypeDataClass();
                        result.Result.ItemDepartments = itemTypeDepartments;
                        result.Result.ItemType = itemType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemTypeData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeClass> CreateItemType(int LoggedUser, ItemTypeClass ItemType)
        {
            ResultClass<ItemTypeClass> result = new ResultClass<ItemTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", ItemType.ArabicName),
                  new SqlParameter("EnglishName", ItemType.EnglishName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass itemType;
                        reader.Read();
                        itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                        itemType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeClass> UpdateItemType(int LoggedUser, ItemTypeClass ItemType)
        {
            ResultClass<ItemTypeClass> result = new ResultClass<ItemTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemType.Id),
                  new SqlParameter("ArabicName", ItemType.ArabicName),
                  new SqlParameter("EnglishName", ItemType.EnglishName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass itemType;
                        reader.Read();
                        itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                        itemType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemTypes")]
        public ResultClass<ItemTypeClass> DeleteItemType(int LoggedUser, int Id)
        {
            ResultClass<ItemTypeClass> result = new ResultClass<ItemTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemTypeClass itemType;
                        reader.Read();
                        itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                        itemType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemLikes")]
        public ResultClass<ItemLikeClass> LikeItem(int LoggedUser, int ItemId)
        {
            ResultClass<ItemLikeClass> result = new ResultClass<ItemLikeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_LikeItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemLikeClass like;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            like = new ItemLikeClass().PopulateItemLike(fieldNames, reader);

                            like.Order = order;

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = like;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "LikeItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemLikes")]
        public ResultClass<ItemLikeClass> RemoveLikeItem(int LoggedUser, int ItemId)
        {
            ResultClass<ItemLikeClass> result = new ResultClass<ItemLikeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_RemoveLikeItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemLikeClass like;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            like = new ItemLikeClass().PopulateItemLike(fieldNames, reader);

                            like.Order = order;

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = like;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "RemoveLikeItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemLikes")]
        public ResultClass<List<ItemLikeClass>> GetItemLikes(int UserId, int ItemId)
        {
            ResultClass<List<ItemLikeClass>> result = new ResultClass<List<ItemLikeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemLikes";

                    if (UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    if (ItemId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemId", ItemId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemLikeClass> ItemLikes = new List<ItemLikeClass>();
                        ItemLikeClass like;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            like = new ItemLikeClass().PopulateItemLike(fieldNames, reader);

                            like.Order = order;
                            ItemLikes.Add(like);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemLikes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemLikes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemLikes")]
        public ResultClass<List<ItemLikeClass>> SearchItemLikes(int LoggedUser,
           bool FilterByItemId, List<int> ItemIds,
           bool FilterByUserId, List<int> UserIds,
           bool FilterByDates, string FromDate, string ToDate,
           int PageId, int RecordsCount)
        {
            ResultClass<List<ItemLikeClass>> result = new ResultClass<List<ItemLikeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchItemLikes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    if ((FilterByUserId) && (UserIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserId", FilterByUserId));

                        //UserIds
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        cmd.Parameters.Add(pList);
                    }

                    if ((FilterByItemId) && (ItemIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemId", FilterByItemId));

                        //ItemIds
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in ItemIds)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemIds", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        cmd.Parameters.Add(pList);
                    }

                    if ((FilterByDates) && (!String.IsNullOrWhiteSpace(FromDate)) && (!String.IsNullOrWhiteSpace(ToDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterDates", true));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemLikeClass> ItemLikes = new List<ItemLikeClass>();
                        ItemLikeClass like;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            like = new ItemLikeClass().PopulateItemLike(fieldNames, reader);

                            like.Order = order + (RecordsCount * (PageId - 1));
                            ItemLikes.Add(like);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemLikes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItemLikes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemLikes")]
        public ResultClass<List<ItemClass>> GetPeopleAlsoLikeItems(int LoggedUser, int ItemId)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetPeople_Also_like_Items";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("FilterByDisabled", 1),
                  new SqlParameter("ShowDisabled", 0)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order;
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "Admin_GetPeople_Also_like_Items", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        [SwaggerWcfTag("ItemWishlists")]
        public ResultClass<ItemWishlistClass> WishlistItem(int LoggedUser, int ItemId)
        {
            ResultClass<ItemWishlistClass> result = new ResultClass<ItemWishlistClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_WishlistItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemWishlistClass wishlist;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            wishlist = new ItemWishlistClass().PopulateItemWishlist(fieldNames, reader);

                            wishlist.Order = order;

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = wishlist;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "WishlistItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemWishlists")]
        public ResultClass<ItemWishlistClass> RemoveWishlistItem(int LoggedUser, int ItemId)
        {
            ResultClass<ItemWishlistClass> result = new ResultClass<ItemWishlistClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_RemoveWishlistItem";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemWishlistClass wishlist;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            wishlist = new ItemWishlistClass().PopulateItemWishlist(fieldNames, reader);

                            wishlist.Order = order;

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = wishlist;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "RemoveWishlistItem", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemWishlists")]
        public ResultClass<List<ItemWishlistClass>> SearchItemWishlists(int LoggedUser,
            bool FilterByItemId, List<int> ItemIds,
           bool FilterByUserId, List<int> UserIds,
           bool FilterByDates, string FromDate, string ToDate,
           int PageId, int RecordsCount)
        {
            ResultClass<List<ItemWishlistClass>> result = new ResultClass<List<ItemWishlistClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchItemWishlists";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    if ((FilterByUserId) && (UserIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserId", FilterByUserId));

                        //UserIds
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        cmd.Parameters.Add(pList);
                    }

                    if ((FilterByItemId) && (ItemIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemId", FilterByItemId));

                        //ItemIds
                        DataTable userTypeTable;
                        using (userTypeTable = new DataTable())
                        {
                            userTypeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in ItemIds)
                                userTypeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemIds", SqlDbType.Structured);
                        pList.Value = userTypeTable;
                        cmd.Parameters.Add(pList);
                    }

                    if ((FilterByDates) && (FromDate != "") && (ToDate != ""))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterDates", true));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemWishlistClass> itemWishList = new List<ItemWishlistClass>();
                        ItemWishlistClass wishlist;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            wishlist = new ItemWishlistClass().PopulateItemWishlist(fieldNames, reader);

                            wishlist.Order = order + (RecordsCount * (PageId - 1));
                            itemWishList.Add(wishlist);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemWishList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItemWishlists", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemWishlists")]
        public ResultClass<List<ItemWishlistClass>> GetItemWishlists(int UserId, int ItemId)
        {
            ResultClass<List<ItemWishlistClass>> result = new ResultClass<List<ItemWishlistClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemWishlists";

                    if (UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    if (ItemId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemId", ItemId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemWishlistClass> ItemWishlist = new List<ItemWishlistClass>();
                        ItemWishlistClass wishlist;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            wishlist = new ItemWishlistClass().PopulateItemWishlist(fieldNames, reader);

                            wishlist.Order = order;
                            ItemWishlist.Add(wishlist);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemWishlist;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemWishlists", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        //ItemRating
        [SwaggerWcfTag("ItemRating")]
        public ResultClass<ItemRatingClass> CreateItemRating(int LoggedUser, int ItemId, double Rating)
        {
            ResultClass<ItemRatingClass> result = new ResultClass<ItemRatingClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemRating";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Rating", Rating),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemRatingClass itemRating;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            itemRating = new ItemRatingClass().PopulateItemClass(fieldNames, reader);

                            itemRating.Order = order;
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemRating;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertItemRating", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }





        [SwaggerWcfTag("SizesGroupes")]
        public ResultClass<SizesGroupClass> GetSizesGroup(int Id)
        {
            ResultClass<SizesGroupClass> result = new ResultClass<SizesGroupClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetSizesGroups";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizesGroupClass id;
                        reader.Read();
                        id = new SizesGroupClass().PopulateSizesGroup(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetSizesGroup", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("SizesGroupes")]
        public ResultClass<List<SizesGroupClass>> GetSizesGroups()
        {
            ResultClass<List<SizesGroupClass>> result = new ResultClass<List<SizesGroupClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetSizesGroups";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<SizesGroupClass> SizesGroups = new List<SizesGroupClass>();
                        SizesGroupClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new SizesGroupClass().PopulateSizesGroup(fieldNames, reader);

                            id.Order = order;
                            SizesGroups.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = SizesGroups;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetSizesGroups", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("SizesGroupes")]
        public ResultClass<SizesGroupClass> CreateSizesGroup(int LoggedUser, SizesGroupClass SizesGroup)
        {
            ResultClass<SizesGroupClass> result = new ResultClass<SizesGroupClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertSizesGroup";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", SizesGroup.ArabicName),
                  new SqlParameter("EnglishName", SizesGroup.EnglishName),
                  new SqlParameter("Code", SizesGroup.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizesGroupClass sizesgroup;
                        reader.Read();
                        sizesgroup = new SizesGroupClass().PopulateSizesGroup(fieldNames, reader);

                        sizesgroup.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = sizesgroup;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateSizesGroup", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("SizesGroupes")]
        public ResultClass<SizesGroupClass> UpdateSizesGroup(int LoggedUser, SizesGroupClass SizesGroup)
        {
            ResultClass<SizesGroupClass> result = new ResultClass<SizesGroupClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateSizesGroup";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", SizesGroup.Id),
                  new SqlParameter("ArabicName", SizesGroup.ArabicName),
                  new SqlParameter("EnglishName", SizesGroup.EnglishName),
                  new SqlParameter("Code", SizesGroup.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizesGroupClass sizesgroup;
                        reader.Read();
                        sizesgroup = new SizesGroupClass().PopulateSizesGroup(fieldNames, reader);

                        sizesgroup.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = sizesgroup;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateSizesGroup", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("SizesGroupes")]
        public ResultClass<SizesGroupClass> DeleteSizesGroup(int LoggedUser, int Id)
        {
            ResultClass<SizesGroupClass> result = new ResultClass<SizesGroupClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteSizesGroup";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizesGroupClass sizesgroup;
                        reader.Read();
                        sizesgroup = new SizesGroupClass().PopulateSizesGroup(fieldNames, reader);

                        sizesgroup.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = sizesgroup;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteSizesGroup", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("PricesTypes")]
        public ResultClass<List<PriceTypeClass>> GetPriceTypes(int? Id)
        {
            ResultClass<List<PriceTypeClass>> result = new ResultClass<List<PriceTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetPriceTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<PriceTypeClass> priceTypeList = new List<PriceTypeClass>();
                        PriceTypeClass priceType;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            priceType = new PriceTypeClass().PopulatePriceType(fieldNames, reader);

                            priceType.Order = order;

                            priceTypeList.Add(priceType);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = priceTypeList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetPriceTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("PricesTypes")]
        public ResultClass<PriceTypeClass> CreatePriceType(int LoggedUser, PriceTypeClass PriceType)
        {
            ResultClass<PriceTypeClass> result = new ResultClass<PriceTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertPriceType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", PriceType.ArabicName),
                  new SqlParameter("EnglishName", PriceType.EnglishName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        PriceTypeClass priceType;
                        reader.Read();
                        priceType = new PriceTypeClass().PopulatePriceType(fieldNames, reader);

                        priceType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = priceType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "InsertPriceType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("PricesTypes")]
        public ResultClass<PriceTypeClass> UpdatePriceType(int LoggedUser, PriceTypeClass PriceType)
        {
            ResultClass<PriceTypeClass> result = new ResultClass<PriceTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdatePriceType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", PriceType.Id),
                  new SqlParameter("ArabicName", PriceType.ArabicName),
                  new SqlParameter("EnglishName", PriceType.EnglishName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        PriceTypeClass priceType;
                        reader.Read();
                        priceType = new PriceTypeClass().PopulatePriceType(fieldNames, reader);

                        priceType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = priceType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdatePriceType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("PricesTypes")]
        public ResultClass<PriceTypeClass> DeletePriceType(int LoggedUser, int Id)
        {
            ResultClass<PriceTypeClass> result = new ResultClass<PriceTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeletePriceType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        PriceTypeClass priceType;
                        reader.Read();
                        priceType = new PriceTypeClass().PopulatePriceType(fieldNames, reader);

                        priceType.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = priceType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeletePriceType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("Sizes")]
        public ResultClass<SizeClass> GetSize(int Id)
        {
            ResultClass<SizeClass> result = new ResultClass<SizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetSizes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizeClass id;
                        reader.Read();
                        id = new SizeClass().PopulateSize(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Sizes")]
        public ResultClass<List<SizeClass>> GetSizes(int SizeGroupId)
        {
            ResultClass<List<SizeClass>> result = new ResultClass<List<SizeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetSizes";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("SizeGroupId", SizeGroupId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<SizeClass> Sizes = new List<SizeClass>();
                        SizeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new SizeClass().PopulateSize(fieldNames, reader);

                            id.Order = order;
                            Sizes.Add(id);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Sizes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetSizes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Sizes")]
        public ResultClass<List<SizeClass>> GetAllSizes()
        {
            ResultClass<List<SizeClass>> result = new ResultClass<List<SizeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAllSizes";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<SizeClass> Sizes = new List<SizeClass>();
                        SizeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new SizeClass().PopulateSize(fieldNames, reader);

                            id.Order = order;
                            Sizes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Sizes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetAllSizes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Sizes")]
        public ResultClass<SizeClass> CreateSize(int LoggedUser, SizeClass Size)
        {
            ResultClass<SizeClass> result = new ResultClass<SizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertSize";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("SizeGroupId", Size.SizeGroupId),
                  new SqlParameter("ArabicName", Size.ArabicName),
                  new SqlParameter("EnglishName", Size.EnglishName),
                  new SqlParameter("Code", Size.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizeClass size;
                        reader.Read();
                        size = new SizeClass().PopulateSize(fieldNames, reader);

                        size.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = size;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Sizes")]
        public ResultClass<SizeClass> UpdateSize(int LoggedUser, SizeClass Size)
        {
            ResultClass<SizeClass> result = new ResultClass<SizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateSize";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Size.Id),
                  new SqlParameter("SizeGroupId", Size.SizeGroupId),
                  new SqlParameter("ArabicName", Size.ArabicName),
                  new SqlParameter("EnglishName", Size.EnglishName),
                  new SqlParameter("Code", Size.Code),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizeClass size;
                        reader.Read();
                        size = new SizeClass().PopulateSize(fieldNames, reader);

                        size.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = size;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Sizes")]
        public ResultClass<SizeClass> DeleteSize(int LoggedUser, int Id)
        {
            ResultClass<SizeClass> result = new ResultClass<SizeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteSize";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        SizeClass size;
                        reader.Read();
                        size = new SizeClass().PopulateSize(fieldNames, reader);

                        size.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = size;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteSize", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Items Barcodes
        [SwaggerWcfTag("Barcodes")]
        public ResultClass<List<BarcodesClass>> GetBarcodes(int LoggedUser, int ItemId)
        {
            ResultClass<List<BarcodesClass>> result = new ResultClass<List<BarcodesClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBarcodes";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("ItemId", ItemId),
                        new SqlParameter("LoggedUser", LoggedUser),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BarcodesClass> Barcodes = new List<BarcodesClass>();
                        BarcodesClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BarcodesClass().PopulateBarcodes(fieldNames, reader);

                            id.Order = order;
                            Barcodes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Barcodes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBarcodes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Barcodes")]
        public ResultClass<List<BarcodesClass>> UpdateItemsBarcodes(int LoggedUser, int ItemId, List<BarcodesClass> Barcodes)
        {
            ResultClass<List<BarcodesClass>> result = new ResultClass<List<BarcodesClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemsBarcodes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ItemId", ItemId),
                  //new SqlParameter("Barcodes", Barcodes),
               };
                    DataTable barcodestbl;
                    using (barcodestbl = new DataTable())
                    {
                        barcodestbl.Columns.Add("Id", typeof(int));
                        barcodestbl.Columns.Add("Item", typeof(string));
                        barcodestbl.Columns.Add("Color", typeof(string));
                        barcodestbl.Columns.Add("Size", typeof(string));
                        barcodestbl.Columns.Add("Barcode", typeof(string));
                        barcodestbl.Columns.Add("Barcode2", typeof(string));
                        barcodestbl.Columns.Add("ServerId", typeof(string));
                        barcodestbl.Columns.Add("Quantity", typeof(double));
                        foreach (var x in Barcodes)
                            barcodestbl.Rows.Add(x.Id, x.ItemCode, x.ColorId, x.SizeId, x.Barcode, x.Barcode2, x.ServerId, x.Quantity);
                    }

                    if (barcodestbl.Rows.Count > 0)
                    {
                        var barcodeList = new SqlParameter("@Barcodes", SqlDbType.Structured);
                        barcodeList.Value = barcodestbl;
                        Params.Add(barcodeList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BarcodesClass barcode;
                        barcode = new BarcodesClass();
                        List<BarcodesClass> BarcodeList = new List<BarcodesClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            barcode = new BarcodesClass().PopulateBarcodes(fieldNames, reader);

                            barcode.Order = order;
                            BarcodeList.Add(barcode);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = BarcodeList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersGovernorates",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Barcodes")]
        public ResultClass<BarcodeResultClass> ImportBarcodes(int LoggedUser, List<BarcodesClass> Barcodes, bool FromExcel = false)
        {
            ResultClass<BarcodeResultClass> result = new ResultClass<BarcodeResultClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ImportBarcodes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                };

                    DataTable barcodestbl;
                    using (barcodestbl = new DataTable())
                    {
                        barcodestbl.Columns.Add("Id", typeof(int));
                        barcodestbl.Columns.Add("Item", typeof(string));
                        barcodestbl.Columns.Add("Color", typeof(string));
                        barcodestbl.Columns.Add("Size", typeof(string));
                        barcodestbl.Columns.Add("Barcode", typeof(string));
                        barcodestbl.Columns.Add("Barcode2", typeof(string));
                        barcodestbl.Columns.Add("ServerId", typeof(string));
                        barcodestbl.Columns.Add("Quantity", typeof(double));
                        foreach (var x in Barcodes)
                        {
                            if (FromExcel)
                                barcodestbl.Rows.Add(x.Id, x.ItemCode, x.ColorCode, x.SizeCode, x.Barcode, x.Barcode2, x.ServerId, x.Quantity);
                            else
                                barcodestbl.Rows.Add(x.Id, x.ItemCode, x.ColorId, x.SizeId, x.Barcode, x.Barcode2, x.ServerId, x.Quantity);
                        }
                    }

                    var pList = new SqlParameter("@Barcodes", SqlDbType.Structured);
                    pList.Value = barcodestbl;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                    List<BarcodesClass> SuccessBarcodes = new List<BarcodesClass>();

                    if (reader.HasRows)
                    {
                        List<BarcodesClass> ListBarcodesFirstResultList = new List<BarcodesClass>();

                        BarcodesClass BarcodeResult;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            BarcodeResult = new BarcodesClass().PopulateBarcodes(fieldNames, reader);
                            //if (transferResult.TransferResultStatus == 1)
                            //{
                            //    transferResult.ProcessInsertSingleTransferNotifications();
                            //}

                            BarcodeResult.Order = order;
                            SuccessBarcodes.Add(BarcodeResult);
                        }
                        //SuccessBarcodes.Add(ListBarcodesFirstResultList);


                    }
                    reader.NextResult();
                    List<BarcodesClass> FailedBarcodes = new List<BarcodesClass>();
                    if (reader.HasRows)
                    {
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        //List<BarcodesClass> ListBarcodesSecundeResultList = new List<BarcodesClass>();
                        BarcodesClass BarcodeResult;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            BarcodeResult = new BarcodesClass().PopulateFailBarcodes(fieldNames, reader);
                            //if (transferResult.TransferResultStatus == 1)
                            //{
                            //    transferResult.ProcessInsertSingleTransferNotifications();
                            //}

                            BarcodeResult.Order = order;
                            FailedBarcodes.Add(BarcodeResult);
                        }
                        //FailedBarcodes.Add(ListBarcodesSecundeResultList);
                    }
                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = new BarcodeResultClass();
                    //result.Result.SuccessBarcodes = new List<BarcodesClass>();
                    result.Result.SuccessBarcodes = SuccessBarcodes;
                    //result.Result.FailedBarcodes = new List<BarcodesClass>();
                    result.Result.FailedBarcodes = FailedBarcodes;

                    return result;
                    //else
                    //{
                    //    result.Code = Errors.Success;
                    //    result.Message = "";
                    //    result.Result = null;
                    //    return result;
                    //}
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersGovernorates",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Barcodes")]
        public ResultClass<BarcodeResultClass> ImportBarcodesFromExcel(int LoggedUser, string Url,
          string WorksheetName, int firstRow, string ItemColumn, string ColorColumn, string SizeColumn, string QuantityColumn, string BarcodeColumn)
        {
            ResultClass<BarcodeResultClass> result = new ResultClass<BarcodeResultClass>();
            try
            {
                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@"/", @"\");

                byte[] file = File.ReadAllBytes(filePath);
                MemoryStream ms = new MemoryStream(file);

                var package = new ExcelPackage(ms);
                //var package = new ExcelPackage(new FileInfo(filePath));
                ExcelWorksheet workSheet = package.Workbook.Worksheets[WorksheetName];

                int order = 0;

                List<BarcodesClass> BarcodesResultList = new List<BarcodesClass>();
                BarcodesClass BarcodeResult;

                for (int i = firstRow; i <= workSheet.Dimension.End.Row; i++)
                {
                    //Intilize Params
                    string Item = String.Empty;
                    string Color = String.Empty;
                    string Size = String.Empty;
                    double Quantity = 0.0;
                    string Barcode = String.Empty;

                    order++;
                    BarcodeResult = new BarcodesClass();

                    Item = workSheet.Cells[ItemColumn + i.ToString()]?.Value?.ToString();
                    Color = workSheet.Cells[ColorColumn + i.ToString()]?.Value?.ToString();
                    Size = workSheet.Cells[SizeColumn + i.ToString()]?.Value?.ToString();
                    double TempQuantity = 0;
                    if (double.TryParse(workSheet.Cells[QuantityColumn + i.ToString()]?.Value?.ToString(), out TempQuantity))
                        Quantity = Convert.ToDouble(workSheet.Cells[QuantityColumn + i.ToString()]?.Value);
                    else
                        Quantity = TempQuantity;
                    Barcode = workSheet.Cells[BarcodeColumn + i.ToString()]?.Value?.ToString();
                    //if (!String.IsNullOrWhiteSpace(NoteColumn))
                    //    note = workSheet.Cells[NoteColumn + i.ToString()]?.Value?.ToString();


                    BarcodeResult.ItemCode = Item;
                    BarcodeResult.ColorCode = Color;
                    BarcodeResult.SizeCode = Size;
                    BarcodeResult.Quantity = Quantity;
                    BarcodeResult.Barcode = Barcode;
                    BarcodeResult.Order = order;

                    //if ((!String.IsNullOrWhiteSpace(user)) && (Int32.TryParse(point, out temp)))
                    //    BarcodeResult.TransferResultStatus = 1; //Success
                    //else
                    //    BarcodeResult.TransferResultStatus = 0; // Fail

                    BarcodesResultList.Add(BarcodeResult);

                }
                ResultClass<BarcodeResultClass> ImportBarcodesResult = ImportBarcodes(LoggedUser, BarcodesResultList, true);

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = ImportBarcodesResult.Result;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "ImportBarcodesFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        /// <summary>
        /// Type:
        /// 1- Item
        /// 2- Brand
        /// 3- Category
        /// 4- Any Image
        /// 
        /// TypeId: The Selected Type Id (ex: ItemId - CatgId or BrandId)
        /// </summary>
        /// <param name="Type"></param>
        /// <returns></returns>
        [SwaggerWcfTag("Banneres")]
        [SwaggerWcfHeader("LoggedUser", true, "this is description", "7")]
        [SwaggerWcfPath("This is summary", "This is description",
           "OperationId", "External", "Url", false)]
        [SwaggerWcfResponse(HttpStatusCode.OK, "Description", true, new string[3] { "LoggedUser", "Type", "Id" })]

        public ResultClass<BannerClass> GetBanner([SwaggerWcfParameter(Description = "Book to be created, the id will be replaced")]int Id)
        {
            ResultClass<BannerClass> result = new ResultClass<BannerClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBanners";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BannerClass id;
                        reader.Read();
                        id = new BannerClass().PopulateBanner(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBanner", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Banneres")]
        public ResultClass<List<BannerClass>> GetBanners(bool ForClients)
        {
            ResultClass<List<BannerClass>> result = new ResultClass<List<BannerClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetBanners";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("ForClients", ForClients),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BannerClass> Banners = new List<BannerClass>();
                        BannerClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BannerClass().PopulateBanner(fieldNames, reader);

                            id.Order = order;
                            Banners.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Banners;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBanners", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Banneres")]
        public ResultClass<BannerClass> CreateBanner(int LoggedUser, BannerClass Banner)
        {
            ResultClass<BannerClass> result = new ResultClass<BannerClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertBanner";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicTitle", Banner.ArabicTitle),
                  new SqlParameter("EnglishTitle", Banner.EnglishTitle),
                  new SqlParameter("ImageURL", Banner.ImageURL),
                  new SqlParameter("Disabled", Banner.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Type", Banner.Type),
                  new SqlParameter("TypeId", Banner.TypeId),
                  new SqlParameter("IsVideo", Banner.IsVideo),
               };

                    if ((!String.IsNullOrWhiteSpace(Banner.StartShowDate)) && (!String.IsNullOrWhiteSpace(Banner.EndShowDate) && (Banner.HasEndDate != false)))
                    {
                        Params.Add(new SqlParameter("StartShowDate", Banner.StartShowDate));
                        Params.Add(new SqlParameter("EndShowDate", Banner.EndShowDate));
                        Params.Add(new SqlParameter("HasEndDate", Banner.HasEndDate));
                    }
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BannerClass banner;
                        reader.Read();
                        banner = new BannerClass().PopulateBanner(fieldNames, reader);

                        banner.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = banner;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateBanner", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Banneres")]
        public ResultClass<BannerClass> UpdateBanner(int LoggedUser, BannerClass Banner)
        {
            ResultClass<BannerClass> result = new ResultClass<BannerClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateBanner";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Banner.Id),
                  new SqlParameter("ArabicTitle", Banner.ArabicTitle),
                  new SqlParameter("EnglishTitle", Banner.EnglishTitle),
                  new SqlParameter("ImageURL", Banner.ImageURL),
                  new SqlParameter("Disabled", Banner.Disabled),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Type", Banner.Type),
                  new SqlParameter("TypeId", Banner.TypeId),
                  new SqlParameter("IsVideo", Banner.IsVideo),
               };

                    if ((!String.IsNullOrWhiteSpace(Banner.StartShowDate)) && (!String.IsNullOrWhiteSpace(Banner.EndShowDate)) && (Banner.HasEndDate != false))
                    {
                        Params.Add(new SqlParameter("StartShowDate", Banner.StartShowDate));
                        Params.Add(new SqlParameter("EndShowDate", Banner.EndShowDate));
                        Params.Add(new SqlParameter("HasEndDate", Banner.HasEndDate));
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        BannerClass banner;
                        reader.Read();
                        banner = new BannerClass().PopulateBanner(fieldNames, reader);

                        banner.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = banner;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateBanner", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Banneres")]
        public ResultClass<BannerClass> DeleteBanner(int LoggedUser, int Id)
        {
            ResultClass<BannerClass> result = new ResultClass<BannerClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteBanner";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        BannerClass banner;
                        reader.Read();
                        banner = new BannerClass().PopulateBanner(fieldNames, reader);

                        banner.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = banner;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteBanner", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }








        //Offers

        [SwaggerWcfTag("Offers")]
        public ResultClass<List<OfferClass>> GetOffers()
        {
            ResultClass<List<OfferClass>> result = new ResultClass<List<OfferClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffers";

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OfferClass> Offers = new List<OfferClass>();
                        OfferClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new OfferClass().PopulateOffer(fieldNames, reader);

                            id.Order = order;
                            Offers.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Offers;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffers", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OfferClass> GetOffer(int Id)
        {
            ResultClass<OfferClass> result = new ResultClass<OfferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffers";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferClass id;
                        reader.Read();
                        id = new OfferClass().PopulateOffer(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OfferClass> CreateOffer(int LoggedUser, OfferClass Offer)
        {
            ResultClass<OfferClass> result = new ResultClass<OfferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferTypeId", Offer.OfferTypeId),

                  new SqlParameter("ArabicName", Offer.ArabicName),
                  new SqlParameter("EnglishName", Offer.EnglishName),
                  new SqlParameter("Code", Offer.Code),
                  new SqlParameter("ArabicDescription", Offer.ArabicDescription),
                  new SqlParameter("EnglishDescription", Offer.EnglishDescription),
                  new SqlParameter("Disabled", Offer.Disabled),
                  new SqlParameter("Notes", Offer.Notes),
                  new SqlParameter("CreatedBy", Offer.CreatedBy),


                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("StartDate", Offer.StartDate),
               };
                    cmd.Parameters.AddRange(Params.ToArray());

                    if ((Offer.HasEndDate) && (!String.IsNullOrWhiteSpace(Offer.EndDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("HasEndDate", Offer.HasEndDate));
                        cmd.Parameters.Add(new SqlParameter("EndDate", Offer.EndDate));
                    }

                    if (Offer.UpdatedBy != 0)
                        cmd.Parameters.Add(new SqlParameter("UpdatedBy", Offer.UpdatedBy));


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferClass offer;
                        reader.Read();
                        offer = new OfferClass().PopulateOffer(fieldNames, reader);

                        offer.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offer;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OfferClass> UpdateOffer(int LoggedUser, OfferClass Offer)
        {
            ResultClass<OfferClass> result = new ResultClass<OfferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("Id", Offer.Id),
                  new SqlParameter("OfferTypeId", Offer.OfferTypeId),
                  new SqlParameter("ArabicName", Offer.ArabicName),
                  new SqlParameter("EnglishName", Offer.EnglishName),
                  new SqlParameter("Code", Offer.Code),
                  new SqlParameter("ArabicDescription", Offer.ArabicDescription),
                  new SqlParameter("EnglishDescription", Offer.EnglishDescription),
                  new SqlParameter("EndDate", Offer.EndDate),
                  new SqlParameter("Disabled", Offer.Disabled),
                  new SqlParameter("Notes", Offer.Notes),
                  new SqlParameter("CreatedBy", Offer.CreatedBy),
                  new SqlParameter("CreateDate", Offer.CreateDate),
                  new SqlParameter("UpdateDate", Offer.UpdateDate),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("StartDate", Offer.StartDate),

               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    if ((Offer.HasEndDate) && (!String.IsNullOrWhiteSpace(Offer.EndDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("HasEndDate", Offer.HasEndDate));
                        cmd.Parameters.Add(new SqlParameter("EndDate", Offer.EndDate));
                    }

                    if (Offer.UpdatedBy > 0)
                        cmd.Parameters.Add(new SqlParameter("UpdatedBy", Offer.UpdatedBy));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferClass offer;
                        reader.Read();
                        offer = new OfferClass().PopulateOffer(fieldNames, reader);

                        offer.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offer;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Offers")]
        public ResultClass<OfferClass> DeleteOffer(int LoggedUser, int Id)
        {
            ResultClass<OfferClass> result = new ResultClass<OfferClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOffer";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferClass offer;
                        reader.Read();
                        offer = new OfferClass().PopulateOffer(fieldNames, reader);

                        offer.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offer;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOffer", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("Offers")]
        public ResultClass<OfferDataClass> GetOfferData(int LoggedUser, int Id)
        {
            ResultClass<OfferDataClass> result = new ResultClass<OfferDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOfferData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferDataClass offerDataClass = new OfferDataClass();

                        reader.Read();

                        offerDataClass.OfferClass = new OfferClass().PopulateOffer(fieldNames, reader);


                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersCompanyClass> Companies = new List<OffersCompanyClass>();
                                OffersCompanyClass offersCompany;

                                while (reader.Read())
                                {
                                    offersCompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                                    Companies.Add(offersCompany);
                                }
                                offerDataClass.Companies = Companies;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersGovernorateClass> Governorates = new List<OffersGovernorateClass>();
                                OffersGovernorateClass offersGovernorate;

                                while (reader.Read())
                                {
                                    offersGovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                                    Governorates.Add(offersGovernorate);
                                }
                                offerDataClass.Governorates = Governorates;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersUsersTypeClass> UsersTypes = new List<OffersUsersTypeClass>();
                                OffersUsersTypeClass offersUsersType;

                                while (reader.Read())
                                {
                                    offersUsersType = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                                    UsersTypes.Add(offersUsersType);
                                }
                                offerDataClass.UsersTypes = UsersTypes;
                            }
                        }

                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersCountryClass> Countries = new List<OffersCountryClass>();
                                OffersCountryClass offersCountry;

                                while (reader.Read())
                                {
                                    offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                                    Countries.Add(offersCountry);
                                }
                                offerDataClass.Countries = Countries;
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOfferData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Offers")]
        public ResultClass<OfferDataClass> CreateOfferData(int LoggedUser, OfferClass Offer, List<int> Governorates,
           List<int> Companies, List<int> UserTypes, List<int> Countries)
        {
            ResultClass<OfferDataClass> result = new ResultClass<OfferDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOfferData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),

                  new SqlParameter("ArabicName", Offer.ArabicName),
                  new SqlParameter("EnglishName", Offer.EnglishName),
                  new SqlParameter("Code", Offer.Code),
                  new SqlParameter("ArabicDescription", Offer.ArabicDescription),
                  new SqlParameter("EnglishDescription", Offer.EnglishDescription),
                  new SqlParameter("Disabled", Offer.Disabled),
                  new SqlParameter("Notes", Offer.Notes),
                  new SqlParameter("CreatedBy", Offer.CreatedBy),
                  new SqlParameter("StartDate", Offer.StartDate),

                  new SqlParameter("OfferTypeId", Offer.OfferTypeId),
                  new SqlParameter("HasRequiredPoints", Offer.HasRequiredPoints),
                  new SqlParameter("RequiredPoints", Offer.RequiredPoints),
                  new SqlParameter("HasRequiredPrice", Offer.HasRequiredPrice),
                  new SqlParameter("RequiredPrice", Offer.RequiredPrice),

                  new SqlParameter("CanGrantPoints", Offer.CanGrantPoints),
                  new SqlParameter("GrantPointsType", Offer.GrantPointsType),
                  new SqlParameter("GrantPointsValue", Offer.GrantPointsValue),

                  new SqlParameter("HasPointsDiscount", Offer.HasPointsDiscount),
                  new SqlParameter("PointsDiscountType", Offer.PointsDiscountType),
                  new SqlParameter("PointsDiscountValue", Offer.PointsDiscountValue),

                  new SqlParameter("HasPriceDiscount", Offer.HasPriceDiscount),
                  new SqlParameter("PriceDiscountType", Offer.PriceDiscountType),
                  new SqlParameter("PriceDiscountValue", Offer.PriceDiscountValue),

                  new SqlParameter("HasQuantityOffer", Offer.HasQuantityOffer),
                  new SqlParameter("RequiredQuantity", Offer.RequiredQuantity),
                  new SqlParameter("CanGrantQuantity", Offer.CanGrantQuantity),
                  new SqlParameter("GrantedQuantityOrderTypeId", Offer.GrantedQuantityOrderTypeId),
                  new SqlParameter("GrantQuantity", Offer.GrantQuantity)
               };

                    if ((Offer.HasEndDate) && (!string.IsNullOrWhiteSpace(Offer.EndDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("HasEndDate", Offer.HasEndDate));
                        cmd.Parameters.Add(new SqlParameter("EndDate", Offer.EndDate));
                    }

                    if (Offer.UpdatedBy != 0)
                        cmd.Parameters.Add(new SqlParameter("UpdatedBy", Offer.UpdatedBy));

                    //Governorates
                    if (Governorates != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Governorates)
                                table.Rows.Add(x);
                        }

                        var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    //Companies
                    if (Companies != null)
                    {
                        DataTable table1;
                        using (table1 = new DataTable())
                        {
                            table1.Columns.Add("Id", typeof(string));
                            foreach (int x in Companies)
                                table1.Rows.Add(x);
                        }
                        var cList = new SqlParameter("@Companies", SqlDbType.Structured);
                        cList.Value = table1;
                        Params.Add(cList);
                    }

                    //UserTypes
                    if (UserTypes != null)
                    {
                        DataTable table2;
                        using (table2 = new DataTable())
                        {
                            table2.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypes)
                                table2.Rows.Add(x);
                        }

                        var uList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        uList.Value = table2;
                        Params.Add(uList);
                    }

                    //Countries
                    if (Countries != null)
                    {
                        DataTable table1;
                        using (table1 = new DataTable())
                        {
                            table1.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                table1.Rows.Add(x);
                        }
                        var cList = new SqlParameter("@Countries", SqlDbType.Structured);
                        cList.Value = table1;
                        Params.Add(cList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferDataClass offerDataClass = new OfferDataClass();

                        reader.Read();
                        offerDataClass.OfferClass = new OfferClass().PopulateOffer(fieldNames, reader);


                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersCompanyClass> CompaniesList = new List<OffersCompanyClass>();
                                OffersCompanyClass offersCompany;

                                while (reader.Read())
                                {
                                    offersCompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                                    CompaniesList.Add(offersCompany);
                                }
                                offerDataClass.Companies = CompaniesList;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersGovernorateClass> GovernoratesList = new List<OffersGovernorateClass>();
                                OffersGovernorateClass offersGovernorate;

                                while (reader.Read())
                                {
                                    offersGovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                                    GovernoratesList.Add(offersGovernorate);
                                }
                                offerDataClass.Governorates = GovernoratesList;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersUsersTypeClass> UsersTypesList = new List<OffersUsersTypeClass>();
                                OffersUsersTypeClass offersUsersType;

                                while (reader.Read())
                                {
                                    offersUsersType = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                                    UsersTypesList.Add(offersUsersType);
                                }
                                offerDataClass.UsersTypes = UsersTypesList;
                            }
                        }



                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersCountryClass> CountriesList = new List<OffersCountryClass>();
                                OffersCountryClass offersCountry;

                                while (reader.Read())
                                {
                                    offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                                    CountriesList.Add(offersCountry);
                                }
                                offerDataClass.Countries = CountriesList;
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOfferData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Offers")]
        public ResultClass<OfferDataClass> UpdateOfferData(int LoggedUser, OfferClass Offer, List<int> Governorates,
        List<int> Companies, List<int> UserTypes, List<int> Countries)
        {
            ResultClass<OfferDataClass> result = new ResultClass<OfferDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOfferData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),

                  new SqlParameter("Id", Offer.Id),
                  new SqlParameter("ArabicName", Offer.ArabicName),
                  new SqlParameter("EnglishName", Offer.EnglishName),
                  new SqlParameter("Code", Offer.Code),
                  new SqlParameter("ArabicDescription", Offer.ArabicDescription),
                  new SqlParameter("EnglishDescription", Offer.EnglishDescription),
                  new SqlParameter("Disabled", Offer.Disabled),
                  new SqlParameter("Notes", Offer.Notes),
                  new SqlParameter("CreatedBy", Offer.CreatedBy),
                  new SqlParameter("CreateDate", Offer.CreateDate),
                  new SqlParameter("UpdateDate", Offer.UpdateDate),
                  new SqlParameter("StartDate", Offer.StartDate),

                  new SqlParameter("OfferTypeId", Offer.OfferTypeId),
                  new SqlParameter("HasRequiredPoints", Offer.HasRequiredPoints),
                  new SqlParameter("RequiredPoints", Offer.RequiredPoints),
                  new SqlParameter("HasRequiredPrice", Offer.HasRequiredPrice),
                  new SqlParameter("RequiredPrice", Offer.RequiredPrice),

                  new SqlParameter("CanGrantPoints", Offer.CanGrantPoints),
                  new SqlParameter("GrantPointsType", Offer.GrantPointsType),
                  new SqlParameter("GrantPointsValue", Offer.GrantPointsValue),

                  new SqlParameter("HasPointsDiscount", Offer.HasPointsDiscount),
                  new SqlParameter("PointsDiscountType", Offer.PointsDiscountType),
                  new SqlParameter("PointsDiscountValue", Offer.PointsDiscountValue),

                  new SqlParameter("HasPriceDiscount", Offer.HasPriceDiscount),
                  new SqlParameter("PriceDiscountType", Offer.PriceDiscountType),
                  new SqlParameter("PriceDiscountValue", Offer.PriceDiscountValue),

                  new SqlParameter("HasQuantityOffer", Offer.HasQuantityOffer),
                  new SqlParameter("RequiredQuantity", Offer.RequiredQuantity),
                  new SqlParameter("CanGrantQuantity", Offer.CanGrantQuantity),
                  new SqlParameter("GrantedQuantityOrderTypeId", Offer.GrantedQuantityOrderTypeId),
                  new SqlParameter("GrantQuantity", Offer.GrantQuantity)
               };

                    if ((Offer.HasEndDate) && (!string.IsNullOrWhiteSpace(Offer.EndDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("HasEndDate", Offer.HasEndDate));
                        cmd.Parameters.Add(new SqlParameter("EndDate", Offer.EndDate));
                    }

                    if (Offer.UpdatedBy > 0)
                        cmd.Parameters.Add(new SqlParameter("UpdatedBy", Offer.UpdatedBy));

                    //Governorates
                    if (Governorates != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in Governorates)
                                table.Rows.Add(x);
                        }

                        var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }
                    //Companies
                    if (Companies != null)
                    {
                        DataTable table1;
                        using (table1 = new DataTable())
                        {
                            table1.Columns.Add("Id", typeof(string));
                            foreach (int x in Companies)
                                table1.Rows.Add(x);
                        }
                        var cList = new SqlParameter("@Companies", SqlDbType.Structured);
                        cList.Value = table1;
                        Params.Add(cList);
                    }

                    //UserTypes
                    if (UserTypes != null)
                    {

                        DataTable table2;
                        using (table2 = new DataTable())
                        {
                            table2.Columns.Add("Id", typeof(string));
                            foreach (int x in UserTypes)
                                table2.Rows.Add(x);
                        }

                        var uList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                        uList.Value = table2;
                        Params.Add(uList);
                    }

                    //Countries
                    if (Countries != null)
                    {
                        DataTable table4;
                        using (table4 = new DataTable())
                        {
                            table4.Columns.Add("Id", typeof(string));
                            foreach (int x in Countries)
                                table4.Rows.Add(x);
                        }
                        var cList = new SqlParameter("@Countries", SqlDbType.Structured);
                        cList.Value = table4;
                        Params.Add(cList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferDataClass offerDataClass = new OfferDataClass();

                        reader.Read();
                        offerDataClass.OfferClass = new OfferClass().PopulateOffer(fieldNames, reader);


                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersCompanyClass> CompaniesList = new List<OffersCompanyClass>();
                                OffersCompanyClass offersCompany;

                                while (reader.Read())
                                {
                                    offersCompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                                    CompaniesList.Add(offersCompany);
                                }
                                offerDataClass.Companies = CompaniesList;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersGovernorateClass> GovernoratesList = new List<OffersGovernorateClass>();
                                OffersGovernorateClass offersGovernorate;

                                while (reader.Read())
                                {
                                    offersGovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                                    GovernoratesList.Add(offersGovernorate);
                                }
                                offerDataClass.Governorates = GovernoratesList;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersUsersTypeClass> UsersTypesList = new List<OffersUsersTypeClass>();
                                OffersUsersTypeClass offersUsersType;

                                while (reader.Read())
                                {
                                    offersUsersType = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                                    UsersTypesList.Add(offersUsersType);
                                }
                                offerDataClass.UsersTypes = UsersTypesList;
                            }
                        }


                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<OffersCountryClass> CountriesList = new List<OffersCountryClass>();
                                OffersCountryClass offersCountry;

                                while (reader.Read())
                                {
                                    offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                                    CountriesList.Add(offersCountry);
                                }
                                offerDataClass.Countries = CountriesList;
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerDataClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOfferData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Offers")]
        public ResultClass<List<OfferTypeClass>> GetOfferTypes()
        {
            ResultClass<List<OfferTypeClass>> result = new ResultClass<List<OfferTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOfferTypes";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OfferTypeClass> OfferTypes = new List<OfferTypeClass>();
                        OfferTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            id = new OfferTypeClass().PopulateOfferType(fieldNames, reader);

                            id.Order = order;
                            OfferTypes.Add(id);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OfferTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOfferTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }







        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersGovernorateClass> GetOffersGovernorate(int Id)
        {
            ResultClass<OffersGovernorateClass> result = new ResultClass<OffersGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersGovernorateClass id;
                        reader.Read();
                        id = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);


                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersGovernorate", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersGovernorateClass>> GetOffersGovernorates(int OfferId)
        {
            ResultClass<List<OffersGovernorateClass>> result = new ResultClass<List<OffersGovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OffersGovernorateClass> OffersGovernorates = new List<OffersGovernorateClass>();
                        OffersGovernorateClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                            id.Order = order;
                            OffersGovernorates.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OffersGovernorates;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersGovernorates", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersGovernorateClass> CreateOffersGovernorate(int LoggedUser,
        OffersGovernorateClass OffersGovernorate)
        {
            ResultClass<OffersGovernorateClass> result = new ResultClass<OffersGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OffersGovernorate.OfferId),
                  new SqlParameter("GovernorateId", OffersGovernorate.GovernorateId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersGovernorateClass offersgovernorate;
                        reader.Read();
                        offersgovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                        offersgovernorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersgovernorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersGovernorate", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersGovernorateClass>> CreateOffersGovernorates(int LoggedUser, int OfferId,
        List<int> Governorates)
        {
            ResultClass<List<OffersGovernorateClass>> result = new ResultClass<List<OffersGovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };


                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Governorates)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersGovernorateClass offersgovernorate;
                        List<OffersGovernorateClass> offersgovernorateList = new List<OffersGovernorateClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offersgovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                            offersgovernorate.Order = order;
                            offersgovernorateList.Add(offersgovernorate);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersgovernorateList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersGovernorates",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersGovernorateClass> UpdateOffersGovernorate(int LoggedUser,
        OffersGovernorateClass OffersGovernorate)
        {
            ResultClass<OffersGovernorateClass> result = new ResultClass<OffersGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", OffersGovernorate.Id),
                  new SqlParameter("OfferId", OffersGovernorate.OfferId),
                  new SqlParameter("GovernorateId", OffersGovernorate.GovernorateId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersGovernorateClass offersgovernorate;
                        reader.Read();
                        offersgovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                        offersgovernorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersgovernorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersGovernorate", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersGovernorateClass>> UpdateOffersGovernorates(int LoggedUser, int OfferId,
        List<int> Governorates)
        {
            ResultClass<List<OffersGovernorateClass>> result = new ResultClass<List<OffersGovernorateClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersGovernorates";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("OfferId", OfferId),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Governorates)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@Governorates", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersGovernorateClass offersgovernorate;
                        offersgovernorate = new OffersGovernorateClass();
                        List<OffersGovernorateClass> offersgovernorateList = new List<OffersGovernorateClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offersgovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                            offersgovernorate.Order = order;
                            offersgovernorateList.Add(offersgovernorate);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersgovernorateList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersGovernorates",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersGovernorateClass> DeleteOffersGovernorate(int LoggedUser, int Id)
        {
            ResultClass<OffersGovernorateClass> result = new ResultClass<OffersGovernorateClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOffersGovernorate";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersGovernorateClass offersgovernorate;
                        reader.Read();
                        offersgovernorate = new OffersGovernorateClass().PopulateOffersGovernorate(fieldNames, reader);

                        offersgovernorate.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersgovernorate;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOffersGovernorate", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }




        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCompanyClass> GetOffersCompany(int Id)
        {
            ResultClass<OffersCompanyClass> result = new ResultClass<OffersCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCompanyClass id;
                        reader.Read();
                        id = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersCompanyClass>> GetOffersCompanies(int OfferId)
        {
            ResultClass<List<OffersCompanyClass>> result = new ResultClass<List<OffersCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OffersCompanyClass> OffersCompanies = new List<OffersCompanyClass>();
                        OffersCompanyClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                            id.Order = order;
                            OffersCompanies.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OffersCompanies;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersCompanies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCompanyClass> CreateOffersCompany(int LoggedUser, OffersCompanyClass OffersCompany)
        {
            ResultClass<OffersCompanyClass> result = new ResultClass<OffersCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CompanyId", OffersCompany.CompanyId),
                  new SqlParameter("OfferId", OffersCompany.OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCompanyClass offerscompany;
                        reader.Read();
                        offerscompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);


                        offerscompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerscompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersCompany", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersCompanyClass>> CreateOffersCompanies(int LoggedUser, int OfferId,
           List<int> Companies)
        {
            ResultClass<List<OffersCompanyClass>> result = new ResultClass<List<OffersCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Companies)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@Companies", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCompanyClass offerscompany;
                        List<OffersCompanyClass> offerscompanyList = new List<OffersCompanyClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offerscompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);


                            offerscompany.Order = order;
                            offerscompanyList.Add(offerscompany);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerscompanyList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersCompanies", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCompanyClass> UpdateOffersCompany(int LoggedUser, OffersCompanyClass OffersCompany)
        {
            ResultClass<OffersCompanyClass> result = new ResultClass<OffersCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", OffersCompany.Id),
                  new SqlParameter("CompanyId", OffersCompany.CompanyId),
                  new SqlParameter("OfferId", OffersCompany.OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCompanyClass offerscompany;
                        reader.Read();
                        offerscompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                        offerscompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerscompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersCompany", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersCompanyClass>> UpdateOffersCompanies(int LoggedUser, int OfferId,
        List<int> Companies)
        {
            ResultClass<List<OffersCompanyClass>> result = new ResultClass<List<OffersCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Companies)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@Companies", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCompanyClass offerscompany;
                        List<OffersCompanyClass> offerscompanyList = new List<OffersCompanyClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offerscompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                            offerscompany.Order = order;
                            offerscompanyList.Add(offerscompany);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerscompanyList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersCompanies", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCompanyClass> DeleteOffersCompany(int LoggedUser, int Id)
        {
            ResultClass<OffersCompanyClass> result = new ResultClass<OffersCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOffersCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCompanyClass offerscompany;
                        reader.Read();
                        offerscompany = new OffersCompanyClass().PopulateOfferCompany(fieldNames, reader);

                        offerscompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerscompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOffersCompany", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }





        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersCountryClass>> GetOffersCountries(int OfferId)
        {
            ResultClass<List<OffersCountryClass>> result = new ResultClass<List<OffersCountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OffersCountryClass> OffersCountries = new List<OffersCountryClass>();
                        OffersCountryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                            id.Order = order;
                            OffersCountries.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OffersCountries;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersCountries", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCountryClass> GetOffersCountry(int Id)
        {
            ResultClass<OffersCountryClass> result = new ResultClass<OffersCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCountryClass id;
                        reader.Read();
                        id = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersCountry", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCountryClass> CreateOffersCountry(int LoggedUser, OffersCountryClass OffersCountry)
        {
            ResultClass<OffersCountryClass> result = new ResultClass<OffersCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("CountryId", OffersCountry.CountryId),
                  new SqlParameter("OfferId", OffersCountry.OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCountryClass offersCountry;
                        reader.Read();
                        offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                        offersCountry.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersCountry;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersCountry", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersCountryClass>> CreateOffersCountries(int LoggedUser, int OfferId,
        List<int> Countries)
        {
            ResultClass<List<OffersCountryClass>> result = new ResultClass<List<OffersCountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Countries)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@Countries", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCountryClass offersCountry;
                        List<OffersCountryClass> offersCountryList = new List<OffersCountryClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                            offersCountry.Order = order;
                            offersCountryList.Add(offersCountry);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersCountryList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersCountries", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCountryClass> UpdateOffersCountry(int LoggedUser, OffersCountryClass OffersCountry)
        {
            ResultClass<OffersCountryClass> result = new ResultClass<OffersCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", OffersCountry.Id),
                  new SqlParameter("CountryId", OffersCountry.CountryId),
                  new SqlParameter("OfferId", OffersCountry.OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCountryClass offersCountry;
                        reader.Read();
                        offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                        offersCountry.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersCountry;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersCountry", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersCountryClass>> UpdateOffersCountries(int LoggedUser, int OfferId,
        List<int> Countries)
        {
            ResultClass<List<OffersCountryClass>> result = new ResultClass<List<OffersCountryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersCountries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in Countries)
                            table.Rows.Add(x);
                    }
                    var pList = new SqlParameter("@Countries", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCountryClass offersCountry;
                        List<OffersCountryClass> offersCountryList = new List<OffersCountryClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                            offersCountry.Order = order;
                            offersCountryList.Add(offersCountry);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersCountryList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersCountries", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersCountryClass> DeleteOffersCountry(int LoggedUser, int Id)
        {
            ResultClass<OffersCountryClass> result = new ResultClass<OffersCountryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOffersCountry";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersCountryClass offersCountry;
                        reader.Read();
                        offersCountry = new OffersCountryClass().PopulateOfferCountry(fieldNames, reader);

                        offersCountry.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersCountry;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOffersCountry", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }






        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersUsersTypeClass> GetOffersUsersType(int Id)
        {
            ResultClass<OffersUsersTypeClass> result = new ResultClass<OffersUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersUsersTypeClass id;
                        reader.Read();
                        id = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersUsersType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersUsersTypeClass>> GetOffersUsersTypes(int OfferId)
        {
            ResultClass<List<OffersUsersTypeClass>> result = new ResultClass<List<OffersUsersTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OffersUsersTypeClass> OffersUsersTypes = new List<OffersUsersTypeClass>();
                        OffersUsersTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                            id.Order = order;
                            OffersUsersTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OffersUsersTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersUsersTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersUsersTypeClass> CreateOffersUsersType(int LoggedUser,
        OffersUsersTypeClass OffersUsersType)
        {
            ResultClass<OffersUsersTypeClass> result = new ResultClass<OffersUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersUsersType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OffersUsersType.OfferId),
                  new SqlParameter("UserTypeId", OffersUsersType.UserTypeId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersUsersTypeClass offersuserstype;
                        reader.Read();
                        offersuserstype = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                        offersuserstype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersuserstype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersUsersType", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersUsersTypeClass>> CreateOffersUsersTypes(int LoggedUser, int OfferId,
        List<int> UserTypes)
        {
            ResultClass<List<OffersUsersTypeClass>> result = new ResultClass<List<OffersUsersTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in UserTypes)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersUsersTypeClass offersuserstype;
                        List<OffersUsersTypeClass> offersuserstypeList = new List<OffersUsersTypeClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offersuserstype = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                            offersuserstype.Order = 1;
                            offersuserstypeList.Add(offersuserstype);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersuserstypeList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersUsersTypes", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersUsersTypeClass> UpdateOffersUsersType(int LoggedUser,
        OffersUsersTypeClass OffersUsersType)
        {
            ResultClass<OffersUsersTypeClass> result = new ResultClass<OffersUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersUsersType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("Id", OffersUsersType.Id),
                  new SqlParameter("OfferId", OffersUsersType.OfferId),
                  new SqlParameter("UserTypeId", OffersUsersType.UserTypeId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),


               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersUsersTypeClass offersuserstype;
                        reader.Read();
                        offersuserstype = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                        offersuserstype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersuserstype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersUsersType", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<List<OffersUsersTypeClass>> UpdateOffersUsersTypes(int LoggedUser, int OfferId,
        List<int> UserTypes)
        {
            ResultClass<List<OffersUsersTypeClass>> result = new ResultClass<List<OffersUsersTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersUsersTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    DataTable table;
                    using (table = new DataTable())
                    {
                        table.Columns.Add("Id", typeof(string));
                        foreach (int x in UserTypes)
                            table.Rows.Add(x);
                    }

                    var pList = new SqlParameter("@UserTypes", SqlDbType.Structured);
                    pList.Value = table;
                    Params.Add(pList);

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersUsersTypeClass offersuserstype;
                        List<OffersUsersTypeClass> offersuserstypeList = new List<OffersUsersTypeClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order++;
                            offersuserstype = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                            offersuserstype.Order = 1;
                            offersuserstypeList.Add(offersuserstype);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersuserstypeList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersUsersTypes", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<OffersUsersTypeClass> DeleteOffersUsersType(int LoggedUser, int Id)
        {
            ResultClass<OffersUsersTypeClass> result = new ResultClass<OffersUsersTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOffersUsersType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersUsersTypeClass offersuserstype;
                        reader.Read();
                        offersuserstype = new OffersUsersTypeClass().PopulateOffersUsersType(fieldNames, reader);

                        offersuserstype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersuserstype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOffersUsersType", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }
        }






        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OffersDetailClass> GetOffersDetail(int Id)
        {
            ResultClass<OffersDetailClass> result = new ResultClass<OffersDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersDetails";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersDetailClass id;
                        reader.Read();
                        id = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<List<OffersDetailClass>> GetOffersDetails(int OfferId)
        {
            ResultClass<List<OffersDetailClass>> result = new ResultClass<List<OffersDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOffersDetails";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OfferId", OfferId),
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<OffersDetailClass> OffersDetails = new List<OffersDetailClass>();
                        OffersDetailClass id;
                        int order = 0;
                        while (reader.Read())
                        {

                            order += 1;

                            id = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);


                            id.Order = order;
                            OffersDetails.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OffersDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOffersDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OffersDetailClass> CreateOffersDetail(int LoggedUser, OffersDetailClass OffersDetail)
        {
            ResultClass<OffersDetailClass> result = new ResultClass<OffersDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOffersDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("OfferId", OffersDetail.OfferId),
                  new SqlParameter("ItemId", OffersDetail.ItemId),
                  new SqlParameter("HasInitQuantity", OffersDetail.HasInitQuantity),
                  new SqlParameter("InitQuantity", OffersDetail.InitQuantity),
                  new SqlParameter("Disabled", OffersDetail.Disabled),
                  new SqlParameter("Notes", OffersDetail.Notes),
                  new SqlParameter("SoldQuantity", OffersDetail.SoldQuantity),
                  //new SqlParameter("RemainingQuantity",OffersDetail.RemainingQuantity),
                  new SqlParameter("CreatedBy", OffersDetail.CreatedBy),
                  new SqlParameter("CreateDate", OffersDetail.CreateDate),
                  new SqlParameter("UpdateDate", OffersDetail.UpdateDate),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    if (OffersDetail.UpdateBy != 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("UpdateBy", OffersDetail.UpdateBy));
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OffersDetailClass offersdetail;
                        reader.Read();
                        offersdetail = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);


                        offersdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OffersDetailClass> UpdateOffersDetail(int LoggedUser, OffersDetailClass OffersDetail)
        {
            ResultClass<OffersDetailClass> result = new ResultClass<OffersDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOffersDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("Id", OffersDetail.Id),
                  new SqlParameter("OfferId", OffersDetail.OfferId),
                  new SqlParameter("ItemId", OffersDetail.ItemId),
                  new SqlParameter("HasInitQuantity", OffersDetail.HasInitQuantity),
                  new SqlParameter("InitQuantity", OffersDetail.InitQuantity),
                  new SqlParameter("Disabled", OffersDetail.Disabled),
                  new SqlParameter("Notes", OffersDetail.Notes),
                  new SqlParameter("SoldQuantity", OffersDetail.SoldQuantity),
                  //new SqlParameter("RemainingQuantity",OffersDetail.RemainingQuantity),
                  //new SqlParameter("CreatedBy",OffersDetail.CreatedBy),
                  //new SqlParameter("CreateDate",OffersDetail.CreateDate),
                  new SqlParameter("UpdateDate", OffersDetail.UpdateDate),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (OffersDetail.UpdateBy != 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("UpdateBy", OffersDetail.UpdateBy));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersDetailClass offersdetail;
                        reader.Read();
                        offersdetail = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);


                        offersdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOffersDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<OffersDetailClass> DeleteOffersDetail(int LoggedUser, int Id)
        {
            ResultClass<OffersDetailClass> result = new ResultClass<OffersDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOffersDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersDetailClass offersdetail;
                        reader.Read();
                        offersdetail = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);

                        offersdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offersdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOffersDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //[SwaggerWcfTag("OffersDetail")]
        //public ResultClass<OffersDetailDataClass> GetOfferDetailData(int LoggedUser, int OfferId, int OfferDetailId)
        //{
        //    ResultClass<OffersDetailDataClass> result = new ResultClass<OffersDetailDataClass>();
        //    try
        //    {
        //        using (SqlConnection conn = ConnectionClass.GetDataConnection())
        //        {
        //            conn.Open();
        //            SqlCommand cmd = new SqlCommand();
        //            cmd.Connection = conn;
        //            cmd.CommandType = System.Data.CommandType.StoredProcedure;
        //            cmd.CommandText = "Admin_GetOfferDetailData";

        //            List<SqlParameter> Params = new List<SqlParameter>()
        //       {
        //          new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
        //          new SqlParameter("OfferId", OfferId),
        //          new SqlParameter("OfferDetailId", OfferDetailId),
        //       };


        //            cmd.Parameters.AddRange(Params.ToArray());
        //            SqlDataReader reader = cmd.ExecuteReader();
        //            if (reader.HasRows)
        //            {
        //                var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

        //                OffersDetailDataClass itemsDataClass = new OffersDetailDataClass();

        //                while (reader.Read())
        //                {
        //                    //itemsDataClass.ItemClass = new OffersDetailDataClass().PopulateItemClass(fieldNames, reader);
        //                }


        //                //Governorates
        //                //if (reader.NextResult())
        //                //{
        //                //    if (reader.HasRows)
        //                //    {
        //                //fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

        //                //List<OffersDetailDataClass> Governorates = new List<OffersDetailDataClass>();
        //                //OffersDetailDataClass itemsGovernorate;

        //                //while (reader.Read())
        //                //{
        //                //   itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

        //                //   Governorates.Add(itemsGovernorate);
        //                //}
        //                //itemsDataClass.Governorates = Governorates;
        //                //    }
        //                //}


        //                result.Result = itemsDataClass;
        //                result.Code = Errors.Success;
        //                result.Message = "";
        //                return result;
        //            }
        //            else
        //            {
        //                result.Code = Errors.Success;
        //                result.Message = "";
        //                result.Result = null;
        //                return result;
        //            }
        //        }
        //    }
        //    catch (Exception e)
        //    {
        //        int code;
        //        if (Int32.TryParse(e.Message, out code))
        //        {
        //            result.Code = code;
        //            result.Message = Errors.GetErrorMessage(code);
        //        }
        //        else
        //        {
        //            result.Code = Errors.UnknownError;
        //            result.Message = Errors.GetErrorMessage(result.Code);
        //            Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOfferDetailData", e.Source, "");
        //        }
        //        result.Result = null;
        //        return result;
        //    }

        //}

        /* [SwaggerWcfTag("_Deprecated")]
             public ResultClass<OffersDetailDataClass> CreateOfferDetailData(int LoggedUser, OffersDetailDataClass OfferDetailData)
             {
                 ResultClass<OffersDetailDataClass> result = new ResultClass<OffersDetailDataClass>();
                 try
                 {
                     using (SqlConnection conn = ConnectionClass.GetDataConnection())
                     {
                         conn.Open();
                         SqlCommand cmd = new SqlCommand();
                         cmd.Connection = conn;
                         cmd.CommandType = System.Data.CommandType.StoredProcedure;
                         cmd.CommandText = "Admin_InsertOffersDetailData";

                         List<SqlParameter> Params = new List<SqlParameter>()
                    {

                       new SqlParameter("OfferId", OfferDetailData.OffersDetail.OfferId),
                       new SqlParameter("ItemId", OfferDetailData.OffersDetail.ItemId),
                       new SqlParameter("HasInitQuantity", OfferDetailData.OffersDetail.HasInitQuantity),
                       new SqlParameter("InitQuantity", OfferDetailData.OffersDetail.InitQuantity),
                       new SqlParameter("RequiredPoints", OfferDetailData.OffersDetail.RequiredPoints),
                       new SqlParameter("Disabled", OfferDetailData.OffersDetail.Disabled),
                       new SqlParameter("Notes", OfferDetailData.OffersDetail.Notes),
                       new SqlParameter("SoldQuantity", OfferDetailData.OffersDetail.SoldQuantity),
                       //new SqlParameter("RemainingQuantity",OffersDetail.RemainingQuantity),
                       new SqlParameter("CreatedBy", OfferDetailData.OffersDetail.CreatedBy),
                       new SqlParameter("CreateDate", OfferDetailData.OffersDetail.CreateDate),
                       new SqlParameter("UpdateDate", OfferDetailData.OffersDetail.UpdateDate),
                       new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                         cmd.Parameters.AddRange(Params.ToArray());
                         if (OfferDetailData.OffersDetail.UpdateBy != 0)
                         {
                             cmd.Parameters.Add(new SqlParameter("UpdateBy", OfferDetailData.OffersDetail.UpdateBy));
                         }

                         SqlDataReader reader = cmd.ExecuteReader();
                         if (reader.HasRows)
                         {
                             var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                             OffersDetailDataClass offersdetaildata;
                             reader.Read();
                             offersdetaildata = new OffersDetailDataClass().PopulateOffersDetailData(fieldNames, reader);


                             offersdetaildata.Order = 1;
                              result.Code = Errors.Success;
                             result.Message = "";
                             result.Result = offersdetaildata;
                             return result;
                         }
                         else
                         {
                              result.Code = Errors.Success;
                             result.Message = "";
                             result.Result = null;
                             return result;
                         }
                     }
                 }
                 catch (Exception e)
                 {
                     int code;
                     if (Int32.TryParse(e.Message, out code))
                     {
                         result.Code = code;
                         result.Message = Errors.GetErrorMessage(code);
                     }
                     else
                     {
                          result.Code = Errors.UnknownError;
                         result.Message = Errors.GetErrorMessage(result.Code);
                         Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOffersDetail", e.Source, "");
                     }
                     result.Result = null;
                     return result;
                 }        
             } */





        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<OffersDetailDataClass> UpdateOfferDetailsData(int LoggedUser, OffersDetailDataClass OfferDetailData)
        {
            ResultClass<OffersDetailDataClass> result = new ResultClass<OffersDetailDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOfferDetailsData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", OfferDetailData.OffersDetail.Id),
                  new SqlParameter("OfferId", OfferDetailData.OffersDetail.OfferId),
                  new SqlParameter("ItemId", OfferDetailData.OffersDetail.ItemId),
                  new SqlParameter("HasInitQuantity", OfferDetailData.OffersDetail.HasInitQuantity),
                  new SqlParameter("InitQuantity", OfferDetailData.OffersDetail.InitQuantity),
                  new SqlParameter("Disabled", OfferDetailData.OffersDetail.Disabled),
                  new SqlParameter("Notes", OfferDetailData.OffersDetail.Notes),
                  new SqlParameter("SoldQuantity", OfferDetailData.OffersDetail.SoldQuantity),
                  //new SqlParameter("RemainingQuantity",OffersDetail.RemainingQuantity),
                  //new SqlParameter("UpdateBy", OfferDetailData.OffersDetail.CreatedBy),
                  new SqlParameter("UpdateDate", OfferDetailData.OffersDetail.UpdateDate),
                  new SqlParameter("HasPriceOffer", OfferDetailData.OffersDetail.HasPriceOffer),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    if (OfferDetailData.OffersDetail.UpdateBy != 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("UpdateBy", OfferDetailData.OffersDetail.UpdateBy));
                    }


                    //Companies
                    if (OfferDetailData.Prices != null)
                    {
                        DataTable prices;
                        using (prices = new DataTable())
                        {
                            prices.Columns.Add("CountryCurrencyId", typeof(int));
                            prices.Columns.Add("TypeId", typeof(int));
                            prices.Columns.Add("Price", typeof(double));
                            prices.Columns.Add("HasPointsOffer", typeof(bool));
                            prices.Columns.Add("RequiredPoints", typeof(int));
                            prices.Columns.Add("GrantedPoints", typeof(int));
                            prices.Columns.Add("IsSpecialOffer", typeof(bool));
                            foreach (OfferDetailPriceClass x in OfferDetailData.Prices)
                                prices.Rows.Add(x.CountryCurrencyId, x.TypeId, x.Price, x.HasPointsOffer, x.RequiredPoints, x.GrantedPoints, x.IsSpecialOffer);
                        }
                        var cList = new SqlParameter("@Prices", SqlDbType.Structured);
                        cList.Value = prices;
                        cmd.Parameters.Add(cList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        OffersDetailDataClass offerdetaildata;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OffersDetailClass offerdetail;
                        List<OfferDetailPriceClass> offerDetailPrices = new List<OfferDetailPriceClass>();
                        reader.Read();
                        offerdetail = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);


                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            int Order = 0;
                            OfferDetailPriceClass DetailPrice;
                            while (reader.Read())
                            {
                                Order = Order + 1;
                                DetailPrice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);
                                DetailPrice.Order = Order;
                                offerDetailPrices.Add(DetailPrice);
                            }
                        }
                        offerdetaildata = new OffersDetailDataClass();
                        offerdetaildata.Prices = offerDetailPrices;
                        offerdetaildata.OffersDetail = offerdetail;

                        offerdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerdetaildata;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOfferDetailsData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Orders
        [SwaggerWcfTag("Orders")]
        public ResultClass<List<OrderClass>> GetOrders(int LoggedUser, bool FilterByPosted, bool IsPosted,
           bool FilterByStatusId, int StatusId, bool FilterByUserId, List<int> UserIds,
           bool FilterByDate, string FromDate, string ToDate,
           bool FilterByNote, string Note,
           int PageId = 1, int RecordsCount = 20, bool ForApprove = false, int Id = 0)
        {
            ResultClass<List<OrderClass>> result = new ResultClass<List<OrderClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrders";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    if (FilterByPosted)
                    {
                        Params.Add(new SqlParameter("FilterByPosted", FilterByPosted));
                        Params.Add(new SqlParameter("IsPosted", IsPosted));
                    }

                    if ((FilterByStatusId) && (StatusId > 0))
                    {
                        Params.Add(new SqlParameter("FilterByStatusId", FilterByStatusId));
                        Params.Add(new SqlParameter("StatusId", StatusId));
                    }

                    if ((FilterByUserId) && (UserIds != null))
                    {
                        Params.Add(new SqlParameter("FilterByUserId", FilterByUserId));

                        //UserIds
                        DataTable userIdTable;
                        using (userIdTable = new DataTable())
                        {
                            userIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userIdTable.Rows.Add(x);
                        }
                        var uIdList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        uIdList.Value = userIdTable;
                        cmd.Parameters.Add(uIdList);
                    }

                    if (ForApprove)
                        Params.Add(new SqlParameter("ForApprove", ForApprove));

                    if (FilterByDate)
                    {
                        Params.Add(new SqlParameter("FilterByDate", FilterByDate));
                        Params.Add(new SqlParameter("FromDate", FromDate));
                        Params.Add(new SqlParameter("ToDate", ToDate));
                    }

                    if ((FilterByNote) && (!String.IsNullOrWhiteSpace(Note?.Trim())))
                    {
                        Params.Add(new SqlParameter("FilterByNote", FilterByNote));
                        Params.Add(new SqlParameter("Note", Note));
                    }

                    if (Id > 0)
                        cmd.Parameters.Add(new SqlParameter("Id", Id));


                    if (PageId > 0)
                        cmd.Parameters.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OrderClass> Orders = new List<OrderClass>();
                        OrderClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new OrderClass().PopulateOrderClass(fieldNames, reader);
                            id.OrderSerials = GetOrderSerials(id.Id).Result;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Orders.Add(id);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Orders;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrders", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Orders")]
        public ResultClass<List<OrderClass>> GetOrdersNew(int LoggedUser, bool FilterByPosted, bool IsPosted,
   bool FilterByStatusId, List<int> StatusIds,
   bool FilterByOrderTypeId, List<int> OrderTypeIds,
   bool FilterByPaymentTypeId, List<int> PaymentTypeIds,
   bool FilterByBranchId, List<int> BranchIds,
   bool FilterByUserId, List<int> UserIds,
   bool FilterByDate, string FromDate, string ToDate,
   bool FilterByNote, string Note,
   int PageId = 1, int RecordsCount = 20, bool ForApprove = false)
        {
            ResultClass<List<OrderClass>> result = new ResultClass<List<OrderClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrdersNew";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    if (FilterByPosted)
                    {
                        Params.Add(new SqlParameter("FilterByPosted", FilterByPosted));
                        Params.Add(new SqlParameter("IsPosted", IsPosted));
                    }

                    if ((FilterByStatusId) && (StatusIds != null))
                    {
                        Params.Add(new SqlParameter("FilterByStatusId", FilterByStatusId));

                        //StatusIds
                        DataTable statusIdTable;
                        using (statusIdTable = new DataTable())
                        {
                            statusIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in StatusIds)
                                statusIdTable.Rows.Add(x);
                        }
                        var sIdList = new SqlParameter("@StatusIds", SqlDbType.Structured);
                        sIdList.Value = statusIdTable;
                        cmd.Parameters.Add(sIdList);
                    }

                    if ((FilterByOrderTypeId) && (OrderTypeIds != null))
                    {
                        Params.Add(new SqlParameter("FilterByOrderTypeId", FilterByOrderTypeId));

                        //OrderTypeIds
                        DataTable orderTypeIdTable;
                        using (orderTypeIdTable = new DataTable())
                        {
                            orderTypeIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in OrderTypeIds)
                                orderTypeIdTable.Rows.Add(x);
                        }
                        var otIdList = new SqlParameter("@OrderTypeIds", SqlDbType.Structured);
                        otIdList.Value = orderTypeIdTable;
                        cmd.Parameters.Add(otIdList);
                    }

                    if ((FilterByPaymentTypeId) && (PaymentTypeIds != null))
                    {
                        Params.Add(new SqlParameter("FilterByPaymentTypeId", FilterByPaymentTypeId));

                        //PaymentTypeIds
                        DataTable paymentTypeIdTable;
                        using (paymentTypeIdTable = new DataTable())
                        {
                            paymentTypeIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in PaymentTypeIds)
                                paymentTypeIdTable.Rows.Add(x);
                        }
                        var ptIdList = new SqlParameter("@PaymentTypeIds", SqlDbType.Structured);
                        ptIdList.Value = paymentTypeIdTable;
                        cmd.Parameters.Add(ptIdList);
                    }

                    if ((FilterByBranchId) && (BranchIds != null))
                    {
                        Params.Add(new SqlParameter("FilterByBranchId", FilterByBranchId));

                        //BranchIds
                        DataTable branchIdTable;
                        using (branchIdTable = new DataTable())
                        {
                            branchIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in BranchIds)
                                branchIdTable.Rows.Add(x);
                        }
                        var bIdList = new SqlParameter("@BranchIds", SqlDbType.Structured);
                        bIdList.Value = branchIdTable;
                        cmd.Parameters.Add(bIdList);
                    }

                    if ((FilterByUserId) && (UserIds != null))
                    {
                        Params.Add(new SqlParameter("FilterByUserId", FilterByUserId));

                        //UserIds
                        DataTable userIdTable;
                        using (userIdTable = new DataTable())
                        {
                            userIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userIdTable.Rows.Add(x);
                        }
                        var uIdList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        uIdList.Value = userIdTable;
                        cmd.Parameters.Add(uIdList);
                    }


                    if ((FilterByDate) && (ToDate != null || FromDate != null))
                    {
                        Params.Add(new SqlParameter("FilterByDate", FilterByDate));
                        if (ToDate != null)
                            Params.Add(new SqlParameter("ToDate", ToDate));
                        if (FromDate != null)
                            Params.Add(new SqlParameter("FromDate", FromDate));
                    }

                    if ((FilterByNote) && (!String.IsNullOrWhiteSpace(Note?.Trim())))
                    {
                        Params.Add(new SqlParameter("FilterByNote", FilterByNote));
                        Params.Add(new SqlParameter("Note", Note));
                    }

                    if (PageId > 0)
                        cmd.Parameters.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));

                    if (ForApprove)
                        Params.Add(new SqlParameter("ForApprove", ForApprove));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OrderClass> Orders = new List<OrderClass>();
                        OrderClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new OrderClass().PopulateOrderClass(fieldNames, reader);
                            id.OrderSerials = GetOrderSerials(id.Id).Result;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Orders.Add(id);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Orders;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrdersNew", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<OrderClass> GetOrder(int LoggedUser, int Id)
        {
            ResultClass<OrderClass> result = new ResultClass<OrderClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrders";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    if (Id != 0)
                    {
                        Params.Add(new SqlParameter("Id", Id));

                    }
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderClass id;
                        reader.Read();
                        id = new OrderClass().PopulateOrderClass(fieldNames, reader);
                        id.OrderSerials = GetOrderSerials(id.Id).Result;
                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrder", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OrderClass> CreateOrder(int LoggedUser, OrderClass Order)
        {
            ResultClass<OrderClass> result = new ResultClass<OrderClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrder";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CreatedDate", Order.CreatedDate),
                  new SqlParameter("RequiredPoints", Order.RequiredPoints),
                  new SqlParameter("TotalQty", Order.TotalQty),
                  new SqlParameter("ItemsCount", Order.ItemsCount),
                  new SqlParameter("UserNote", Order.UserNote),
                  new SqlParameter("AdminNote", Order.AdminNote),
                  new SqlParameter("StatusNote", Order.StatusNote),
                  //new SqlParameter("DeliveryDate",Order.DeliveryDate),
                  //new SqlParameter("InitDate",Order.InitDate),
                  //new SqlParameter("ShippingDate",Order.ShippingDate),
                  new SqlParameter("IsPosted", Order.IsPosted),
                  new SqlParameter("PostDate", Order.PostDate),
                  new SqlParameter("UserId", Order.UserId),
                  //new SqlParameter("DeliveredBy",Order.DeliveredBy),
                  //new SqlParameter("InitedBy",Order.InitedBy),
                  //new SqlParameter("ShippedBy",Order.ShippedBy),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("AddressDescription", Order.AddressDescription),
                  new SqlParameter("Longitude", Order.Longitude),
                  new SqlParameter("Latitude", Order.Latitude),
               };

                    if (Order.StatusId > 0)
                        cmd.Parameters.Add(new SqlParameter("StatusId", Order.StatusId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderClass order;
                        reader.Read();
                        order = new OrderClass().PopulateOrderClass(fieldNames, reader);

                        order.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = order;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrder", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<OrderClass> UpdateOrder(int LoggedUser, OrderClass Order)
        {
            ResultClass<OrderClass> result = new ResultClass<OrderClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOrder";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Order.Id),
                  //new SqlParameter("RequiredPoints", Order.RequiredPoints),
                  //new SqlParameter("TotalQty", Order.TotalQty),
                  //new SqlParameter("ItemsCount", Order.ItemsCount),
                  new SqlParameter("UserNote", Order.UserNote),
                  new SqlParameter("AdminNote", Order.AdminNote),
                  new SqlParameter("StatusNote", Order.StatusNote),
                  //Yazan - Commented this dates parts because it should be filled automatically based on status
//                  new SqlParameter("DeliveryDate",Order.DeliveryDate),
//                  new SqlParameter("InitDate",Order.InitDate),
//                  new SqlParameter("ShippingDate",Order.ShippingDate),
                  new SqlParameter("IsPosted", Order.IsPosted),
                  new SqlParameter("PostDate", Order.PostDate),
                  new SqlParameter("UserId", Order.UserId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("PaymentSerialNumber", Order.PaymentSerialNumber),

                  new SqlParameter("BlockNo", Order.BlockNo),
                  new SqlParameter("Street", Order.Street),
                  new SqlParameter("Building", Order.Building),
                  new SqlParameter("Floor", Order.Floor),
                  new SqlParameter("ApartmentNo", Order.ApartmentNo),
                  new SqlParameter("AddressNote", Order.AddressNote),


                  new SqlParameter("Credit", Order.Credit),
                  new SqlParameter("Balance", Order.Balance),
                  new SqlParameter("OrderAmount", Order.OrderAmount),
                  new SqlParameter("LastPaymentAmount", Order.LastPaymentAmount),
                  new SqlParameter("LastPaymentDate", Order.LastPaymentDate),
                  new SqlParameter("TotalSales", Order.TotalSales),
                  new SqlParameter("NeedsCheckByManager", Order.NeedsCheckByManager),
                  new SqlParameter("IsCheckedByManager", Order.IsCheckedByManager),
                  new SqlParameter("ManagerApprove", Order.ManagerApprove),
                  new SqlParameter("ManagerCheckDate", Order.ManagerCheckDate),                  
               };

                    if (Order.PaymentId != null)
                        cmd.Parameters.Add(new SqlParameter("PaymentId", Order.PaymentId));

                    if (Order.StatusId > 0)
                        cmd.Parameters.Add(new SqlParameter("StatusId", Order.StatusId));

                    /*if (!String.IsNullOrWhiteSpace(Order.DeliveryDate))
                       cmd.Parameters.Add(new SqlParameter("DeliveryDate", Order.DeliveryDate));

                    if (!String.IsNullOrWhiteSpace(Order.InitDate))
                       cmd.Parameters.Add(new SqlParameter("InitDate", Order.InitDate));

                    if (!String.IsNullOrWhiteSpace(Order.ShippingDate))
                       cmd.Parameters.Add(new SqlParameter("ShippingDate", Order.ShippingDate));*/

                    if (Order.DeliveredBy > 0)
                        cmd.Parameters.Add(new SqlParameter("DeliveredBy", Order.DeliveredBy));

                    if (Order.InitedBy > 0)
                        cmd.Parameters.Add(new SqlParameter("InitedBy", Order.InitedBy));

                    if (Order.ShippedBy > 0)
                        cmd.Parameters.Add(new SqlParameter("ShippedBy", Order.ShippedBy));

                    if (Order.UserAddressId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserAddressId", Order.UserAddressId));

                    if (Order.AddressDescription != "")
                        cmd.Parameters.Add(new SqlParameter("AddressDescription", Order.AddressDescription));

                    if (Order.DeliveryPlaceId > 0)
                        cmd.Parameters.Add(new SqlParameter("DeliveryPlaceId", Order.DeliveryPlaceId));

                    if (Order.DeliveryUserId > 0)
                        cmd.Parameters.Add(new SqlParameter("DeliveryUserId", Order.DeliveryUserId));

                    if (Order.Longitude > 0)
                        cmd.Parameters.Add(new SqlParameter("Longitude", Order.Longitude));

                    if (Order.Latitude > 0)
                        cmd.Parameters.Add(new SqlParameter("Latitude", Order.Latitude));

                    if (Order.GovernorateId > 0)
                        Params.Add(new SqlParameter("GovernorateId", Order.GovernorateId));

                    if (Order.CityId > 0)
                        Params.Add(new SqlParameter("CityId", Order.CityId));

                    if (Order.CountryId > 0)
                        Params.Add(new SqlParameter("CountryId", Order.CountryId));

                    if (Order.LocationId > 0)
                        Params.Add(new SqlParameter("LocationId", Order.LocationId));

                    if (Order.BranchId > 0)
                        cmd.Parameters.Add(new SqlParameter("BranchId", Order.BranchId));

                    if (Order.PaymentTypeId > 0)
                        cmd.Parameters.Add(new SqlParameter("PaymentTypeId", Order.PaymentTypeId));

                    if (Order.OrderTypeId > 0)
                        cmd.Parameters.Add(new SqlParameter("OrderTypeId", Order.OrderTypeId));

                    if (Order.DeliveryCost > 0)
                        cmd.Parameters.Add(new SqlParameter("DeliveryCost", Order.DeliveryCost));

                    if (Order.Extras != null)
                        cmd.Parameters.Add(new SqlParameter("Extras", Order.Extras));

                    if (Order.OrderSerials != null)
                    {
                        if (Order.OrderSerials.Count > 0)
                        {

                            DataTable orderSerialsTable;
                            using (orderSerialsTable = new DataTable())
                            {
                                orderSerialsTable.Columns.Add("Serial", typeof(string));
                                orderSerialsTable.Columns.Add("Code", typeof(string));
                                foreach (OrderSerialClass x in Order.OrderSerials)
                                    orderSerialsTable.Rows.Add(x.Serial, x.Code);
                            }
                            var pList = new SqlParameter("@OrderSerials", SqlDbType.Structured);
                            pList.Value = orderSerialsTable;
                            
                            Params.Add(pList);
                        }
                    }
                        

                    cmd.Parameters.AddRange(Params.ToArray());

                    OrderClass OldOrderData = GetOrder(7, Order.Id).Result;

                    SqlDataReader reader = cmd.ExecuteReader();
                    var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                    if (reader.HasRows)
                    {
                        OrderClass order;
                        reader.Read();
                        order = new OrderClass().PopulateOrderClass(fieldNames, reader);
                        order.OrderSerials = GetOrderSerials(order.Id).Result;
                        order.ProcessUpdateOrderNotifications(OldOrderData);

                        order.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = order;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOrder", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<OrderClass> DeleteOrder(int LoggedUser, int Id)
        {
            ResultClass<OrderClass> result = new ResultClass<OrderClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOrder";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderClass order;
                        reader.Read();
                        order = new OrderClass().PopulateOrderClass(fieldNames, reader);

                        order.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = order;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOrder", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<OrderClass> GetLastOpenOrderForClient(int LoggedUser)

        {
            ResultClass<OrderClass> result = new ResultClass<OrderClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCurrentOpenOrderForClient";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderClass id;
                        reader.Read();
                        id = new OrderClass().PopulateOrderClass(fieldNames, reader);

                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetLastOpenOrderForClient", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<int> GetLastOpenOrderBadge(int LoggedUser)
        {
            ResultClass<int> result = new ResultClass<int>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCurrentOpenOrderBadge";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        int id = 0;
                        reader.Read();
                        if (!Convert.IsDBNull(reader["ItemsCount"]))
                            id = (int)reader["ItemsCount"];

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = 0;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetLastOpenOrderBadge", e.Source, "");
                }
                result.Result = 0;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<OrderClass> SetOrderPosted(int LoggedUser, int OrderId, int OrderDetailId, bool Posted, int OrderTypeId, int PaymentTypeId, int BranchId, string UserNote,
           string LocationDeliveryDate, bool IsImmediateDelivery, int LocationDayTimesId, int CouponId, int AgentId)
        {
            ResultClass<OrderClass> result = new ResultClass<OrderClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SetOrderPosted";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderId", OrderId),
                  new SqlParameter("OrderDetailId", OrderDetailId),                  
                  new SqlParameter("Posted", Posted),
                  new SqlParameter("LocationDeliveryDate", LocationDeliveryDate),
                  new SqlParameter("IsImmediateDelivery", IsImmediateDelivery),
               };

                    if (LoggedUser > 0)
                        Params.Add(new SqlParameter("LoggedUser", LoggedUser));
                    else
                        Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    if (AgentId > 0)
                        Params.Add(new SqlParameter("AgentId", AgentId));
                    else
                        Params.Add(new SqlParameter("AgentId", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    if (OrderTypeId > 0)
                        Params.Add(new SqlParameter("OrderTypeId", OrderTypeId));

                    if (PaymentTypeId > 0)
                        Params.Add(new SqlParameter("PaymentTypeId", PaymentTypeId));

                    if (BranchId > 0)
                        Params.Add(new SqlParameter("BranchId", BranchId));

                    if (UserNote != null)
                        if (UserNote != "")
                            Params.Add(new SqlParameter("UserNote", UserNote));

                    if (LocationDayTimesId > 0)
                        cmd.Parameters.Add(new SqlParameter("LocationDayTimesId", LocationDayTimesId));

                    if (CouponId > 0)
                        cmd.Parameters.Add(new SqlParameter("CouponId", CouponId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    OrderClass OldOrderData = GetOrder(7, OrderId).Result;
                    SqlDataReader reader = cmd.ExecuteReader();
                    var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                    if (reader.HasRows)
                    {
                        OrderClass order;
                        reader.Read();
                        order = new OrderClass().PopulateOrderClass(fieldNames, reader);

                        order.ProcessUpdateOrderNotifications(OldOrderData);
                        order.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = order;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SetOrderPosted", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //OrderDetails
        [SwaggerWcfTag("Order Details")]
        public ResultClass<List<OrderDetailClass>> GetOrderDetails(int OrderId)
        {
            ResultClass<List<OrderDetailClass>> result = new ResultClass<List<OrderDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrderDetails";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    if (OrderId != 0)
                    {
                        Params.Add(new SqlParameter("OrderId", OrderId));
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<OrderDetailClass> OrderDetails = new List<OrderDetailClass>();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OrderDetailClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                            id.Order = order;
                            OrderDetails.Add(id);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OrderDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //OrderDetails
        [SwaggerWcfTag("Order Details")]
        public ResultClass<List<OrderDetailSeriesClass>> GetOrderDetailsSeries(int OrderId)
        {
            ResultClass<List<OrderDetailSeriesClass>> result = new ResultClass<List<OrderDetailSeriesClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrderDetails";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    if (OrderId != 0)
                    {
                        Params.Add(new SqlParameter("OrderId", OrderId));
                        Params.Add(new SqlParameter("IsSeries", true));
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<OrderDetailSeriesClass> OrderDetailsSeries = new List<OrderDetailSeriesClass>();
                        List<OrderDetailClass> OrderDetails = new List<OrderDetailClass>();
                        List<ItemSeriesClass> Series = new List<ItemSeriesClass>();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OrderDetailClass orderdetail;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                            orderdetail.Order = order;
                            OrderDetails.Add(orderdetail);
                        }

                        ItemSeriesClass serie;
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            order = 0;
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order += 1;
                                serie = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);

                                serie.Order = order;
                                Series.Add(serie);
                            }
                        }

                        order = 0;
                        foreach (var od in OrderDetails)
                        {
                            order = order + 1;
                            OrderDetailSeriesClass OrderDetailSerie = new OrderDetailSeriesClass();                            
                            OrderDetailSerie.OrderDetail = od;
                            OrderDetailSerie.OrderDetail.Order = order;
                            OrderDetailSerie.Series = new List<ItemSeriesClass>();
                            var dOrder = 0;
                            foreach (var s in Series)
                            {
                                if (s.OrderDetailId == od.Id)
                                {
                                    dOrder = dOrder + 1;
                                    s.Order = dOrder;
                                    OrderDetailSerie.Series.Add(s);
                                }
                            }
                            OrderDetailsSeries.Add(OrderDetailSerie);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OrderDetailsSeries;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderDetailsSeries", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OrderDetailClass> GetOrderDetail(int Id)
        {
            ResultClass<OrderDetailClass> result = new ResultClass<OrderDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrderDetails";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    if (Id != 0)
                    {
                        Params.Add(new SqlParameter("Id", Id));
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass id;
                        reader.Read();
                        id = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);


                        id.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = id;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailClass> CreateOrderDetail(int LoggedUser, OrderDetailClass OrderDetail)
        {
            ResultClass<OrderDetailClass> result = new ResultClass<OrderDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrderDetail";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderId", OrderDetail.OrderId),
                  new SqlParameter("ItemId", OrderDetail.ItemId),
                  new SqlParameter("Points", OrderDetail.Points),
                  new SqlParameter("Qty", OrderDetail.Qty),
                  new SqlParameter("UserNote", OrderDetail.UserNote),
                  new SqlParameter("AdminNote", OrderDetail.AdminNote),

                  new SqlParameter("HasOffer", OrderDetail.HasOffer),
                  new SqlParameter("OfferId", OrderDetail.OfferId),
                  new SqlParameter("OfferStartDate", OrderDetail.OfferStartDate),
                  new SqlParameter("OfferHasEndDate", OrderDetail.OfferHasEndDate),
                  new SqlParameter("OfferEndDate", OrderDetail.OfferEndDate),
                  new SqlParameter("OfferHasInitQuantity", OrderDetail.OfferHasInitQuantity),
                  new SqlParameter("OfferInitQuantity", OrderDetail.OfferInitQuantity),
                  new SqlParameter("OfferRemainingQuantity", OrderDetail.OfferRemainingQuantity),
                  new SqlParameter("OfferRequiredPoints", OrderDetail.OfferRequiredPoints),


                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderdetail;
                        reader.Read();
                        orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                        orderdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<OrderDetailClass>> CreateOrderDetailForClient(int LoggedUser, OrderDetailClass OrderDetail)
        {
            ResultClass<List<OrderDetailClass>> result = new ResultClass<List<OrderDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrderDetailForClient";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", OrderDetail.ItemId),
                  new SqlParameter("Qty", OrderDetail.Qty),
                  new SqlParameter("UserNote", OrderDetail.UserNote),
                  new SqlParameter("AdminNote", OrderDetail.AdminNote),

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    if (OrderDetail.OfferId > 0)
                    {
                        cmd.Parameters.AddWithValue("OfferId", OrderDetail.OfferId);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<OrderDetailClass> OrderDetails = new List<OrderDetailClass>();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                            id.Order = order;
                            OrderDetails.Add(id);
                        }

                        int badgeCount = 0;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                reader.Read();
                                if (!Convert.IsDBNull(reader["ItemsCount"]))
                                    badgeCount = (int)reader["ItemsCount"];
                            }
                        }
                        OrderDetails.ForEach(x => x.BadgeCount = badgeCount);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OrderDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrderDetailForClient",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailClass> UpdateOrderDetail(int LoggedUser, OrderDetailClass OrderDetail)
        {
            ResultClass<OrderDetailClass> result = new ResultClass<OrderDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOrderDetail";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", OrderDetail.Id),
                  new SqlParameter("UserNote", OrderDetail.UserNote),
                  new SqlParameter("DeliveryAddress", OrderDetail.DeliveryAddress),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (OrderDetail.CityId > 0)
                        cmd.Parameters.Add(new SqlParameter("CityId", OrderDetail.CityId));

                    if (OrderDetail.LocationId > 0)
                        cmd.Parameters.Add(new SqlParameter("LocationId", OrderDetail.LocationId));

                    if (OrderDetail.GovernorateId > 0)
                        cmd.Parameters.Add(new SqlParameter("GovernorateId", OrderDetail.GovernorateId));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderdetail;
                        reader.Read();
                        orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);


                        orderdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Order Details")]
        public ResultClass<List<OrderDetailClass>> UpdateOrderDetailsQtys(int LoggedUser, int OrderId, List<OrderDetailQtyClass> OrderDetailsQtys)
        {
            ResultClass<List<OrderDetailClass>> result = new ResultClass<List<OrderDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateMultipleOrderDetailQty";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderId", OrderId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    DataTable orderDetailsQtysTable = new DataTable();
                    if (OrderDetailsQtys != null)
                    {
                        if (OrderDetailsQtys.Count > 0)
                        {
                            //CategoryIds
                            
                            using (orderDetailsQtysTable = new DataTable())
                            {
                                orderDetailsQtysTable.Columns.Add("Id", typeof(string));
                                orderDetailsQtysTable.Columns.Add("Id2", typeof(string));
                                foreach (OrderDetailQtyClass x in OrderDetailsQtys)
                                    orderDetailsQtysTable.Rows.Add(x.DetailId, x.Qty);
                            }
                        }
                        var pList = new SqlParameter("@OrderDetailsQtys", SqlDbType.Structured);
                        pList.Value = orderDetailsQtysTable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderDetail;
                        List<OrderDetailClass> orderDetails = new List<OrderDetailClass>();
                        int order = 0;
                        while(reader.Read())
                        {
                            order = order + 1;
                            orderDetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);
                            orderDetail.Order = order;
                            orderDetails.Add(orderDetail);
                        }
                        

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOrderDetailsQtys", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        public ResultClass<List<OrderDetailClass>> UpdateMultipleOrderDetails(int LoggedUser, int OrderId, List<OrderDetailForUpdateClass> OrderDetails)
        {
            ResultClass<List<OrderDetailClass>> result = new ResultClass<List<OrderDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateMultipleOrderDetail";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderId", OrderId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    DataTable OrderDetailsTable = new DataTable();
                    if (OrderDetails != null)
                    {
                        if (OrderDetails.Count > 0)
                        {
                            //CategoryIds

                            using (OrderDetailsTable = new DataTable())
                            {
                                OrderDetailsTable.Columns.Add("Id", typeof(string));
                                OrderDetailsTable.Columns.Add("ItemColorId", typeof(string));
                                OrderDetailsTable.Columns.Add("ItemSizeId", typeof(string));
                                OrderDetailsTable.Columns.Add("Qty", typeof(string));
                                OrderDetailsTable.Columns.Add("StatusId", typeof(string));
                                OrderDetailsTable.Columns.Add("AdminNote", typeof(string));
                                OrderDetailsTable.Columns.Add("IsPartialDelivery", typeof(string));
                                OrderDetailsTable.Columns.Add("IsFullyDelivered", typeof(string));
                                foreach (OrderDetailForUpdateClass x in OrderDetails)
                                    OrderDetailsTable.Rows.Add(x.Id, x.ItemColorId, x.ItemSizeId, x.Qty, x.StatusId, x.AdminNote, x.IsPartialDelivery, x.IsFullyDelivered);
                            }
                        }
                        var pList = new SqlParameter("@OrderDetails", SqlDbType.Structured);
                        pList.Value = OrderDetailsTable;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderDetail;
                        List<OrderDetailClass> orderDetails = new List<OrderDetailClass>();
                        int order = 0;
                        while (reader.Read())
                        {
                            order = order + 1;
                            orderDetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);
                            orderDetail.Order = order;
                            orderDetails.Add(orderDetail);
                        }


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateMultipleOrderDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailClass> RenewQuantityReservationCount(int LoggedUser, int OrderDetailId)
        {
            ResultClass<OrderDetailClass> result = new ResultClass<OrderDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_RenewQuantityReservationCount";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("OrderDetailId", OrderDetailId)
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderdetail;
                        reader.Read();
                        orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                        orderdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "RenewQuantityReservationCount",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailClass> DeleteOrderDetail(int LoggedUser, int Id)
        {
            ResultClass<OrderDetailClass> result = new ResultClass<OrderDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOrderDetail";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderdetail;
                        reader.Read();
                        orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                reader.Read();
                                if (!Convert.IsDBNull(reader["ItemsCount"]))
                                    orderdetail.BadgeCount = (int)reader["ItemsCount"];
                            }
                        }


                        orderdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<List<OrderDetailClass>> DeleteMultipleOrderDetails(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<OrderDetailClass>> result = new ResultClass<List<OrderDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteMultipleOrderDetails";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());

                    DataTable orderDetailsTable;
                    using (orderDetailsTable = new DataTable())
                    {
                        orderDetailsTable.Columns.Add("Item", typeof(string));
                        foreach (int x in Ids)
                            orderDetailsTable.Rows.Add(x);
                    }
                    var orderDetailsList = new SqlParameter("@OrderDetailsIds", SqlDbType.Structured);
                    orderDetailsList.Value = orderDetailsTable;
                    cmd.Parameters.Add(orderDetailsList);

                    List<OrderDetailClass> orderDetails = new List<OrderDetailClass>();

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        int order = 0;
                        
                        while (reader.Read())
                        {
                            order++;
                            OrderDetailClass orderdetail;
                            orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);
                            orderdetail.Order = order;
                            orderDetails.Add(orderdetail);

                        }


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetails;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteMultipleOrderDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<List<OrderDetailClass>> CreateOrderDetailForClient_ForMatjar(int LoggedUser,
         OrderDetailClass OrderDetail)
        {
            ResultClass<List<OrderDetailClass>> result = new ResultClass<List<OrderDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrderDetailForClient";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", OrderDetail.ItemId),
                  new SqlParameter("Qty", OrderDetail.Qty),
                  new SqlParameter("UserNote", OrderDetail.UserNote),
                  new SqlParameter("AdminNote", OrderDetail.AdminNote),

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());

                    if (OrderDetail.PaymentMethodId > 0)
                        cmd.Parameters.Add(new SqlParameter("PaymentMethodId", OrderDetail.PaymentMethodId));

                    if (!String.IsNullOrWhiteSpace(OrderDetail.Notes))
                        cmd.Parameters.Add(new SqlParameter("Notes", OrderDetail.Notes));

                    if (OrderDetail.ItemColorId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemColorId", OrderDetail.ItemColorId));

                    if (OrderDetail.ItemSizeId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemSizeId", OrderDetail.ItemSizeId));

                    if (!String.IsNullOrWhiteSpace(OrderDetail.DeliveryAddress))
                        cmd.Parameters.Add(new SqlParameter("DeliveryAddress", OrderDetail.DeliveryAddress));

                    if (OrderDetail.CityId > 0)
                        cmd.Parameters.Add(new SqlParameter("CityId", OrderDetail.CityId));

                    if (OrderDetail.LocationId > 0)
                        cmd.Parameters.Add(new SqlParameter("LocationId", OrderDetail.LocationId));

                    if (OrderDetail.GovernorateId > 0)
                        cmd.Parameters.Add(new SqlParameter("GovernorateId", OrderDetail.GovernorateId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<OrderDetailClass> OrderDetails = new List<OrderDetailClass>();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                            id.Order = order;
                            OrderDetails.Add(id);
                        }

                        int badgeCount = 0;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                reader.Read();
                                if (!Convert.IsDBNull(reader["ItemsCount"]))
                                    badgeCount = (int)reader["ItemsCount"];
                            }
                        }
                        OrderDetails.ForEach(x => x.BadgeCount = badgeCount);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = OrderDetails;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrderDetailForClient",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailSeriesClass> CreateOrderDetailSeriesForClient_ForMatjar(int LoggedUser, int ItemId, int Quantity)
        {
            ResultClass<OrderDetailSeriesClass> result = new ResultClass<OrderDetailSeriesClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrderDetailSeriesForClient";
                    cmd.CommandTimeout = 45000; 
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (Quantity > 0)
                        Params.Add(new SqlParameter("@SeriesQTY", Quantity));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        OrderDetailSeriesClass orderSeries = new OrderDetailSeriesClass();

                        List<OrderDetailClass> OrderDetails = new List<OrderDetailClass>();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass id;
                        int order = 0;
                        reader.Read();
                        order += 1;
                        id = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                        id.Order = order;
                        OrderDetails.Add(id);

                        int badgeCount = 0;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                reader.Read();
                                if (!Convert.IsDBNull(reader["ItemsCount"]))
                                    badgeCount = (int)reader["ItemsCount"];
                            }
                        }
                        id.BadgeCount = badgeCount;
                        orderSeries.OrderDetail = id;

                        List<ItemSeriesClass> series = new List<ItemSeriesClass>();
                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            if (reader.HasRows)
                            {
                                ItemSeriesClass serie = new ItemSeriesClass();
                                while (reader.Read())
                                {
                                    serie = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);
                                    series.Add(serie);
                                }

                                orderSeries.Series = series;
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderSeries;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrderDetailSeriesForClient",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OrderDetailClass> CreateOrderDetail_ForMatjar(int LoggedUser, OrderDetailClass OrderDetail)
        {
            ResultClass<OrderDetailClass> result = new ResultClass<OrderDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOrderDetail";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderId", OrderDetail.OrderId),
                  new SqlParameter("ItemId", OrderDetail.ItemId),
                  new SqlParameter("Qty", OrderDetail.Qty),
                  new SqlParameter("UserNote", OrderDetail.UserNote),
                  new SqlParameter("AdminNote", OrderDetail.AdminNote),



                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };
                    cmd.Parameters.AddRange(Params.ToArray());

                    if (OrderDetail.PaymentMethodId > 0)
                        cmd.Parameters.Add(new SqlParameter("PaymentMethodId", OrderDetail.PaymentMethodId));

                    if (!String.IsNullOrWhiteSpace(OrderDetail.Notes))
                        cmd.Parameters.Add(new SqlParameter("Notes", OrderDetail.Notes));

                    if (OrderDetail.ItemColorId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemColorId", OrderDetail.ItemColorId));

                    if (OrderDetail.ItemSizeId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemSizeId", OrderDetail.ItemSizeId));

                    if (!String.IsNullOrWhiteSpace(OrderDetail.DeliveryAddress))
                        cmd.Parameters.Add(new SqlParameter("DeliveryAddress", OrderDetail.DeliveryAddress));

                    if (OrderDetail.CityId > 0)
                        cmd.Parameters.Add(new SqlParameter("CityId", OrderDetail.CityId));

                    if (OrderDetail.LocationId > 0)
                        cmd.Parameters.Add(new SqlParameter("LocationId", OrderDetail.LocationId));

                    if (OrderDetail.GovernorateId > 0)
                        cmd.Parameters.Add(new SqlParameter("GovernorateId", OrderDetail.GovernorateId));


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailClass orderdetail;
                        reader.Read();
                        orderdetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                        orderdetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderdetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Upload")]
        public ResultClass<List<UploadResultClass>> UploadImages(int Type)
        {
            ResultClass<List<UploadResultClass>> result = new ResultClass<List<UploadResultClass>>();
            try
            {
                string Url = Config.StaticURL + @Config.ServerPhysicalImagePath.Remove(0, Config.ServerRoot.Length).Replace(@"\", "/"); //@"Photos/";
                string serverPath = Config.ServerPhysicalImagePath;

                HttpFileCollection Images = HttpContext.Current.Request.Files;

                switch (Type)
                {
                    case 1:
                        serverPath += @"Items\";
                        Url += @"Items/";
                        break;
                    case 2:
                        serverPath += @"Categories\";
                        Url += @"Categories/";
                        break;
                    case 3:
                        serverPath += @"Bands\";
                        Url += @"Bands/";
                        break;
                    default:
                        serverPath += @"Other\";
                        Url += @"Other/";
                        break;
                }

                Guid image_guid;
                int i = 0;
                UploadResultClass uploadResult;
                List<UploadResultClass> uploadResultList = new List<UploadResultClass>();
                HttpPostedFile file;
                foreach (string stream in Images)
                {
                    file = Images[stream];
                    uploadResult = new UploadResultClass();
                    uploadResult.OriginalFilename = file.FileName.Replace(' ', '_');
                    i = i + 1;
                    try
                    {
                        if (file.ContentLength > 0)
                        {
                            image_guid = Guid.NewGuid();
                            string fileName = serverPath + image_guid.ToString() + "_" + file.FileName.Replace(' ', '_');
                            file.SaveAs(fileName);

                            try
                            {
                                Bitmap imageThumbnail = ImageHelper.CreateThumbnail(fileName, 100, 100);
                                imageThumbnail.Save("Thumbnail_" + fileName);
                            }
                            catch
                            {

                            }

                            uploadResult.URL = Url + image_guid.ToString() + "_" + file.FileName.Replace(' ', '_');
                            uploadResult.IsUploaded = true;
                            uploadResult.Id = i;
                        }

                    }
                    catch
                    {
                        uploadResult.URL = "";
                        uploadResult.IsUploaded = false;
                        uploadResult.Id = i;
                    }
                    uploadResultList.Add(uploadResult);
                }
                result.Code = Errors.Success;
                result.Message = "";
                result.Result = uploadResultList;
                return result;
            }
            catch (Exception)
            {
                result.Code = Errors.UnknownError;
                result.Message = Errors.GetErrorMessage(result.Code);
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        [SwaggerWcfPath(Deprecated = true)]
        public ResultClass<ExcelFileClass> UploadExcelFile()
        {
            ResultClass<ExcelFileClass> result = new ResultClass<ExcelFileClass>();
            try
            {

                Excel.Application xlApp;
                Excel.Workbook xlWorkBook;
                Excel.Worksheet xlWorkSheet;
                //Excel.Range range;

                //string Url;
                string Path;

                HttpFileCollection Images = HttpContext.Current.Request.Files;


                Path = Config.ServerPhysicalExcelPath + @"\";
                //Url = Config.StaticURL + "/Excel/";


                Guid image_guid;
                int i = 0;
                ExcelFileClass uploadResult;

                HttpPostedFile file;
                foreach (string stream in Images)
                {
                    uploadResult = new ExcelFileClass();
                    i = i + 1;
                    try
                    {
                        if (Images[stream].ContentLength > 0)
                        {
                            file = Images[stream];
                            image_guid = Guid.NewGuid();
                            file.SaveAs(Path + image_guid.ToString() + "_" + file.FileName.Replace(' ', '_'));

                            uploadResult.FileName = Path + image_guid.ToString() + "_" + file.FileName.Replace(' ', '_');
                            uploadResult.Sheets = new List<string>();
                            xlApp = new Excel.Application();
                            xlWorkBook = xlApp.Workbooks.Open(uploadResult.FileName, 0, true, 5, "", "", true,
                               Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\t", false, false, 0, true, 1, 0);

                            for (i = 1; i <= xlWorkBook.Worksheets.Count; i++)
                            {
                                xlWorkSheet = (Excel.Worksheet)xlWorkBook.Worksheets.Item[i];
                                uploadResult.Sheets.Add(xlWorkSheet.Name);
                            }

                            xlWorkBook.Close(true, null, null);
                            xlApp.Quit();

                            Marshal.ReleaseComObject(xlWorkBook);
                            Marshal.ReleaseComObject(xlApp);

                            result.Code = Errors.Success;
                            result.Message = "";
                            result.Result = uploadResult;
                        }

                    }
                    catch (Exception e)
                    {
                        result.Code = Errors.Success;
                        result.Message = e.Message;
                        result.Result = null;
                        Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UploadExcelFile", e.Source, "");
                    }
                }
                return result;
            }
            catch (Exception)
            {
                result.Code = Errors.UnknownError;
                result.Message = Errors.GetErrorMessage(result.Code);
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Upload")]
        public ResultClass<UploadResultClass> UploadExcel()
        {
            ResultClass<UploadResultClass> result = new ResultClass<UploadResultClass>();
            try
            {
                string Url = Config.StaticURL + @Config.ServerPhysicalExcelPath.Remove(0, Config.ServerRoot.Length).Replace(@"\", "/"); //@"Photos/";
                string serverPath = Config.ServerPhysicalExcelPath;

                HttpFileCollection files = HttpContext.Current.Request.Files;
                Guid excel_guid;
                UploadResultClass uploadResult = new UploadResultClass();
                HttpPostedFile file;

                try
                {
                    if (files[0].ContentLength > 0)
                    {
                        file = files[0];
                        string extension = file.FileName.Substring(file.FileName.LastIndexOf('.'), file.FileName.Length - file.FileName.LastIndexOf('.'));
                        if ((extension.ToLower() == ".xls") || (extension.ToLower() == ".xlsx"))
                        {
                            excel_guid = Guid.NewGuid();
                            string fileName = serverPath + excel_guid.ToString() + "_" + file.FileName.Replace(' ', '_');
                            file.SaveAs(fileName);

                            var package = new ExcelPackage(new FileInfo(fileName));
                            var workSheetList = package.Workbook.Worksheets.AsEnumerable().Select(x => x.Name);


                            uploadResult.URL = Url + excel_guid.ToString() + "_" + file.FileName.Replace(' ', '_');
                            uploadResult.IsUploaded = true;
                            uploadResult.Id = 1;
                            uploadResult.WorkSheetList = workSheetList.ToList();
                        }
                    }
                }
                catch (Exception)
                {
                    uploadResult.URL = "";
                    uploadResult.IsUploaded = false;
                    uploadResult.Id = 1;
                }

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = uploadResult;
                return result;
            }
            catch (Exception)
            {
                result.Code = Errors.UnknownError;
                result.Message = Errors.GetErrorMessage(result.Code);
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Upload")]
        public ResultClass<List<string>> CheckUploadImage(List<string> ImagesList)
        {
            ResultClass<List<string>> result = new ResultClass<List<string>>();
            List<string> uploadResult = new List<string>();
            SqlConnection connection = new SqlConnection();
            try
            {
                //MatjarTestDBEntities db = new MatjarTestDBEntities();
                //var items = from p in db.ItemsTbl
                //            where ImagesList.Contains(p.Code)
                //            select p;
                //int xx = 0;

                List<SqlParameter> Params = new List<SqlParameter>();

                DataTable userTable;
                using (userTable = new DataTable())
                {
                    userTable.Columns.Add("Id", typeof(string));
                    foreach (string image in ImagesList)
                        userTable.Rows.Add(image);

                }
                var userList = new SqlParameter("@ItemCodes", SqlDbType.Structured);
                userList.Value = userTable;

                Params.Add(userList);
                SqlDataReader reader = ConnectionClass.ExecuteStoredProcedure("Admin_GetValidItemImages", APITestingMode, Params, out connection);

                if (reader.HasRows)
                {
                    List<int> OrderDetails = new List<int>();
                    var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                    string Id = String.Empty;
                    while (reader.Read())
                    {
                        if (!Convert.IsDBNull(reader["Id"]))
                        {
                            Id = reader["Id"].ToString();
                            uploadResult.Add(Id);
                        }
                    }

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = uploadResult;
                    return result;
                }
                else
                {
                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = null;
                    return result;
                }
            }

            catch
            {
                result.Code = Errors.UnknownError;
                result.Message = Errors.GetErrorMessage(result.Code);
                result.Result = null;
                return result;
            }
            finally
            {
                ConnectionClass.CloseConnection(connection);
            }
        }


        [SwaggerWcfTag("Upload")]
        public ResultClass<List<ItemImageClass>> UploadItemImages()
        {
            ResultClass<List<ItemImageClass>> result = new ResultClass<List<ItemImageClass>>();
            SqlConnection connection = new SqlConnection();
            try
            {
                List<SqlParameter> Params = new List<SqlParameter>();

                //Call Upload Images API
                var uploadImageResult = UploadImages(1);
                //Handle the result

                var imageIndexSplitter = db.ConfigTbl.Select(x => x.ImageIndexSplitter).FirstOrDefault();

                DataTable imageTable;
                using (imageTable = new DataTable())
                {
                    imageTable.Columns.Add("Id", typeof(int));
                    imageTable.Columns.Add("Param1", typeof(string));
                    imageTable.Columns.Add("Param2", typeof(string));
                    imageTable.Columns.Add("Param3", typeof(string));
                    imageTable.Columns.Add("Param4", typeof(bool));
                    imageTable.Columns.Add("Param5", typeof(bool));
                    foreach (var item in uploadImageResult.Result)
                    {
                        if (item.IsUploaded)
                        {
                            string itemCode = "";
                            int itemIndex = 0;
                            string idx = "";
                            string colorCode = "";
                            bool showInCarousal = false;
                            bool showInGallery = false;
                            string showInCarousalStr = "0";
                            string showInGalleryStr = "0";

                            try
                            {
                                
                                try
                                {
                                    if (imageIndexSplitter != "")
                                        itemCode = item.OriginalFilename.Substring(0, item.OriginalFilename.LastIndexOf(".")).Before(imageIndexSplitter);
                                    else
                                        itemCode = "";

                                    if (itemCode == "")
                                        itemCode = item.OriginalFilename.Substring(0, item.OriginalFilename.LastIndexOf("."));
                                }
                                catch {
                                    itemCode = "";
                                }
                                try
                                {
                                    colorCode = item.OriginalFilename.Split(imageIndexSplitter[0])[1];
                                }
                                catch {
                                    colorCode = "";
                                }
                                try
                                {
                                    idx = item.OriginalFilename.Split(imageIndexSplitter[0])[2];
                                }
                                catch {
                                    idx = "0";
                                }
                                try
                                {
                                    showInCarousalStr = item.OriginalFilename.Split(imageIndexSplitter[0])[3];
                                }
                                catch {
                                    showInCarousalStr = "0"; 
                                }
                                try
                                {
                                    showInGalleryStr = item.OriginalFilename.Substring(item.OriginalFilename.LastIndexOf(imageIndexSplitter) + 1, item.OriginalFilename.LastIndexOf(".") - item.OriginalFilename.LastIndexOf(imageIndexSplitter) - 1);
                                }
                                catch {
                                    showInGalleryStr = "0";
                                }
                                                                                                                        

                                Errors.LogError(7, "", "", "1.0.3", "API", "itemCode", itemCode, item.OriginalFilename);
                                Errors.LogError(7, "", "", "1.0.3", "API", "idx", idx, item.OriginalFilename);
                                Errors.LogError(7, "", "", "1.0.3", "API", "colorCode", colorCode, item.OriginalFilename);
                                Errors.LogError(7, "", "", "1.0.3", "API", "showInCarousalStr", showInCarousalStr, item.OriginalFilename);
                                Errors.LogError(7, "", "", "1.0.3", "API", "showInGalleryStr", showInGalleryStr, item.OriginalFilename);

                                /*Errors.LogError(7, "", "", "1.0.3", "API", "ItemCode", itemCode, item.OriginalFilename);

                                string id;
                                id = item.OriginalFilename.Substring(itemCode.Length + 3, item.OriginalFilename.IndexOf(imageIndexSplitter, itemCode.Length + 3) - 1);
                                Errors.LogError(7, "", "", "1.0.3", "API", "itemIndex", id, item.OriginalFilename);
                                
                                //itemIndex = Convert.ToInt32(item.OriginalFilename.Substring(itemCode.Length + 1, item.OriginalFilename.IndexOf(imageIndexSplitter, itemCode.Length + 1)-1));

                                int itemIndexLen = item.OriginalFilename.Substring(itemCode.Length + 2, item.OriginalFilename.IndexOf(imageIndexSplitter, itemCode.Length + 2)).Length;

                                colorCode = item.OriginalFilename.Substring(itemCode.Length + itemIndexLen + 1, item.OriginalFilename.IndexOf(imageIndexSplitter, itemCode.Length + itemIndexLen + 1)-1);
                                Errors.LogError(7, "", "", "1.0.3", "API", "ColorCode", colorCode, item.OriginalFilename);

                                
                                showInCarousalStr = item.OriginalFilename.Substring(itemCode.Length + itemIndexLen + colorCode.Length + 1, item.OriginalFilename.IndexOf(imageIndexSplitter, itemCode.Length + itemIndexLen + colorCode.Length + 1)-1);
                                Errors.LogError(7, "", "", "1.0.3", "API", "showInCarousalStr", showInCarousalStr, item.OriginalFilename);

                                
                                showInGalleryStr = item.OriginalFilename.Substring(itemCode.Length + itemIndexLen + colorCode.Length + showInCarousalStr.Length + 1, item.OriginalFilename.IndexOf(imageIndexSplitter, itemCode.Length + itemIndexLen + colorCode.Length + showInCarousalStr.Length + 1) - 1);
                                Errors.LogError(7, "", "", "1.0.3", "API", "showInGalleryStr", showInGalleryStr, item.OriginalFilename);
                                */

                                try
                                {
                                    if ((Convert.ToInt32(showInCarousalStr)) == 0)
                                        showInCarousal = false;
                                    else
                                        showInCarousal = true;
                                }
                                catch
                                {
                                    showInCarousal = false;
                                }
                               
                                try
                                { 
                                if ((Convert.ToInt32(showInGalleryStr)) == 0)
                                    showInGallery = false;
                                else
                                    showInGallery = true;
                                }
                                catch
                                {
                                    showInGallery = true;
                                }

                                try
                                {
                                    itemIndex = Convert.ToInt32(idx);
                                }
                                catch
                                {
                                    itemIndex = 1;
                                }
                            }
                            catch (Exception e) {
                                Errors.LogError(7, e.Message, e.StackTrace, "1.0.3", "API", "UploadItemImages", e.Source, item.OriginalFilename);

                            }
  
                            if (imageIndexSplitter != "")
                                itemCode = item.OriginalFilename.Substring(0, item.OriginalFilename.LastIndexOf(".")).Before(imageIndexSplitter);
                            else
                                itemCode = "";

                            if (itemCode == "")
                                itemCode = item.OriginalFilename.Substring(0, item.OriginalFilename.LastIndexOf("."));
                            imageTable.Rows.Add(itemIndex, itemCode, item.URL, colorCode, showInCarousal, showInGallery);
                        }
                    }
                }
                var imagesList = new SqlParameter("@ItemImages", SqlDbType.Structured);
                imagesList.Value = imageTable;
                Params.Add(imagesList);

                SqlDataReader reader = ConnectionClass.ExecuteStoredProcedure("Admin_InsertItemsImages_Multi", APITestingMode, Params, out connection);
                //WIP !@@!!!!!!!!
                if (reader.HasRows)
                {
                    var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                    List<ItemImageClass> imageList = new List<ItemImageClass>();
                    ItemImageClass image;
                    int order = 0;
                    while (reader.Read())
                    {
                        order += 1;
                        image = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                        image.Order = order;

                        imageList.Add(image);
                    }

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = imageList;
                    return result;
                }
                else
                {
                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = null;
                    return result;
                }
            }

            catch
            {
                result.Code = Errors.UnknownError;
                result.Message = Errors.GetErrorMessage(result.Code);
                result.Result = null;
                return result;
            }
            finally
            {
                ConnectionClass.CloseConnection(connection);
            }
        }

        //in same api add it to item images
        //TODO: add api to call upload images then insert the result in ItemImages Table


        //Reports
        [SwaggerWcfTag("Reports")]
        public ResultClass<DeviceLogReportClass> GetDeviceLogReport(int LoggedUser, string FromDate, string ToDate,
           List<int> UserIds, int RecordsCount = 9999999, int PageId = 1)
        {
            ResultClass<DeviceLogReportClass> result = new ResultClass<DeviceLogReportClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetDeviceLogReport_Multi";

                    cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.Add(new SqlParameter("PageId", PageId));

                    DataTable userTable;
                    using (userTable = new DataTable())
                    {
                        userTable.Columns.Add("Id", typeof(string));
                        foreach (int x in UserIds)
                            userTable.Rows.Add(x);
                    }
                    var userList = new SqlParameter("@UserIds", SqlDbType.Structured);
                    userList.Value = userTable;
                    cmd.Parameters.Add(userList);

                    if ((!string.IsNullOrWhiteSpace(FromDate)) && (!string.IsNullOrWhiteSpace(ToDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, rd.FieldCount).Select(i => rd.GetName(i)).ToArray();

                        result.Result = new DeviceLogReportClass();
                        int Order = RecordsCount * (PageId - 1);
                        DeviceLogClass deviceLog;
                        List<DeviceLogClass> deviceLogList = new List<DeviceLogClass>();
                        while (rd.Read())
                        {
                            Order += 1;
                            deviceLog = new DeviceLogClass();

                            if (!Convert.IsDBNull(rd["Id"]))
                                deviceLog.Id = (int)rd["Id"];
                            if (!Convert.IsDBNull(rd["UserId"]))
                                deviceLog.UserId = (int)rd["UserId"];
                            if (!Convert.IsDBNull(rd["Username"]))
                                deviceLog.Username = rd["Username"].ToString();
                            if (!Convert.IsDBNull(rd["FullName"]))
                                deviceLog.FullName = rd["FullName"].ToString();

                            if (!Convert.IsDBNull(rd["Date"]))
                                deviceLog.Date = ((DateTime)rd["Date"]).ToString("yyyy-MM-dd");

                            if (!Convert.IsDBNull(rd["Model"]))
                                deviceLog.Model = rd["Model"].ToString();
                            if (!Convert.IsDBNull(rd["Version"]))
                                deviceLog.Version = rd["Version"].ToString();
                            if (!Convert.IsDBNull(rd["Platform"]))
                                deviceLog.Platform = rd["Platform"].ToString();
                            if (!Convert.IsDBNull(rd["Manufacture"]))
                                deviceLog.Manufacture = rd["Manufacture"].ToString();
                            if (!Convert.IsDBNull(rd["UUID"]))
                                deviceLog.UUID = rd["UUID"].ToString();

                            if (!Convert.IsDBNull(rd["lunchcount"]))
                                deviceLog.Lunchcount = (int)rd["lunchcount"];

                            if (!Convert.IsDBNull(rd["MobileNo"]))
                                deviceLog.MobileNo = rd["MobileNo"].ToString();


                            deviceLog.DeviceUser = new UserClass().PopulateUser(fieldNames, rd, "DeviceUser_");

                            deviceLog.Order = Order;

                            deviceLogList.Add(deviceLog);

                        }


                        if ((((rd.NextResult()))) && (rd.HasRows))
                        {
                            rd.Read();

                            if (!Convert.IsDBNull(rd["TotalInstalls"]))
                                result.Result.TotalInstalls = (int)rd["TotalInstalls"];
                            if (!Convert.IsDBNull(rd["TotalAndroidInstalls"]))
                                result.Result.TotalAndroidInstalls = (int)rd["TotalAndroidInstalls"];
                            if (!Convert.IsDBNull(rd["TotalIosInstalls"]))
                                result.Result.TotalIosInstalls = (int)rd["TotalIosInstalls"];
                        }
                        result.Code = Errors.Success;
                        result.Result.DeviceLogList = deviceLogList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }

                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetDeviceLogReport", "", "");
                }
                result.Result = null;
                return result;
            }
        }

        // Transfer Report
        [SwaggerWcfTag("Reports")]
        public ResultClass<List<TransferClass>> TransfersReport(int LoggedUser, TransfersReportParamsClass ReportParams,
           int RecordsCount = 99999999, int PageId = 1)
        {
            ResultClass<List<TransferClass>> result = new ResultClass<List<TransferClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Report_Trasfers_Report_Multi";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    Params.Add(new SqlParameter("RecordsCount", RecordsCount));
                    Params.Add(new SqlParameter("PageId", PageId));

                    DataTable senderTable;
                    using (senderTable = new DataTable())
                    {
                        senderTable.Columns.Add("Id", typeof(string));
                        foreach (int x in ReportParams.Sender_UserIds)
                            senderTable.Rows.Add(x);
                    }
                    var pList1 = new SqlParameter("@Sender_UserIds", SqlDbType.Structured);
                    pList1.Value = senderTable;
                    Params.Add(pList1);

                    DataTable reciverTable;
                    using (reciverTable = new DataTable())
                    {
                        reciverTable.Columns.Add("Id", typeof(string));
                        foreach (int x in ReportParams.Receiver_UserIds)
                            reciverTable.Rows.Add(x);
                    }
                    var pList2 = new SqlParameter("@Receiver_UserIds", SqlDbType.Structured);
                    pList2.Value = reciverTable;
                    Params.Add(pList2);


                    if ((ReportParams.FilterDates) && (!String.IsNullOrWhiteSpace(ReportParams.FromDate)) &&
                        (!String.IsNullOrWhiteSpace(ReportParams.ToDate)))
                    {
                        Params.Add(new SqlParameter("FilterDates", true));
                        Params.Add(new SqlParameter("FromDate", ReportParams.FromDate));
                        Params.Add(new SqlParameter("ToDate", ReportParams.ToDate));
                    }

                    if ((ReportParams.FilterTransferMethod) && (!String.IsNullOrWhiteSpace(ReportParams.TransferMethodId)))
                    {
                        Params.Add(new SqlParameter("FilterTransferMethod", true));
                        Params.Add(new SqlParameter("TransferMethodId", ReportParams.TransferMethodId));
                    }

                    if ((ReportParams.FilterTransferStatus) && (!String.IsNullOrWhiteSpace(ReportParams.TransferStatusId)))
                    {
                        Params.Add(new SqlParameter("FilterTransferStatus", true));
                        Params.Add(new SqlParameter("TransferStatusId", ReportParams.TransferStatusId));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<TransferClass> Transfers = new List<TransferClass>();
                        TransferClass Transfer;
                        int order = (RecordsCount * (PageId - 1));
                        while (reader.Read())
                        {
                            order += 1;
                            Transfer = new TransferClass().PopulateTransfer(fieldNames, reader);

                            Transfer.Order = order;

                            Transfers.Add(Transfer);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Transfers;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "TransfersReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Report for Item order
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemOrdersReportResultClass> GetItemOrdersReport(int LoggedUser,
           ItemOrdersReportClass ItemOrdersReport)
        {
            ResultClass<ItemOrdersReportResultClass> result = new ResultClass<ItemOrdersReportResultClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemOrdersReport_Multi";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("FilterDates", ItemOrdersReport.FilterDates),
                  new SqlParameter("FromDate", ItemOrdersReport.FromDate),
                  new SqlParameter("ToDate", ItemOrdersReport.ToDate),
                  new SqlParameter("FilterUser", ItemOrdersReport.FilterUser)
               };

                    DataTable itemTable;
                    using (itemTable = new DataTable())
                    {
                        itemTable.Columns.Add("Id", typeof(string));
                        foreach (int x in ItemOrdersReport.ItemIds)
                            itemTable.Rows.Add(x);
                    }
                    var itemList = new SqlParameter("@ItemIds", SqlDbType.Structured);
                    itemList.Value = itemTable;
                    Params.Add(itemList);

                    DataTable userTable;
                    using (userTable = new DataTable())
                    {
                        userTable.Columns.Add("Id", typeof(string));
                        foreach (int x in ItemOrdersReport.UserIds)
                            userTable.Rows.Add(x);
                    }
                    var userList = new SqlParameter("@UserIds", SqlDbType.Structured);
                    userList.Value = userTable;
                    Params.Add(userList);


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemOrdersReportResultClass itemOrdersReportResult = new ItemOrdersReportResultClass();
                        List<ItemOrdersClass> itemOrders = new List<ItemOrdersClass>();
                        ItemOrdersClass itemOrder;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            itemOrder = new ItemOrdersClass();
                            itemOrder.OrderClass = new OrderClass().PopulateOrderClass(fieldNames, reader);

                            itemOrder.OrderDetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                            itemOrder.Order = order;
                            itemOrders.Add(itemOrder);
                        }

                        itemOrdersReportResult.ItemOrders = itemOrders;
                        ItemOrdersSummery summery;
                        if ((reader.NextResult()) && (reader.HasRows))
                        {
                            reader.Read();
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            summery = new ItemOrdersSummery().PopulateItemOrdersSummery(fieldNames, reader);
                            itemOrdersReportResult.Summery = summery;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemOrdersReportResult;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemOrdersReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Reports")]
        public ResultClass<ItemOrdersReportResultClass> GetItemOrdersReport_Multi(int LoggedUser,
           ItemOrdersReportClass ItemOrdersReport, int RecordsCount = 99999999, int PageId = 1)
        {
            ResultClass<ItemOrdersReportResultClass> result = new ResultClass<ItemOrdersReportResultClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemOrdersReport_Multi";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("FilterDates", ItemOrdersReport.FilterDates),
                  new SqlParameter("FromDate", ItemOrdersReport.FromDate),
                  new SqlParameter("ToDate", ItemOrdersReport.ToDate),
                  new SqlParameter("FilterUser", ItemOrdersReport.FilterUser)
               };

                    DataTable itemTable;
                    using (itemTable = new DataTable())
                    {
                        itemTable.Columns.Add("Id", typeof(string));
                        foreach (int x in ItemOrdersReport.ItemIds)
                            itemTable.Rows.Add(x);
                    }
                    var itemList = new SqlParameter("@ItemIds", SqlDbType.Structured);
                    itemList.Value = itemTable;
                    Params.Add(itemList);

                    DataTable userTable;
                    using (userTable = new DataTable())
                    {
                        userTable.Columns.Add("Id", typeof(string));
                        foreach (int x in ItemOrdersReport.UserIds)
                            userTable.Rows.Add(x);
                    }
                    var userList = new SqlParameter("@UserIds", SqlDbType.Structured);
                    userList.Value = userTable;
                    Params.Add(userList);


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemOrdersReportResultClass itemOrdersReportResult = new ItemOrdersReportResultClass();
                        List<ItemOrdersClass> itemOrders = new List<ItemOrdersClass>();
                        ItemOrdersClass itemOrder;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            itemOrder = new ItemOrdersClass();
                            itemOrder.OrderClass = new OrderClass().PopulateOrderClass(fieldNames, reader);

                            itemOrder.OrderDetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);

                            itemOrder.Order = order + (RecordsCount * (PageId - 1));
                            itemOrders.Add(itemOrder);
                        }

                        itemOrdersReportResult.ItemOrders = itemOrders;
                        ItemOrdersSummery summery;
                        if ((reader.NextResult()) && (reader.HasRows))
                        {
                            reader.Read();
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            summery = new ItemOrdersSummery().PopulateItemOrdersSummery(fieldNames, reader);
                            itemOrdersReportResult.Summery = summery;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemOrdersReportResult;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemOrdersReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //Report for Offer Items History
        [SwaggerWcfTag("Reports")]
        public ResultClass<List<OrderDetailsReportResultClass>> GetOrderDetailsReport(int LoggedUser,
           OrderDetailsReport OrderDetailsReport, int RecordsCount = 99999999, int PageId = 1)
        {
            ResultClass<List<OrderDetailsReportResultClass>> result =
               new ResultClass<List<OrderDetailsReportResultClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrderDetailsReport_Multi";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("PageId", PageId),

                  new SqlParameter("FilterDates", OrderDetailsReport.FilterDates),
                  new SqlParameter("FromDate", OrderDetailsReport.FromDate),
                  new SqlParameter("ToDate", OrderDetailsReport.ToDate),
                  new SqlParameter("FilterUser", OrderDetailsReport.FilterUser)
               };
                    DataTable userTable;
                    using (userTable = new DataTable())
                    {
                        userTable.Columns.Add("Id", typeof(string));
                        foreach (int x in OrderDetailsReport.UserIds)
                            userTable.Rows.Add(x);
                    }
                    var userList = new SqlParameter("@UserIds", SqlDbType.Structured);
                    userList.Value = userTable;
                    Params.Add(userList);

                    DataTable offerTable;
                    using (offerTable = new DataTable())
                    {
                        offerTable.Columns.Add("Id", typeof(string));
                        foreach (int x in OrderDetailsReport.OfferIds)
                            offerTable.Rows.Add(x);
                    }
                    var offerList = new SqlParameter("@OfferIds", SqlDbType.Structured);
                    offerList.Value = offerTable;
                    Params.Add(offerList);


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OrderDetailsReportResultClass orderDetailsResult;
                        List<OrderDetailsReportResultClass> orderDetailsList = new List<OrderDetailsReportResultClass>();

                        int order = (RecordsCount * (PageId - 1));
                        while (reader.Read())
                        {
                            orderDetailsResult = new OrderDetailsReportResultClass();
                            order++;

                            orderDetailsResult.OrderClass = new OrderClass().PopulateOrderClass(fieldNames, reader);


                            orderDetailsResult.OrderDetail = new OrderDetailClass().PopulateOrderDetail(fieldNames, reader);


                            orderDetailsResult.Order = order;
                            orderDetailsList.Add(orderDetailsResult);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetailsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderDetailsReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Reports")]
        public ResultClass<List<TotalUserBalanceReportClass>> GetTotalUserBalanceReport(int LoggedUser,
          bool FilterByDate, string FromDate, string ToDate,
          List<int> UserIds, List<int> Sender_UserIds, List<int> Receiver_UserIds,
          bool ShowUsersWhoHaveResultsOnly, int RecordsCount = 99999999, int PageId = 1)
        {
            ResultClass<List<TotalUserBalanceReportClass>> result = new ResultClass<List<TotalUserBalanceReportClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "TotalUserBalanceReport";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("ShowUsersWhoHaveResultsOnly", ShowUsersWhoHaveResultsOnly));
                    cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.Add(new SqlParameter("PageId", PageId));

                    if ((FilterByDate) && (!String.IsNullOrWhiteSpace(FromDate?.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToDate?.Trim())))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterDates", FilterByDate));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    //UserIds
                    DataTable userIdTable;
                    using (userIdTable = new DataTable())
                    {
                        userIdTable.Columns.Add("Id", typeof(string));
                        foreach (int x in UserIds)
                            userIdTable.Rows.Add(x);
                    }
                    var uIdList = new SqlParameter("@UserIds", SqlDbType.Structured);
                    uIdList.Value = userIdTable;
                    cmd.Parameters.Add(uIdList);

                    //Sender_UserIds
                    DataTable userSenderTable;
                    using (userSenderTable = new DataTable())
                    {
                        userSenderTable.Columns.Add("Id", typeof(string));
                        foreach (int x in Sender_UserIds)
                            userSenderTable.Rows.Add(x);
                    }
                    var uSenderList = new SqlParameter("@Sender_UserIds", SqlDbType.Structured);
                    uSenderList.Value = userSenderTable;
                    cmd.Parameters.Add(uSenderList);

                    //Receiver_UserIds
                    DataTable userReceiverTable;
                    using (userReceiverTable = new DataTable())
                    {
                        userReceiverTable.Columns.Add("Id", typeof(string));
                        foreach (int x in Receiver_UserIds)
                            userReceiverTable.Rows.Add(x);
                    }
                    var uReceiverList = new SqlParameter("@Receiver_UserIds", SqlDbType.Structured);
                    uReceiverList.Value = userReceiverTable;
                    cmd.Parameters.Add(uReceiverList);

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<TotalUserBalanceReportClass> userBalanceList = new List<TotalUserBalanceReportClass>();
                        TotalUserBalanceReportClass userBalance;
                        int order = (RecordsCount * (PageId - 1));
                        while (reader.Read())
                        {
                            order += 1;
                            userBalance = new TotalUserBalanceReportClass().PopulateUserReport(fieldNames, reader);

                            userBalance.Order = order;

                            userBalanceList.Add(userBalance);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = userBalanceList;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetTotalUserBalanceReportClass",
                       e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Reports")]
        public ResultClass<List<PointsReportClass>> PointsReport(int LoggedUser,
           bool FilterByDate, string FromDate, string ToDate,
           List<int> UserIds, bool FilterBySendersIds, List<int> SendersIds, bool FilterByReceiversIds,
           List<int> ReceiversIds,
           bool FilterByOperations, List<int> OperationsIds, int RecordsCount = 99999999, int PageId = 1
        )
        {
            ResultClass<List<PointsReportClass>> result = new ResultClass<List<PointsReportClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Report_Points";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.Add(new SqlParameter("PageId", PageId));

                    if ((FilterByDate) && (!String.IsNullOrWhiteSpace(FromDate?.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToDate?.Trim())))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByDate", FilterByDate));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    //UsersIds
                    if (UserIds != null)
                    {
                        DataTable userIdTable;
                        using (userIdTable = new DataTable())
                        {
                            userIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userIdTable.Rows.Add(x);
                        }
                        var uIdList = new SqlParameter("@UsersIds", SqlDbType.Structured);
                        uIdList.Value = userIdTable;
                        cmd.Parameters.Add(uIdList);
                    }
                    //SendersIds
                    if ((FilterBySendersIds) && (SendersIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterBySendersIds", FilterBySendersIds));
                        DataTable userSenderTable;
                        using (userSenderTable = new DataTable())
                        {
                            userSenderTable.Columns.Add("Id", typeof(string));
                            foreach (int x in SendersIds)
                                userSenderTable.Rows.Add(x);
                        }
                        var uSenderList = new SqlParameter("@SendersIds", SqlDbType.Structured);
                        uSenderList.Value = userSenderTable;
                        cmd.Parameters.Add(uSenderList);
                    }
                    //ReceiversIds

                    if ((FilterByReceiversIds) && (ReceiversIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByRecieversIds", FilterByReceiversIds));
                        DataTable userReceiverTable;
                        using (userReceiverTable = new DataTable())
                        {
                            userReceiverTable.Columns.Add("Id", typeof(string));
                            foreach (int x in ReceiversIds)
                                userReceiverTable.Rows.Add(x);
                        }
                        var uReceiverList = new SqlParameter("@ReceiversIds", SqlDbType.Structured);
                        uReceiverList.Value = userReceiverTable;
                        cmd.Parameters.Add(uReceiverList);
                    }

                    //OperationsIds
                    if ((FilterByOperations) && (OperationsIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByOperations", FilterByOperations));
                        DataTable userOperationTable;
                        using (userOperationTable = new DataTable())
                        {
                            userOperationTable.Columns.Add("Id", typeof(string));
                            foreach (int x in OperationsIds)
                                userOperationTable.Rows.Add(x);
                        }
                        var uOperationList = new SqlParameter("@OperationsIds", SqlDbType.Structured);
                        uOperationList.Value = userOperationTable;
                        cmd.Parameters.Add(uOperationList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<PointsReportClass> PointsList = new List<PointsReportClass>();
                        PointsReportClass Points;
                        int order = (RecordsCount * (PageId - 1));
                        while (reader.Read())
                        {
                            order += 1;
                            Points = new PointsReportClass().PopulateTotalPointsReport(fieldNames, reader);

                            Points.Order = order;

                            PointsList.Add(Points);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = PointsList;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "PointsReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Reports")]
        public ResultClass<TotalPointsReportAppClass> TotalPointsReportApp(int LoggedUser,
           bool FilterByDate, string FromDate, string ToDate,
           List<int> UserIds, bool FilterBySendersIds, List<int> SendersIds, bool FilterByReceiversIds,
           List<int> ReceiversIds,
           bool FilterByOperations, List<int> OperationsIds, int RecordsCount = 99999999, int PageId = 1
        )
        {
            int id = 0;
            ResultClass<TotalPointsReportAppClass> result = new ResultClass<TotalPointsReportAppClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Report_TotalPoints_App";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.Add(new SqlParameter("PageId", PageId));

                    if ((FilterByDate) && (!String.IsNullOrWhiteSpace(FromDate?.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToDate?.Trim())))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByDate", FilterByDate));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    //UsersIds
                    if (UserIds != null)
                    {
                        DataTable userIdTable;
                        using (userIdTable = new DataTable())
                        {
                            userIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userIdTable.Rows.Add(x);
                        }
                        var uIdList = new SqlParameter("@UsersIds", SqlDbType.Structured);
                        uIdList.Value = userIdTable;
                        cmd.Parameters.Add(uIdList);
                    }
                    //SendersIds
                    if ((FilterBySendersIds) && (SendersIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterBySendersIds", FilterBySendersIds));
                        DataTable userSenderTable;
                        using (userSenderTable = new DataTable())
                        {
                            userSenderTable.Columns.Add("Id", typeof(string));
                            foreach (int x in SendersIds)
                                userSenderTable.Rows.Add(x);
                        }
                        var uSenderList = new SqlParameter("@SendersIds", SqlDbType.Structured);
                        uSenderList.Value = userSenderTable;
                        cmd.Parameters.Add(uSenderList);
                    }
                    //ReceiversIds

                    if ((FilterByReceiversIds) && (ReceiversIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByRecieversIds", FilterByReceiversIds));
                        DataTable userReceiverTable;
                        using (userReceiverTable = new DataTable())
                        {
                            userReceiverTable.Columns.Add("Id", typeof(string));
                            foreach (int x in ReceiversIds)
                                userReceiverTable.Rows.Add(x);
                        }
                        var uReceiverList = new SqlParameter("@ReceiversIds", SqlDbType.Structured);
                        uReceiverList.Value = userReceiverTable;
                        cmd.Parameters.Add(uReceiverList);
                    }

                    //OperationsIds
                    if ((FilterByOperations) && (OperationsIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByOperations", FilterByOperations));
                        DataTable userOperationTable;
                        using (userOperationTable = new DataTable())
                        {
                            userOperationTable.Columns.Add("Id", typeof(string));
                            foreach (int x in OperationsIds)
                                userOperationTable.Rows.Add(x);
                        }
                        var uOperationList = new SqlParameter("@OperationsIds", SqlDbType.Structured);
                        uOperationList.Value = userOperationTable;
                        cmd.Parameters.Add(uOperationList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();

                    result.Result = new TotalPointsReportAppClass();
                    var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                    List<TotalPointsReportClass> totalPointsList = new List<TotalPointsReportClass>();
                    TotalPointsReportClass totalPoints;
                    int order = (RecordsCount * (PageId - 1));

                    if (reader.HasRows)
                    {

                        //Senders
                        while (reader.Read())
                        {
                            id = (int)reader["Id"];
                            order += 1;
                            totalPoints = new TotalPointsReportClass().PopulateTotalPointsReport(fieldNames, reader);

                            totalPoints.Order = order;

                            totalPointsList.Add(totalPoints);
                        }
                        result.Result.Senders = new List<TotalPointsReportClass>();
                        result.Result.Senders = totalPointsList;

                    }


                    if (reader.NextResult())
                    {
                        //Receivers
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            totalPointsList = new List<TotalPointsReportClass>();
                            order = (RecordsCount * (PageId - 1));
                            while (reader.Read())
                            {
                                id = (int)reader["Id"];
                                order += 1;
                                totalPoints = new TotalPointsReportClass().PopulateTotalPointsReport(fieldNames, reader);

                                totalPoints.Order = order;

                                totalPointsList.Add(totalPoints);
                            }

                            result.Result.Receivers = new List<TotalPointsReportClass>();
                            result.Result.Receivers = totalPointsList;
                        }
                    }

                    if (reader.NextResult())
                    {
                        //Orders
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            totalPointsList = new List<TotalPointsReportClass>();
                            order = (RecordsCount * (PageId - 1));
                            while (reader.Read())
                            {
                                id = (int)reader["Id"];
                                order += 1;
                                totalPoints = new TotalPointsReportClass().PopulateTotalPointsReport(fieldNames, reader);

                                totalPoints.Order = order;

                                totalPointsList.Add(totalPoints);
                            }

                            result.Result.Orders = new List<TotalPointsReportClass>();
                            result.Result.Orders = totalPointsList;
                        }
                    }
                    result.Message = "";
                    result.Code = Errors.Success;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = id.ToString() + " - " + e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "TotalPointsReportApp", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<TotalPointsReportClass>> TotalPointsReport(int LoggedUser,
           bool FilterByDate, string FromDate, string ToDate,
           List<int> UserIds, bool FilterBySendersIds, List<int> SendersIds, bool FilterByReceiversIds,
           List<int> ReceiversIds,
           bool FilterByOperations, List<int> OperationsIds, int RecordsCount = 99999999, int PageId = 1)
        {
            int id = 0;
            ResultClass<List<TotalPointsReportClass>> result = new ResultClass<List<TotalPointsReportClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Report_TotalPoints";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));
                    cmd.Parameters.Add(new SqlParameter("PageId", PageId));

                    if ((FilterByDate) && (!String.IsNullOrWhiteSpace(FromDate?.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToDate?.Trim())))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByDate", FilterByDate));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    //UsersIds
                    if (UserIds != null)
                    {
                        DataTable userIdTable;
                        using (userIdTable = new DataTable())
                        {
                            userIdTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userIdTable.Rows.Add(x);
                        }
                        var uIdList = new SqlParameter("@UsersIds", SqlDbType.Structured);
                        uIdList.Value = userIdTable;
                        cmd.Parameters.Add(uIdList);
                    }
                    //SendersIds
                    if ((FilterBySendersIds) && (SendersIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterBySendersIds", FilterBySendersIds));
                        DataTable userSenderTable;
                        using (userSenderTable = new DataTable())
                        {
                            userSenderTable.Columns.Add("Id", typeof(string));
                            foreach (int x in SendersIds)
                                userSenderTable.Rows.Add(x);
                        }
                        var uSenderList = new SqlParameter("@SendersIds", SqlDbType.Structured);
                        uSenderList.Value = userSenderTable;
                        cmd.Parameters.Add(uSenderList);
                    }
                    //ReceiversIds

                    if ((FilterByReceiversIds) && (ReceiversIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByRecieversIds", FilterByReceiversIds));
                        DataTable userReceiverTable;
                        using (userReceiverTable = new DataTable())
                        {
                            userReceiverTable.Columns.Add("Id", typeof(string));
                            foreach (int x in ReceiversIds)
                                userReceiverTable.Rows.Add(x);
                        }
                        var uReceiverList = new SqlParameter("@ReceiversIds", SqlDbType.Structured);
                        uReceiverList.Value = userReceiverTable;
                        cmd.Parameters.Add(uReceiverList);
                    }

                    //OperationsIds
                    if ((FilterByOperations) && (OperationsIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByOperations", FilterByOperations));
                        DataTable userOperationTable;
                        using (userOperationTable = new DataTable())
                        {
                            userOperationTable.Columns.Add("Id", typeof(string));
                            foreach (int x in OperationsIds)
                                userOperationTable.Rows.Add(x);
                        }
                        var uOperationList = new SqlParameter("@OperationsIds", SqlDbType.Structured);
                        uOperationList.Value = userOperationTable;
                        cmd.Parameters.Add(uOperationList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<TotalPointsReportClass> totalPointsList = new List<TotalPointsReportClass>();
                        TotalPointsReportClass totalPoints;
                        int order = (RecordsCount * (PageId - 1));
                        while (reader.Read())
                        {
                            id = (int)reader["Id"];
                            order += 1;
                            totalPoints = new TotalPointsReportClass().PopulateTotalPointsReport(fieldNames, reader);

                            totalPoints.Order = order;

                            totalPointsList.Add(totalPoints);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = totalPointsList;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = id.ToString() + " - " + e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "TotalPointsReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("Reports")]
        public ResultClass<List<UserSessionClass>> UserSessionsReport(int LoggedUser,
         bool FilterByUserId, List<int> UserIds,
         bool FilterByDates, string FromDate, string ToDate,
         bool FilterByTimes, string FromTime, string ToTime,
         bool FilterByUserType, bool ShowGuest, bool ShowRegisteredUser,
         bool GroupByDay, bool GroupByHour,
         int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<UserSessionClass>> result = new ResultClass<List<UserSessionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUserSessions";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),

                  new SqlParameter("FilterByUserType", FilterByUserType),
                  new SqlParameter("ShowGuest", ShowGuest),
                  new SqlParameter("ShowRegisteredUser", ShowRegisteredUser),

                  new SqlParameter("GroupByDay", GroupByDay),
                  new SqlParameter("GroupByHour", GroupByHour),

                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount)
               };


                    if ((FilterByDates) && (!String.IsNullOrWhiteSpace(FromDate.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToDate.Trim())))
                    {
                        Params.Add(new SqlParameter("FilterByDates", FilterByDates));
                        Params.Add(new SqlParameter("FromDate", FromDate));
                        Params.Add(new SqlParameter("ToDate", ToDate));
                    }


                    if ((FilterByTimes) && (!String.IsNullOrWhiteSpace(FromTime.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToTime.Trim())))
                    {
                        Params.Add(new SqlParameter("FilterByTimes", FilterByTimes));
                        Params.Add(new SqlParameter("FromTime", FromTime));
                        Params.Add(new SqlParameter("ToTime", ToTime));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());



                    if ((FilterByUserId) && (UserIds != null))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserId", FilterByUserId));

                        //UserTypeIds
                        DataTable userIdsTable;
                        using (userIdsTable = new DataTable())
                        {
                            userIdsTable.Columns.Add("Item", typeof(int));
                            foreach (int x in UserIds)
                                userIdsTable.Rows.Add(x);
                        }
                        SqlParameter pList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        pList.ParameterName = "@UserIds";
                        pList.TypeName = "dbo.IntList";
                        pList.Value = userIdsTable.DefaultView.ToTable();
                        cmd.Parameters.Add(pList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<UserSessionClass> Users = new List<UserSessionClass>();
                        UserSessionClass user;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            user = new UserSessionClass().PopulateUserSession(fieldNames, reader);
                            user.Order = order + (RecordsCount * (PageId - 1));
                            Users.Add(user);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = Users;

                        return result;

                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UserSessionsReport", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }





        //Auditing
        [SwaggerWcfTag("Auditing")]
        public ResultClass<List<AuditLogClass>> GetAuditLog(int LoggedUser, int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<AuditLogClass>> result = new ResultClass<List<AuditLogClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAudit_Log";

                    cmd.CommandTimeout = 1500000;
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    if (PageId > 0)
                        cmd.Parameters.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<AuditLogClass> auditList = new List<AuditLogClass>();
                        AuditLogClass item;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            item = new AuditLogClass().PopulateAuditLog(fieldNames, reader);

                            item.Order = order + (RecordsCount * (PageId - 1));
                            auditList.Add(item);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = auditList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetAuditLog", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Auditing")]
        public ResultClass<List<AuditLogClass>> GetAuditLogDetails(int LoggedUser, string Id)
        {
            ResultClass<List<AuditLogClass>> result = new ResultClass<List<AuditLogClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAudiLogDetails";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<AuditLogClass> auditList = new List<AuditLogClass>();
                        AuditLogClass item;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            item = new AuditLogClass().PopulateAuditLog(fieldNames, reader);

                            item.Order = order;
                            auditList.Add(item);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = auditList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetAuditLogDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<AuditLogClass>> SearchAuditLog(int LoggedUser,
           bool FilterByUserId, int UserId,
           bool FilterByCustomName, string CustomName,
           bool FilterByType, string Type,
           bool FilterDates, string FromDate, string ToDate,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<AuditLogClass>> result = new ResultClass<List<AuditLogClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchAudit_Log";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    if (PageId > 0)
                        cmd.Parameters.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));


                    if ((FilterByUserId) && (UserId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserId", FilterByUserId));
                        cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    }

                    if ((FilterByCustomName) && (!String.IsNullOrWhiteSpace(CustomName)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCustomName", FilterByCustomName));
                        cmd.Parameters.Add(new SqlParameter("CustomName", CustomName));
                    }

                    if ((FilterByType) && (!String.IsNullOrWhiteSpace(Type)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByType", FilterByType));
                        cmd.Parameters.Add(new SqlParameter("Type", Type));
                    }

                    if ((FilterDates) && (!String.IsNullOrWhiteSpace(FromDate)) && (!String.IsNullOrWhiteSpace(ToDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterDates", FilterDates));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<AuditLogClass> auditList = new List<AuditLogClass>();
                        AuditLogClass item;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            item = new AuditLogClass().PopulateAuditLog(fieldNames, reader);

                            item.Order = order + (RecordsCount * (PageId - 1));
                            auditList.Add(item);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = auditList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchAuditLog", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Auditing")]
        public ResultClass<List<AuditLogClass>> SearchAuditLog_Multi(int LoggedUser,
           bool FilterByUserId, List<int> UserIds,
           bool FilterByCustomName, string CustomName,
           bool FilterByFieldName, string FieldName,
           bool FilterByValue, string Value,
           bool FilterByType, string Type,
           bool FilterDates, string FromDate, string ToDate,
           int PageId = 1, int RecordsCount = 10000)
        {
            ResultClass<List<AuditLogClass>> result = new ResultClass<List<AuditLogClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchAudit_Log_Multi";
                    cmd.CommandTimeout = 1500000;
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    if (PageId > 0)
                        cmd.Parameters.Add(new SqlParameter("PageId", PageId));
                    if (RecordsCount > 0)
                        cmd.Parameters.Add(new SqlParameter("RecordsCount", RecordsCount));


                    if ((FilterByUserId) && (UserIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByUserId", FilterByUserId));

                        DataTable userTable;
                        using (userTable = new DataTable())
                        {
                            userTable.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                userTable.Rows.Add(x);
                        }
                        var userList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        userList.Value = userTable;
                        cmd.Parameters.Add(userList);
                    }

                    if ((FilterByCustomName) && (!String.IsNullOrWhiteSpace(CustomName)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCustomName", FilterByCustomName));
                        cmd.Parameters.Add(new SqlParameter("CustomName", CustomName));
                    }

                    if ((FilterByFieldName) && (!String.IsNullOrWhiteSpace(FieldName)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByFieldName", FilterByFieldName));
                        cmd.Parameters.Add(new SqlParameter("FieldName", FieldName));
                    }

                    if ((FilterByValue) && (!String.IsNullOrWhiteSpace(Value)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByValue", FilterByValue));
                        cmd.Parameters.Add(new SqlParameter("Value", Value));
                    }

                    if ((FilterByType) && (!String.IsNullOrWhiteSpace(Type)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByType", FilterByType));
                        cmd.Parameters.Add(new SqlParameter("Type", Type));
                    }

                    if ((FilterDates) && (!String.IsNullOrWhiteSpace(FromDate)) && (!String.IsNullOrWhiteSpace(ToDate)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterDates", FilterDates));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<AuditLogClass> auditList = new List<AuditLogClass>();
                        AuditLogClass item;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            item = new AuditLogClass().PopulateAuditLog(fieldNames, reader);

                            item.Order = order + (RecordsCount * (PageId - 1));
                            auditList.Add(item);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = auditList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchAuditLog_Multi", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Auditing")]
        public ResultClass<List<CustomTableNameClass>> GetTablesCustomName(int LoggedUser)
        {
            ResultClass<List<CustomTableNameClass>> result = new ResultClass<List<CustomTableNameClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTablesCustomeName";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CustomTableNameClass> resultList = new List<CustomTableNameClass>();
                        CustomTableNameClass customTableName;

                        string item = string.Empty;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            customTableName = new CustomTableNameClass().PopulateCustomTableName(fieldNames, reader);
                            customTableName.Order = order;

                            resultList.Add(customTableName);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = resultList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetTablesCustomName", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Auditing")]
        public ResultClass<List<CustomColumnNameClass>> GetColumnsCustomName(int LoggedUser, int TableId)
        {
            ResultClass<List<CustomColumnNameClass>> result = new ResultClass<List<CustomColumnNameClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetColumnsCustomName";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("TableId", TableId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CustomColumnNameClass> resultList = new List<CustomColumnNameClass>();
                        CustomColumnNameClass customColumnName;
                        string item = string.Empty;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            customColumnName = new CustomColumnNameClass().PopulateCustomColumnName(fieldNames, reader);
                            customColumnName.Order = order;

                            resultList.Add(customColumnName);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = resultList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetColumnsCustomeName", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }





        [SwaggerWcfTag("_Deprecated")]
        public Stream ExportToExcel()
        {
            int LoggedUser = 7;
            ResultClass<MemoryStream> result = new ResultClass<MemoryStream>();
            try
            {
                return ExportToExcelClass.Export();
                /*result.Result = ExportToExcelClass.Export();
                 result.Code = Errors.Success;
                result.Message = "";
                return result;*/
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "ExportToExcel", e.Source, "");
                }
                //result.Result = null;
                return null;
            }
        }

        //EXCEL
        [SwaggerWcfTag("ExcelReports")]
        public ResultClass<List<ExcelReportClass>> GetUserExcelReports(int LoggedUser)
        {
            ResultClass<List<ExcelReportClass>> result = new ResultClass<List<ExcelReportClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserExcelReports";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ExcelReportClass> excelReportList = new List<ExcelReportClass>();
                        ExcelReportClass excelReport;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            excelReport = new ExcelReportClass().PopulateExcelReportClass(fieldNames, reader);

                            excelReport.Order = order;

                            excelReportList.Add(excelReport);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = excelReportList;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetUserExcelReports", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ExcelReportClass> CreateUserExcelReports(int LoggedUser, string ReportName, string ReportURL)
        {
            ResultClass<ExcelReportClass> result = new ResultClass<ExcelReportClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserExcelReports";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("ReportName", ReportName));
                    cmd.Parameters.Add(new SqlParameter("ReportURL", ReportURL));

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        ExcelReportClass excelReport;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            excelReport = new ExcelReportClass().PopulateExcelReportClass(fieldNames, reader);

                            excelReport.ProcessExcelReportNotification();

                            excelReport.Order = order;

                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = excelReport;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUserExcelReports", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ExcelReportClass> DeleteUserExcelReports(int LoggedUser, int Id)
        {
            ResultClass<ExcelReportClass> result = new ResultClass<ExcelReportClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserExcelReports";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        ExcelReportClass excelReport;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            excelReport = new ExcelReportClass().PopulateExcelReportClass(fieldNames, reader);

                            excelReport.Order = order;

                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = excelReport;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserExcelReports", e.Source,
                       "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("ExcelReports")]
        public ResultClass<List<ExcelReportClass>> SearchUserExcelReports(int LoggedUser,
           bool FilterByDate, string FromDate, string ToDate,
           bool FilterByReportName, List<string> ReportsName)
        {
            ResultClass<List<ExcelReportClass>> result = new ResultClass<List<ExcelReportClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchUserExcelReports";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    if ((FilterByDate) && (!String.IsNullOrWhiteSpace(FromDate.Trim())) &&
                        (!String.IsNullOrWhiteSpace(ToDate.Trim())))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByDate", FilterByDate));
                        cmd.Parameters.Add(new SqlParameter("FromDate", FromDate));
                        cmd.Parameters.Add(new SqlParameter("ToDate", ToDate));
                    }

                    cmd.Parameters.Add(new SqlParameter("FilterByReportName", FilterByReportName));

                    if (FilterByReportName)
                    {
                        //ReportsName
                        DataTable reportsNametbl;
                        using (reportsNametbl = new DataTable())
                        {
                            reportsNametbl.Columns.Add("Id", typeof(string));
                            foreach (string x in ReportsName)
                                reportsNametbl.Rows.Add(x);
                        }
                        var imagesList = new SqlParameter("@ReportsName", SqlDbType.Structured);
                        imagesList.Value = reportsNametbl;
                        cmd.Parameters.Add(imagesList);
                    }

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ExcelReportClass> excelReportList = new List<ExcelReportClass>();
                        ExcelReportClass excelReport;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            excelReport = new ExcelReportClass().PopulateExcelReportClass(fieldNames, reader);

                            excelReport.Order = order;

                            excelReportList.Add(excelReport);
                        }

                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = excelReportList;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SearchUserExcelReports", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("ExcelReports")]
        public ResultClass<List<ExcelReportClass>> DeleteUserExcelReports_Multi(int LoggedUser, List<int> Ids)
        {
            ResultClass<List<ExcelReportClass>> result = new ResultClass<List<ExcelReportClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserExcelReports_Multi";
                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    DataTable itemTable;
                    using (itemTable = new DataTable())
                    {
                        itemTable.Columns.Add("Id", typeof(string));
                        foreach (int x in Ids)
                            itemTable.Rows.Add(x);
                    }
                    var itemList = new SqlParameter("@Ids", SqlDbType.Structured);
                    itemList.Value = itemTable;
                    cmd.Parameters.Add(itemList);

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ExcelReportClass> excelReportList = new List<ExcelReportClass>();
                        ExcelReportClass excelReport;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            excelReport = new ExcelReportClass().PopulateExcelReportClass(fieldNames, reader);

                            excelReport.Order = order;

                            excelReportList.Add(excelReport);
                        }

                        //Delete Physical file on server
                        try
                        {
                            string Path = "C:\\SQLBackup\\Dropbox\\ArtificialFlowersWebService\\Images\\Items\\";
                            int UrlLength = (Config.StaticURL + "/Images/Items/").Length;

                            foreach (var item in excelReportList)
                            {
                                string fileName = item.ReportURL.Substring(UrlLength);

                                if (File.Exists(Path + fileName))
                                    File.Delete(Path + fileName);
                            }
                        }
                        catch (Exception) { }


                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = excelReportList;
                        return result;
                    }
                    else
                    {
                        result.Message = "";
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = e.Message;
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserExcelReports_Multi", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        //For Public
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemClass>> GetItemsForPublic(int CategoryId, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsForPublic";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };


                    if (CategoryId > 0)
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<ItemClass_Short>> GetItems_ShortForPublic(int CategoryId, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass_Short>> result = new ResultClass<List<ItemClass_Short>>();

            var apiResult = GetItemsForPublic(CategoryId, PageId, RecordsCount);

            result.Code = apiResult.Code;
            result.Message = apiResult.Message;
            if (apiResult.Result != null)
                result.Result = new ItemClass_Short().PopulateItems(apiResult.Result);
            else
                result.Result = null;
            return result;
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<ItemsWithMapClass> GetItemsWithMapForPublic(int? CategoryId, string CountryName, int PageId, int RecordsCount, bool OrderByKey, string OrderKey)
        {
            ResultClass<ItemsWithMapClass> result = new ResultClass<ItemsWithMapClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsForPublic";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    if ((OrderByKey) || (!string.IsNullOrWhiteSpace(OrderKey)))
                    {
                        Params.Add(new SqlParameter("OrderByKey", OrderByKey));
                        Params.Add(new SqlParameter("OrderKey", OrderKey));
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        ItemsWithMapClass itemsWithMapClass = new ItemsWithMapClass();
                        itemsWithMapClass.Items = new List<ItemClass>();
                        result.Result = new ItemsWithMapClass();

                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass item;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;
                            item = new ItemClass().PopulateItemClass(fieldNames, reader);
                            item.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(item);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result.Items = Items;

                        CategoriesWithMapClass categoriesWithMap = new CategoriesWithMapClass();
                        itemsWithMapClass.CategoriesMap = new CategoriesWithMapClass();

                        int totalCont = 0;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                reader.Read();
                                if (fieldNames.Contains("TotalCount"))
                                    if (!Convert.IsDBNull(reader["TotalCount"]))
                                        totalCont = Convert.ToInt32(reader["TotalCount"]);
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                List<CategoryClass> Categories = new List<CategoryClass>();
                                CategoryClass category;
                                order = 0;
                                while (reader.Read())
                                {
                                    order += 1;
                                    category = new CategoryClass().PopulateCategory(fieldNames, reader);
                                    category.Order = order + (RecordsCount * (PageId - 1));
                                    Categories.Add(category);
                                }
                                categoriesWithMap.Categories = Categories;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<CategoryMapClass> categoriesMap = new List<CategoryMapClass>();
                                CategoryMapClass map;
                                while (reader.Read())
                                {
                                    map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);

                                    categoriesMap.Add(map);
                                }
                                categoriesWithMap.CategoriesMap = categoriesMap;
                            }
                        }

                        result.Result.CategoriesMap = categoriesWithMap;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemsForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<ItemsDataClass> GetItemDataForPublic(int CountryId, int ItemId)
        {
            ResultClass<ItemsDataClass> result = new ResultClass<ItemsDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDataForPublic";

                    if (ItemId > 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("ItemId", ItemId));
                    }

                        cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemsDataClass itemsDataClass = new ItemsDataClass();

                        while (reader.Read())
                        {
                            itemsDataClass.ItemClass = new ItemClass().PopulateItemClass(fieldNames, reader);
                        }

                        //Companies
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCompanyClass> Companies = new List<ItemsCompanyClass>();
                                ItemsCompanyClass itemsCompany;

                                while (reader.Read())
                                {
                                    itemsCompany = new ItemsCompanyClass().PopulateItemsCompany(fieldNames, reader);

                                    Companies.Add(itemsCompany);
                                }
                                itemsDataClass.Companies = Companies;
                            }
                        }

                        //Governorates
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsGovernorateClass> Governorates = new List<ItemsGovernorateClass>();
                                ItemsGovernorateClass itemsGovernorate;

                                while (reader.Read())
                                {
                                    itemsGovernorate = new ItemsGovernorateClass().PopulateItemsGovernorate(fieldNames, reader);

                                    Governorates.Add(itemsGovernorate);
                                }
                                itemsDataClass.Governorates = Governorates;
                            }
                        }

                        //Users Types
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsUsersTypeClass> UsersTypes = new List<ItemsUsersTypeClass>();
                                ItemsUsersTypeClass itemsUserType;

                                while (reader.Read())
                                {
                                    itemsUserType = new ItemsUsersTypeClass().PopulateItemsUsersType(fieldNames, reader);

                                    UsersTypes.Add(itemsUserType);
                                }
                                itemsDataClass.UsersTypes = UsersTypes;
                            }
                        }

                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemImageClass> Images = new List<ItemImageClass>();
                                ItemImageClass itemsImage;

                                while (reader.Read())
                                {
                                    itemsImage = new ItemImageClass().PopulateItemImage(fieldNames, reader);

                                    Images.Add(itemsImage);
                                }
                                itemsDataClass.Images = Images;
                            }
                        }

                        //Colors
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemColorClass> Colors = new List<ItemColorClass>();
                                ItemColorClass itemsColor;

                                while (reader.Read())
                                {
                                    itemsColor = new ItemColorClass().PopulateItemColor(fieldNames, reader);

                                    Colors.Add(itemsColor);
                                }
                                itemsDataClass.Colors = Colors;
                            }
                        }

                        //Sizes
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemSizeClass> Sizes = new List<ItemSizeClass>();
                                ItemSizeClass itemsSize;

                                while (reader.Read())
                                {
                                    itemsSize = new ItemSizeClass().PopulateItemSize(fieldNames, reader);

                                    Sizes.Add(itemsSize);
                                }
                                itemsDataClass.Sizes = Sizes;
                            }
                        }

                        //Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> PricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemPrice;

                                while (reader.Read())
                                {
                                    itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    PricesList.Add(itemPrice);
                                }
                                itemsDataClass.Prices = PricesList;
                            }
                        }

                        //Config Prices
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemPriceClass> ConfigPricesList = new List<ItemPriceClass>();
                                ItemPriceClass itemConfigPrice;

                                while (reader.Read())
                                {
                                    itemConfigPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                                    ConfigPricesList.Add(itemConfigPrice);
                                }
                                itemsDataClass.ConfigPrices = ConfigPricesList;
                            }
                        }

                        //Countries
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemsCountryClass> CountriesList = new List<ItemsCountryClass>();
                                ItemsCountryClass itemCountry;

                                while (reader.Read())
                                {
                                    itemCountry = new ItemsCountryClass().PopulateItemsCountry(fieldNames, reader);

                                    CountriesList.Add(itemCountry);
                                }
                                itemsDataClass.Countries = CountriesList;
                            }
                        }

                        //new added
                        CategoriesWithMapClass categoriesWithMap = new CategoriesWithMapClass();
                        itemsDataClass.CategoriesMap = new CategoriesWithMapClass();

                        int totalCont = 0;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                reader.Read();
                                if (fieldNames.Contains("TotalCount"))
                                    if (!Convert.IsDBNull(reader["TotalCount"]))
                                        totalCont = Convert.ToInt32(reader["TotalCount"]);
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                List<CategoryClass> Categories = new List<CategoryClass>();
                                CategoryClass category;
                                int order = 0;
                                while (reader.Read())
                                {
                                    order += 1;
                                    category = new CategoryClass().PopulateCategory(fieldNames, reader);
                                    category.Order = order;
                                    Categories.Add(category);
                                }
                                categoriesWithMap.Categories = Categories;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<CategoryMapClass> categoriesMap = new List<CategoryMapClass>();
                                CategoryMapClass map;
                                while (reader.Read())
                                {
                                    map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);

                                    categoriesMap.Add(map);
                                }
                                categoriesWithMap.CategoriesMap = categoriesMap;
                            }
                        }


                        itemsDataClass.CategoriesMap = categoriesWithMap;
                        itemsDataClass.HasSeries = false;


                        if (reader.NextResult())
                        {
                            //MatchedItems
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                List<ItemClass> matchedItemsList = new List<ItemClass>();
                                ItemClass matchedItem;

                                int Order = 0;
                                while (reader.Read())
                                {
                                    matchedItem = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    Order++;
                                    matchedItem.Order = Order;
                                    matchedItemsList.Add(matchedItem);
                                }
                                itemsDataClass.MatchedItems = matchedItemsList;

                            }
                        }

                        result.Result = itemsDataClass;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDataForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<ItemClass>> GetFeatureItemsForPublic(int? CategoryId, string CountryName, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsForPublic";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderByTotalLike", true),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<ItemClass>> GetBestSellingItemsForPublic(int? CategoryId, int CountryId, int PageId, int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemsBestSellingForPublic";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CountryId", CountryId),
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBestSellingItemsForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<ItemClass>> GetPeopleAlsoLikeItemsForPublic(int CountryId, int ItemId)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetPeople_Also_like_ItemsForPublic";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("CountryId", CountryId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order;
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "Admin_GetPeople_Also_like_ItemsForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemClass>> SearchItemsForPublic(bool FilterByCategoryId, int CategoryId,
          bool FilterByBrandId, int BrandId, bool FilterByColorId, int ColorId, int CountryId,
          string Size, bool ShowOnlyItemsWithOffers, string Name, string Code, string Description, int PageId,
          int RecordsCount)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchItemsForPublic";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("Name", Name),
                  new SqlParameter("Description", Description),
                  new SqlParameter("Size", Size),
                  new SqlParameter("Code", Code),
                  new SqlParameter("ShowOnlyItemsWithOffers", ShowOnlyItemsWithOffers),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    if ((FilterByCategoryId) && (CategoryId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCategoryId", FilterByCategoryId));
                        cmd.Parameters.Add(new SqlParameter("CategoryId", CategoryId));
                    }

                    if ((FilterByColorId) && (ColorId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByColorId", FilterByColorId));
                        cmd.Parameters.Add(new SqlParameter("ColorId", ColorId));
                    }

                    if ((FilterByBrandId) && (BrandId > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByBrandId", FilterByBrandId));
                        cmd.Parameters.Add(new SqlParameter("BrandId", BrandId));
                    }

                    cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);

                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItemsForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<ItemClass>> SearchItems_MultiForPublic(int CountryId, ItemSearchClass itemSearch, int PageId,
        int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId)
        {
            ResultClass<List<ItemClass>> result = new ResultClass<List<ItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SearchItems_MultiForPublic";
                    cmd.CommandTimeout = 1500000;
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CountryId", CountryId),
                  new SqlParameter("ArabicName", itemSearch.ArabicName),
                  new SqlParameter("EnglishName", itemSearch.EnglishName),
                  new SqlParameter("Code", itemSearch.Code),
                  new SqlParameter("ArabicDescription", itemSearch.ArabicDescription),
                  new SqlParameter("EnglishDescription", itemSearch.EnglishDescription),
                  new SqlParameter("Notes", itemSearch.Notes),

                  new SqlParameter("FilterByOffers", itemSearch.FilterByOffers),
                  new SqlParameter("ShowOnlyItemsWithOffers", itemSearch.ShowOnlyItemsWithOffers),
                  new SqlParameter("ShowOnlyItemsWithSpecialOffers", itemSearch.ShowOnlyItemsWithSpecialOffers),

                  new SqlParameter("ForReports", itemSearch.ForReports),

                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount)


               };


                    if (!string.IsNullOrWhiteSpace(itemSearch.Text))
                        cmd.Parameters.Add(new SqlParameter("Text", itemSearch.Text));

                    if ((itemSearch.FilterByPrice) && ((itemSearch.MinPrice > 0) || (itemSearch.MaxPrice > 0)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByPrice", itemSearch.FilterByPrice));
                        cmd.Parameters.Add(new SqlParameter("MinPrice", itemSearch.MinPrice));
                        cmd.Parameters.Add(new SqlParameter("MaxPrice", itemSearch.MaxPrice));
                    }

                    if ((itemSearch.FilterByRequiredPoints) &&
                        ((itemSearch.MinRequiredPoints > 0) || (itemSearch.MaxRequiredPoints > 0)))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByRequiredPoints", itemSearch.FilterByRequiredPoints));
                        cmd.Parameters.Add(new SqlParameter("MinRequiredPoints", itemSearch.MinRequiredPoints));
                        cmd.Parameters.Add(new SqlParameter("MaxRequiredPoints", itemSearch.MaxRequiredPoints));
                    }

                    if ((itemSearch.FilterByCategoryId) && (itemSearch.CategoryIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByCategoryId", itemSearch.FilterByCategoryId));
                        //CategoryIds
                        DataTable categoryTable;
                        using (categoryTable = new DataTable())
                        {
                            categoryTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.CategoryIds)
                                categoryTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@CategoryIds", SqlDbType.Structured);
                        pList.Value = categoryTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByColorId) && (itemSearch.ColorIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByColorId", itemSearch.FilterByColorId));
                        //ColorIds
                        DataTable colorTable;
                        using (colorTable = new DataTable())
                        {
                            colorTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ColorIds)
                                colorTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ColorIds", SqlDbType.Structured);
                        pList.Value = colorTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterBySizeId) && (itemSearch.SizeIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterBySizeId", itemSearch.FilterBySizeId));
                        //SizeIds
                        DataTable sizeTable;
                        using (sizeTable = new DataTable())
                        {
                            sizeTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.SizeIds)
                                sizeTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@SizeIds", SqlDbType.Structured);
                        pList.Value = sizeTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByBrandId) && (itemSearch.BrandIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByBrandId", itemSearch.FilterByBrandId));
                        //BrandIds
                        DataTable brandTable;
                        using (brandTable = new DataTable())
                        {
                            brandTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.BrandIds)
                                brandTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@BrandIds", SqlDbType.Structured);
                        pList.Value = brandTable;
                        Params.Add(pList);
                    }


                    if ((itemSearch.FilterByItemTypeId) && (itemSearch.ItemTypeIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemTypeId", itemSearch.FilterByItemTypeId));
                        //ItemTypes
                        DataTable itemTypeIdsTable;
                        using (itemTypeIdsTable = new DataTable())
                        {
                            itemTypeIdsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ItemTypeIds)
                                itemTypeIdsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemTypeIds", SqlDbType.Structured);
                        pList.Value = itemTypeIdsTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByItemDepartmentId) && (itemSearch.ItemDepartmentIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemDepartmentId", itemSearch.FilterByItemDepartmentId));
                        //ItemDepartment
                        DataTable itemDepartmentIdsTable;
                        using (itemDepartmentIdsTable = new DataTable())
                        {
                            itemDepartmentIdsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ItemDepartmentIds)
                                itemDepartmentIdsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemDepartmentIds", SqlDbType.Structured);
                        pList.Value = itemDepartmentIdsTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByTags) && (itemSearch.TagsIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByTags", itemSearch.FilterByTags));
                        //Tag
                        DataTable TagsIdsTable;
                        using (TagsIdsTable = new DataTable())
                        {
                            TagsIdsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.TagsIds)
                                TagsIdsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@TagsIds", SqlDbType.Structured);
                        pList.Value = TagsIdsTable;
                        Params.Add(pList);
                    }

                    if ((itemSearch.FilterByItemIds) && (itemSearch.ItemIds.Count > 0))
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByItemIds", itemSearch.FilterByItemIds));
                        //BrandIds
                        DataTable itemsTable;
                        using (itemsTable = new DataTable())
                        {
                            itemsTable.Columns.Add("Id", typeof(string));
                            foreach (int x in itemSearch.ItemIds)
                                itemsTable.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@ItemIds", SqlDbType.Structured);
                        pList.Value = itemsTable;
                        Params.Add(pList);
                    }



                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemClass> Items = new List<ItemClass>();
                        ItemClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new ItemClass().PopulateItemClass(fieldNames, reader);
                            List<ItemImageClass> images;
                            images = GetItemImages(id.Id).Result;
                            id.ItemImages = images;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Items.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Items;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "SearchItems_MultiForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<ItemClass_Short>> SearchItems_Multi_ShortForPublic(int CountryId, ItemSearchClass itemSearch, int PageId,
          int RecordsCount, int? PriceCountryId, int? PriceCurrencyId, int? PriceTypeId)
        {
            ResultClass<List<ItemClass_Short>> result = new ResultClass<List<ItemClass_Short>>();

            var apiResult = SearchItems_MultiForPublic(CountryId, itemSearch, PageId, RecordsCount, PriceCountryId, PriceCurrencyId, PriceTypeId);

            result.Result = new ItemClass_Short().PopulateItems(apiResult.Result);
            result.Code = apiResult.Code;
            result.Message = apiResult.Message;

            return result;
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<ItemFiltersClass> GetItemFiltersForPublic(int CountryId, int CategoryId, List<int> itemsIds)
        {
            ResultClass<ItemFiltersClass> result = new ResultClass<ItemFiltersClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandTimeout = 1500000;
                    cmd.CommandText = "Admin_GetItemFiltersForPublic";

                    cmd.Parameters.Add(new SqlParameter("CountryId", CountryId));

                    if (CategoryId > 0)
                        cmd.Parameters.Add(new SqlParameter("CategoryId", CategoryId));

                    if (itemsIds != null)
                    {
                        if (itemsIds.Count > 0)
                        {
                            DataTable itemsIdsTable;
                            using (itemsIdsTable = new DataTable())
                            {
                                itemsIdsTable.Columns.Add("Id", typeof(string));
                                foreach (int x in itemsIds)
                                    itemsIdsTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@ItemsIds", SqlDbType.Structured);
                            pList.Value = itemsIdsTable;
                            cmd.Parameters.Add(pList);
                        }
                    }

                    SqlDataReader reader = cmd.ExecuteReader();

                    ItemFiltersClass ItemFilters = new ItemFiltersClass();
                    //Brands
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<BrandClass> Brands = new List<BrandClass>();
                        BrandClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new BrandClass().PopulateBrand(fieldNames, reader);

                            id.Order = order;
                            Brands.Add(id);

                        }

                        ItemFilters.Brands = new List<BrandClass>();
                        ItemFilters.Brands = Brands;

                    }

                    //Countires
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<CountryClass> Countries = new List<CountryClass>();
                            CountryClass id;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                id = new CountryClass().PopulateCountry(fieldNames, reader);

                                id.Order = order;
                                Countries.Add(id);

                            }
                            ItemFilters.Countries = new List<CountryClass>();
                            ItemFilters.Countries = Countries;
                        }
                    }

                    //Colors
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<ColorClass> Colors = new List<ColorClass>();
                            ColorClass id;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                id = new ColorClass().PopulateColor(fieldNames, reader);

                                id.Order = order;
                                Colors.Add(id);

                            }
                            ItemFilters.Colors = new List<ColorClass>();
                            ItemFilters.Colors = Colors;
                        }
                    }

                    ////Categories
                    //if (reader.NextResult())
                    //{
                    //   if (reader.HasRows)
                    //   {
                    //      reader.Read();
                    //      var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                    //      int totalCont = 0;
                    //      if (fieldNames.Contains("TotalCount"))
                    //         if (!Convert.IsDBNull(reader["TotalCount"]))
                    //            totalCont = Convert.ToInt32(reader["TotalCount"]);
                    //   }
                    //}
                    //if (reader.NextResult())
                    //{
                    //   if (reader.HasRows)
                    //   {
                    //      var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                    //      List<CategoryClass> Categories = new List<CategoryClass>();
                    //      CategoryClass id;
                    //      int order = 0;
                    //      while (reader.Read())
                    //      {
                    //         order += 1;

                    //         id = new CategoryClass().PopulateCategory(fieldNames, reader);

                    //         id.Order = order;
                    //         Categories.Add(id);

                    //      }
                    //      ItemFilters.Categories = new List<CategoryClass>();
                    //      ItemFilters.Categories = Categories;
                    //   }
                    //}



                    //if (reader.NextResult())
                    //{
                    //   if (reader.HasRows)
                    //   {
                    //      var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                    //      List<CategoryMapClass> CategoriesMap = new List<CategoryMapClass>();
                    //      CategoryMapClass map;
                    //      while (reader.Read())
                    //      {
                    //         map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);


                    //         CategoriesMap.Add(map);

                    //      }
                    //      ItemFilters.CategoriesMap = new List<CategoryMapClass>();
                    //      ItemFilters.CategoriesMap = CategoriesMap;
                    //   }
                    //}

                    //Sizes
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<SizeClass> Sizes = new List<SizeClass>();
                            SizeClass id;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                id = new SizeClass().PopulateSize(fieldNames, reader);

                                id.Order = order;
                                Sizes.Add(id);

                            }
                            ItemFilters.Sizes = new List<SizeClass>();
                            ItemFilters.Sizes = Sizes;
                        }
                    }

                    //Min-Max Price
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            Tuple<Int64, Int64> MinMaxPrice = new Tuple<Int64, Int64>(0, 0);
                            Int64 MaxPrice = 0;
                            Int64 MinPrice = 0;
                            while (reader.Read())
                            {
                                if (fieldNames.Contains("MinPrice"))
                                    if (!Convert.IsDBNull(reader["MinPrice"]))
                                        MinPrice = Convert.ToInt64(reader["MinPrice"]);

                                if (fieldNames.Contains("MaxPrice"))
                                    if (!Convert.IsDBNull(reader["MaxPrice"]))
                                        MaxPrice = Convert.ToInt64(reader["MaxPrice"]);

                                MinMaxPrice = Tuple.Create(MinPrice, MaxPrice);

                            }
                            ItemFilters.MinMaxPrice = new Tuple<Int64, Int64>(0, 0);
                            ItemFilters.MinMaxPrice = MinMaxPrice;
                        }
                    }

                    //Min-Max RequiredPoints
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            Tuple<Int64, Int64> MinMaxRequiredPoints = new Tuple<Int64, Int64>(0, 0);
                            Int64 MinRequiredPoints = 0;
                            Int64 MaxRequiredPoints = 0;

                            while (reader.Read())
                            {
                                if (fieldNames.Contains("MinRequiredPoints"))
                                    if (!Convert.IsDBNull(reader["MinRequiredPoints"]))
                                        MinRequiredPoints = Convert.ToInt64(reader["MinRequiredPoints"]);

                                if (fieldNames.Contains("MaxRequiredPoints"))
                                    if (!Convert.IsDBNull(reader["MaxRequiredPoints"]))
                                        MaxRequiredPoints = Convert.ToInt64(reader["MaxRequiredPoints"]);

                                MinMaxRequiredPoints = Tuple.Create(MinRequiredPoints, MaxRequiredPoints);

                            }
                            ItemFilters.MinMaxRequiredPoints = new Tuple<Int64, Int64>(0, 0);
                            ItemFilters.MinMaxRequiredPoints = MinMaxRequiredPoints;
                        }
                    }

                    //CurrencyCodes
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            string CurrencyEnglishCode = "";
                            string CurrencyArabicCode = "";

                            reader.Read();
                            if (fieldNames.Contains("CurrencyEnglishCode"))
                                if (!Convert.IsDBNull(reader["CurrencyEnglishCode"]))
                                    CurrencyEnglishCode = reader["CurrencyEnglishCode"].ToString();

                            if (fieldNames.Contains("CurrencyArabicCode"))
                                if (!Convert.IsDBNull(reader["CurrencyArabicCode"]))
                                    CurrencyArabicCode = reader["CurrencyArabicCode"].ToString();

                            ItemFilters.CurrencyArabicCode = CurrencyArabicCode;
                            ItemFilters.CurrencyEnglishCode = CurrencyEnglishCode;
                        }
                    }
                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<ItemTypeClass> itemTypesList = new List<ItemTypeClass>();
                            ItemTypeClass itemType;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                itemType = new ItemTypeClass().PopulateItemType(fieldNames, reader);

                                itemType.Order = order;
                                itemTypesList.Add(itemType);

                            }
                            ItemFilters.ItemTypes = new List<ItemTypeClass>();
                            ItemFilters.ItemTypes = itemTypesList;
                        }
                    }

                    if (reader.NextResult())
                    {
                        if (reader.HasRows)
                        {
                            var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<ItemDepartmentClass> itemDepartmentList = new List<ItemDepartmentClass>();
                            ItemDepartmentClass itemdepartment;
                            int order = 0;
                            while (reader.Read())
                            {
                                order += 1;

                                itemdepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                                itemdepartment.Order = order;
                                itemDepartmentList.Add(itemdepartment);

                            }
                            ItemFilters.ItemDepartments = new List<ItemDepartmentClass>();
                            ItemFilters.ItemDepartments = itemDepartmentList;
                        }
                    }
                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = ItemFilters;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemFiltersForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }

        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<CategoriesWithMapClass> GetCategoriesWithMapForPublic(string CountryName, bool FilterByParentId,
        int ParentId, int Type, int PageId, int RecordsCount)
        {
            ResultClass<CategoriesWithMapClass> result = new ResultClass<CategoriesWithMapClass>();
            result.Result = new CategoriesWithMapClass();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategoriesForPublic";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    cmd.Parameters.AddRange(Params.ToArray());
                    if (FilterByParentId == true)
                    {
                        cmd.Parameters.Add(new SqlParameter("FilterByParentId", FilterByParentId));
                        cmd.Parameters.Add(new SqlParameter("ParentId", ParentId));
                    }

                    if (Type > 0)
                        cmd.Parameters.Add(new SqlParameter("Type", Type));


                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }

                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.TotalCount = totalCont;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Categories.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result.Categories = Categories;

                        if ((reader.NextResult()) && (reader.HasRows))
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                            List<CategoryMapClass> CategoriesMap = new List<CategoryMapClass>();
                            CategoryMapClass map;
                            while (reader.Read())
                            {
                                map = new CategoryMapClass().PopulateCategoryMap(fieldNames, reader);


                                CategoriesMap.Add(map);

                            }
                            result.Result.CategoriesMap = CategoriesMap;
                        }
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategoriesWithMapForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<List<CategoryClass>> GetFeatureCategories(int? CategoryId, string CountryName, int PageId, int RecordsCount)
        {
            ResultClass<List<CategoryClass>> result = new ResultClass<List<CategoryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetFeaturedCatgeory";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    if ((CategoryId != null) || (CategoryId > 0))
                        Params.Add(new SqlParameter("CategoryId", CategoryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> categoryList = new List<CategoryClass>();
                        CategoryClass category;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            category = new CategoryClass().PopulateCategory(fieldNames, reader);

                            category.Order = order;
                            categoryList.Add(category);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = categoryList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetFeaturedCatgeory", e.Source, "");
                }
                result.Result = null;
                return result;
            }


        }

        [SwaggerWcfTag("ForPublic")]
        public ResultClass<IEnumerable<CategoryTreeClass<CategoryClass>>> GetCategoriesTreeForPublic(string CountryName, int PageId, int RecordsCount, string Language = "ar")
        {
            ResultClass<IEnumerable<CategoryTreeClass<CategoryClass>>> result = new ResultClass<IEnumerable<CategoryTreeClass<CategoryClass>>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCategoriesForPublic";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("PageId", PageId),
                  new SqlParameter("RecordsCount", RecordsCount),
               };

                    if (!string.IsNullOrWhiteSpace(CountryName))
                        Params.Add(new SqlParameter("CountryName", CountryName));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    int totalCont = 0;
                    reader.Read();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        if (fieldNames.Contains("TotalCount"))
                            if (!Convert.IsDBNull(reader["TotalCount"]))
                                totalCont = Convert.ToInt32(reader["TotalCount"]);
                    }

                    if ((reader.NextResult()) && (reader.HasRows))
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CategoryClass> Categories = new List<CategoryClass>();
                        CategoryClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new CategoryClass().PopulateCategory(fieldNames, reader);

                            id.TotalCount = totalCont;
                            id.Order = order + (RecordsCount * (PageId - 1));
                            Categories.Add(id);
                        }

                        var root = GenericHelpers.GenerateTree(Categories, c => c.Id, c => c.ParentId, Language);

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = root;

                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCategoriesTreeForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        /*START NOT USED ANYMORE*/
        //OfferDetailsPrices
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<OfferDetailPriceClass>> GetOfferDetailPrices(int? Id)
        {
            ResultClass<List<OfferDetailPriceClass>> result = new ResultClass<List<OfferDetailPriceClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOfferDetailsPrices";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<OfferDetailPriceClass> List = new List<OfferDetailPriceClass>();
                        OfferDetailPriceClass offerDetailPrice;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            offerDetailPrice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);

                            offerDetailPrice.Order = order;

                            List.Add(offerDetailPrice);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = List;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOfferDetailPrices", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OfferDetailPriceClass> CreateOfferDetailPrice(int LoggedUser, OfferDetailPriceClass OfferDetailPrice)
        {
            ResultClass<OfferDetailPriceClass> result = new ResultClass<OfferDetailPriceClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOfferDetailsPrice";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemPriceId", OfferDetailPrice.CountryCurrencyId),
                  new SqlParameter("OfferDetailId", OfferDetailPrice.OfferDetailId),
                  new SqlParameter("Value", OfferDetailPrice.Price),
                  new SqlParameter("IsSpecialOffer", OfferDetailPrice.IsSpecialOffer),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferDetailPriceClass offerDetailPrice;
                        reader.Read();
                        offerDetailPrice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);

                        offerDetailPrice.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerDetailPrice;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateOfferDetailPrice", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OfferDetailPriceClass> UpdateOfferDetailPrice(int LoggedUser, OfferDetailPriceClass OfferDetailPrice)
        {
            ResultClass<OfferDetailPriceClass> result = new ResultClass<OfferDetailPriceClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdatePriceType";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", OfferDetailPrice.Id),
                  new SqlParameter("OfferDetailId", OfferDetailPrice.OfferDetailId),
                  new SqlParameter("ItemPriceId", OfferDetailPrice.CountryCurrencyId),
                  new SqlParameter("Value", OfferDetailPrice.Price),
                  new SqlParameter("IsSpecialOffer", OfferDetailPrice.IsSpecialOffer),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferDetailPriceClass offerDetailPrice;
                        reader.Read();
                        offerDetailPrice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);

                        offerDetailPrice.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerDetailPrice;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdatePriceType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<OfferDetailPriceClass> DeleteOfferDetailPrice(int LoggedUser, int Id)
        {
            ResultClass<OfferDetailPriceClass> result = new ResultClass<OfferDetailPriceClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteOfferDetailsPrice";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OfferDetailPriceClass offerDetailPrice;
                        reader.Read();
                        offerDetailPrice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);

                        offerDetailPrice.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = offerDetailPrice;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteOfferDetailPrice", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        /*END NOT USED ANYMORE*/


        /*START Not used Anymore*/
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<ItemPriceClass>> GetItemPrices(int ItemId, int CountryId, int? TypeId)
        {
            ResultClass<List<ItemPriceClass>> result = new ResultClass<List<ItemPriceClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemPrices";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("CountryId", CountryId),
                  new SqlParameter("TypeId", TypeId)
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemPriceClass> ItemPriceList = new List<ItemPriceClass>();
                        ItemPriceClass itemPrice;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                            itemPrice.Order = order;
                            ItemPriceList.Add(itemPrice);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemPriceList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemPrices", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemPriceClass> CreateItemPrice(int LoggedUser, ItemPriceClass ItemPrice)
        {
            ResultClass<ItemPriceClass> result = new ResultClass<ItemPriceClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemPrice";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemPrice.ItemId),
                  new SqlParameter("CountryId", ItemPrice.CountryId),
                  new SqlParameter("Price", ItemPrice.Price),
                  new SqlParameter("TypeId", ItemPrice.TypeId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemPriceClass itemPrice;
                        reader.Read();
                        itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                        itemPrice.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemPrice;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "InsertItemPrice", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemPriceClass> UpdateItemPrice(int LoggedUser, ItemPriceClass ItemPrice)
        {
            ResultClass<ItemPriceClass> result = new ResultClass<ItemPriceClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemPrice";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemPrice.Id),
                  new SqlParameter("ItemId", ItemPrice.ItemId),
                  new SqlParameter("CountryId", ItemPrice.CountryId),
                  new SqlParameter("Price", ItemPrice.Price),
                  new SqlParameter("TypeId", ItemPrice.TypeId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemPriceClass itemPrice;
                        reader.Read();
                        itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                        itemPrice.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemPrice;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemPrice", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<ItemPriceClass> DeleteItemPrice(int LoggedUser, int Id)
        {
            ResultClass<ItemPriceClass> result = new ResultClass<ItemPriceClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemPrice";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemPriceClass itemPrice;
                        reader.Read();
                        itemPrice = new ItemPriceClass().PopulateItemPrice(fieldNames, reader);

                        itemPrice.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemPrice;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemPrice", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        /*End Not used Anymore*/

        [SwaggerWcfTag("Books")]
        [SwaggerWcfResponse(HttpStatusCode.Created, "Book created, value in the response body with id updated")]
        [SwaggerWcfResponse(HttpStatusCode.BadRequest, "Bad request", true)]
        [SwaggerWcfResponse(HttpStatusCode.InternalServerError,
        "Internal error (can be forced using ERROR_500 as book title)", true)]
        public string CreateBook(string value)
        {
            return "hi";
        }





        //Start Nuqaty
        //UserCompany

        //UserCompany
        [SwaggerWcfTag("UserCompany")]
        public ResultClass<List<UserCompanyClass>> GetUserCompanies(int UserId)
        {
            ResultClass<List<UserCompanyClass>> result = new ResultClass<List<UserCompanyClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserCompanies";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("UserId", UserId),
                  };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserCompanyClass> UserCompanies = new List<UserCompanyClass>();
                        UserCompanyClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserCompanyClass().PopulateUserCompany(fieldNames, reader);

                            id.Order = order;
                            UserCompanies.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserCompanies;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserCompanies", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserCompany")]
        public ResultClass<UserCompanyClass> CreateUserCompany(int LoggedUser, UserCompanyClass UserCompany)
        {
            ResultClass<UserCompanyClass> result = new ResultClass<UserCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
               new SqlParameter("UserId",UserCompany.UserId),
               new SqlParameter("CompanyId",UserCompany.CompanyId),
                new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserCompanyClass usercompany;
                        reader.Read();
                        usercompany = new UserCompanyClass().PopulateUserCompany(fieldNames, reader);

                        usercompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usercompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUserCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserCompany")]
        public ResultClass<UserCompanyClass> UpdateUserCompany(int LoggedUser, UserCompanyClass UserCompany)
        {
            ResultClass<UserCompanyClass> result = new ResultClass<UserCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
               new SqlParameter("Id",UserCompany.Id),
               new SqlParameter("UserId",UserCompany.UserId),
               new SqlParameter("CompanyId",UserCompany.CompanyId),
               new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserCompanyClass usercompany;
                        reader.Read();
                        usercompany = new UserCompanyClass().PopulateUserCompany(fieldNames, reader);

                        usercompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usercompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserCompany")]
        public ResultClass<UserCompanyClass> DeleteUserCompany(int LoggedUser, int Id)
        {
            ResultClass<UserCompanyClass> result = new ResultClass<UserCompanyClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserCompany";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
               new SqlParameter("Id",Id),
               new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserCompanyClass usercompany;
                        reader.Read();
                        usercompany = new UserCompanyClass().PopulateUserCompany(fieldNames, reader);

                        usercompany.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usercompany;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserCompany", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        //User Type Transfer Rules - GETs
        [SwaggerWcfTag("UserTypeSendRule")]
        public ResultClass<List<UserTypeSendRuleClass>> GetUserTypeSendRules(int LoggedUser, int UserTypeId)
        {
            ResultClass<List<UserTypeSendRuleClass>> result = new ResultClass<List<UserTypeSendRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserTypeSendRules";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserTypeSendRuleClass> UserTypeSendRules = new List<UserTypeSendRuleClass>();
                        UserTypeSendRuleClass userTypeSendRule;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userTypeSendRule = new UserTypeSendRuleClass().PopulateUserTypeSendRule(fieldNames, reader);

                            userTypeSendRule.Order = order;
                            UserTypeSendRules.Add(userTypeSendRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeSendRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserTypeSendRules", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeWithdrawRule")]
        public ResultClass<List<UserTypeWithdrawRuleClass>> GetUserTypeWithdrawRules(int LoggedUser, int UserTypeId)
        {
            ResultClass<List<UserTypeWithdrawRuleClass>> result = new ResultClass<List<UserTypeWithdrawRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserTypeWithdrawRules";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserTypeWithdrawRuleClass> UserTypeWithdrawRules = new List<UserTypeWithdrawRuleClass>();
                        UserTypeWithdrawRuleClass userTypeWithdrawRule;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userTypeWithdrawRule = new UserTypeWithdrawRuleClass().PopulateUserTypeWithdrawRule(fieldNames, reader);

                            userTypeWithdrawRule.Order = order;
                            UserTypeWithdrawRules.Add(userTypeWithdrawRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeWithdrawRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserTypeWithdrawRules", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeGiftsRule")]
        public ResultClass<List<UserTypeGiftsRuleClass>> GetUserTypeGiftsRules(int LoggedUser, int UserTypeId)
        {
            ResultClass<List<UserTypeGiftsRuleClass>> result = new ResultClass<List<UserTypeGiftsRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserTypeGiftsRules";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserTypeGiftsRuleClass> UserTypeGiftsRules = new List<UserTypeGiftsRuleClass>();
                        UserTypeGiftsRuleClass userTypeGiftsRule;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userTypeGiftsRule = new UserTypeGiftsRuleClass().PopulateUserTypeGiftsRule(fieldNames, reader);

                            userTypeGiftsRule.Order = order;
                            UserTypeGiftsRules.Add(userTypeGiftsRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTypeGiftsRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserTypeGiftsRules", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Type Transfer - UPDATEs
        [SwaggerWcfTag("UserTypeSendRule")]
        public ResultClass<UserTypeSendRuleClass> UpdateUserTypeSendRule(int LoggedUser, int Id, int UserTypeId, int ToUserTypeId)
        {
            ResultClass<UserTypeSendRuleClass> result = new ResultClass<UserTypeSendRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserTypeSendRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("Id",Id),
                        new SqlParameter("UserTypeId",UserTypeId),
                        new SqlParameter("ToUserTypeId",ToUserTypeId),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeSendRuleClass usertypeSendRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeSendRule = new UserTypeSendRuleClass().PopulateUserTypeSendRule(fieldNames, reader);
                            usertypeSendRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeSendRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserTypeSendRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeGiftsRule")]
        public ResultClass<UserTypeGiftsRuleClass> UpdateUserTypeGiftsRule(int LoggedUser, int Id, int UserTypeId, int ToUserTypeId)
        {
            ResultClass<UserTypeGiftsRuleClass> result = new ResultClass<UserTypeGiftsRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserTypeGiftsRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("Id",Id),
                        new SqlParameter("UserTypeId",UserTypeId),
                        new SqlParameter("ToUserTypeId",ToUserTypeId),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeGiftsRuleClass usertypeGiftsRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeGiftsRule = new UserTypeGiftsRuleClass().PopulateUserTypeGiftsRule(fieldNames, reader);
                            usertypeGiftsRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeGiftsRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserTypeGiftsRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeWithdrawRule")]
        public ResultClass<UserTypeWithdrawRuleClass> UpdateUserTypeWithdrawRule(int LoggedUser, int Id, int UserTypeId, int FromUserTypeId)
        {
            ResultClass<UserTypeWithdrawRuleClass> result = new ResultClass<UserTypeWithdrawRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserTypeWithdrawRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("Id",Id),
                        new SqlParameter("UserTypeId",UserTypeId),
                        new SqlParameter("FromUserTypeId",FromUserTypeId),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeWithdrawRuleClass usertypeWithdrawRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeWithdrawRule = new UserTypeWithdrawRuleClass().PopulateUserTypeWithdrawRule(fieldNames, reader);
                            usertypeWithdrawRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeWithdrawRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserTypeWithdrawRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Type Transfer - INSERTs
        [SwaggerWcfTag("UserTypeSendRule")]
        public ResultClass<UserTypeSendRuleClass> CreateUserTypeSendRule(int LoggedUser, int UserTypeId, int ToUserTypeId)
        {
            ResultClass<UserTypeSendRuleClass> result = new ResultClass<UserTypeSendRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserTypeSendRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("UserTypeId",UserTypeId),
                        new SqlParameter("ToUserTypeId",ToUserTypeId),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeSendRuleClass usertypeSendRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeSendRule = new UserTypeSendRuleClass().PopulateUserTypeSendRule(fieldNames, reader);
                            usertypeSendRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeSendRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserTypeSendRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeGiftsRule")]
        public ResultClass<UserTypeGiftsRuleClass> CreateUserTypeGiftsRule(int LoggedUser, int UserTypeId, int ToUserTypeId)
        {
            ResultClass<UserTypeGiftsRuleClass> result = new ResultClass<UserTypeGiftsRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserTypeGiftsRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("UserTypeId",UserTypeId),
                        new SqlParameter("ToUserTypeId",ToUserTypeId),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeGiftsRuleClass usertypeGiftsRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeGiftsRule = new UserTypeGiftsRuleClass().PopulateUserTypeGiftsRule(fieldNames, reader);
                            usertypeGiftsRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeGiftsRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserTypeGiftsRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeWithdrawRule")]
        public ResultClass<UserTypeWithdrawRuleClass> CreateUserTypeWithdrawRule(int LoggedUser, int UserTypeId, int FromUserTypeId)
        {
            ResultClass<UserTypeWithdrawRuleClass> result = new ResultClass<UserTypeWithdrawRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserTypeWithdrawRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("UserTypeId",UserTypeId),
                        new SqlParameter("FromUserTypeId",FromUserTypeId),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeWithdrawRuleClass usertypeWithdrawRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeWithdrawRule = new UserTypeWithdrawRuleClass().PopulateUserTypeWithdrawRule(fieldNames, reader);
                            usertypeWithdrawRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeWithdrawRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserTypeWithdrawRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Type Transfer - DELETEs
        [SwaggerWcfTag("UserTypeSendRule")]
        public ResultClass<UserTypeSendRuleClass> DeleteUserTypeSendRule(int LoggedUser, int Id)
        {
            ResultClass<UserTypeSendRuleClass> result = new ResultClass<UserTypeSendRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserTypeSendRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("Id",Id),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeSendRuleClass usertypeSendRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeSendRule = new UserTypeSendRuleClass().PopulateUserTypeSendRule(fieldNames, reader);
                            usertypeSendRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeSendRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserTypeSendRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeGiftsRule")]
        public ResultClass<UserTypeGiftsRuleClass> DeleteUserTypeGiftsRule(int LoggedUser, int Id)
        {
            ResultClass<UserTypeGiftsRuleClass> result = new ResultClass<UserTypeGiftsRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserTypeGiftsRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("Id",Id),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeGiftsRuleClass usertypeGiftsRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeGiftsRule = new UserTypeGiftsRuleClass().PopulateUserTypeGiftsRule(fieldNames, reader);
                            usertypeGiftsRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeGiftsRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserTypeGiftsRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserTypeWithdrawRule")]
        public ResultClass<UserTypeWithdrawRuleClass> DeleteUserTypeWithdrawRule(int LoggedUser, int Id)
        {
            ResultClass<UserTypeWithdrawRuleClass> result = new ResultClass<UserTypeWithdrawRuleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserTypeWithdrawRule";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("Id",Id),
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTypeWithdrawRuleClass usertypeWithdrawRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;
                            usertypeWithdrawRule = new UserTypeWithdrawRuleClass().PopulateUserTypeWithdrawRule(fieldNames, reader);
                            usertypeWithdrawRule.Order = order;
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertypeWithdrawRule;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserTypeWithdrawRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Rules - GETs
        [SwaggerWcfTag("UserSendRule")]
        public ResultClass<List<UserSendRuleClass>> GetUserSendRules(int LoggedUser, int UserId)
        {
            ResultClass<List<UserSendRuleClass>> result = new ResultClass<List<UserSendRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserSendRules";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendRuleClass> UserSendRules = new List<UserSendRuleClass>();
                        UserSendRuleClass userSendRule;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userSendRule = new UserSendRuleClass().PopulateUserSendRule(fieldNames, reader);

                            userSendRule.Order = order;
                            UserSendRules.Add(userSendRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserSendRules", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawRule")]
        public ResultClass<List<UserWithdrawRuleClass>> GetUserWithdrawRules(int LoggedUser, int UserId)
        {
            ResultClass<List<UserWithdrawRuleClass>> result = new ResultClass<List<UserWithdrawRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserWithdrawRules";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawRuleClass> UserWithdrawRules = new List<UserWithdrawRuleClass>();
                        UserWithdrawRuleClass userWithdrawRule;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userWithdrawRule = new UserWithdrawRuleClass().PopulateUserWithdrawRule(fieldNames, reader);

                            userWithdrawRule.Order = order;
                            UserWithdrawRules.Add(userWithdrawRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserWithdrawRules", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsRule")]
        public ResultClass<List<UserGiftsRuleClass>> GetUserGiftsRules(int LoggedUser, int UserId)
        {
            ResultClass<List<UserGiftsRuleClass>> result = new ResultClass<List<UserGiftsRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserGiftsRules";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsRuleClass> UserGiftsRules = new List<UserGiftsRuleClass>();
                        UserGiftsRuleClass userGiftsRule;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userGiftsRule = new UserGiftsRuleClass().PopulateUserGiftsRule(fieldNames, reader);

                            userGiftsRule.Order = order;
                            UserGiftsRules.Add(userGiftsRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserGiftsRules", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Rules - UPDATEs
        [SwaggerWcfTag("UserSendRule")]
        public ResultClass<List<UserSendRuleClass>> UpdateUserSendRule(int LoggedUser, int Id, int UserId, int UserTypeId)
        {
            ResultClass<List<UserSendRuleClass>> result = new ResultClass<List<UserSendRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserSendRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendRuleClass> UserSendRules = new List<UserSendRuleClass>();
                        UserSendRuleClass userSendRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userSendRule = new UserSendRuleClass().PopulateUserSendRule(fieldNames, reader);

                            userSendRule.Order = order;
                            UserSendRules.Add(userSendRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserSendRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawRule")]
        public ResultClass<List<UserWithdrawRuleClass>> UpdateUserWithdrawRule(int LoggedUser, int Id, int UserId, int UserTypeId)
        {
            ResultClass<List<UserWithdrawRuleClass>> result = new ResultClass<List<UserWithdrawRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserWithdrawRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawRuleClass> UserWithdrawRules = new List<UserWithdrawRuleClass>();
                        UserWithdrawRuleClass userWithdrawRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userWithdrawRule = new UserWithdrawRuleClass().PopulateUserWithdrawRule(fieldNames, reader);

                            userWithdrawRule.Order = order;
                            UserWithdrawRules.Add(userWithdrawRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserWithdrawRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsRule")]
        public ResultClass<List<UserGiftsRuleClass>> UpdateUserGiftsRule(int LoggedUser, int Id, int UserId, int UserTypeId)
        {
            ResultClass<List<UserGiftsRuleClass>> result = new ResultClass<List<UserGiftsRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserGiftsRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsRuleClass> UserGiftsRules = new List<UserGiftsRuleClass>();
                        UserGiftsRuleClass userGiftsRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userGiftsRule = new UserGiftsRuleClass().PopulateUserGiftsRule(fieldNames, reader);

                            userGiftsRule.Order = order;
                            UserGiftsRules.Add(userGiftsRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserGiftsRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Rules - INSERTs
        [SwaggerWcfTag("UserSendRule")]
        public ResultClass<List<UserSendRuleClass>> CreateUserSendRule(int LoggedUser, int UserId, int UserTypeId)
        {
            ResultClass<List<UserSendRuleClass>> result = new ResultClass<List<UserSendRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserSendRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendRuleClass> UserSendRules = new List<UserSendRuleClass>();
                        UserSendRuleClass userSendRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userSendRule = new UserSendRuleClass().PopulateUserSendRule(fieldNames, reader);

                            userSendRule.Order = order;
                            UserSendRules.Add(userSendRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserSendRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawRule")]
        public ResultClass<List<UserWithdrawRuleClass>> CreateUserWithdrawRule(int LoggedUser, int UserId, int UserTypeId)
        {
            ResultClass<List<UserWithdrawRuleClass>> result = new ResultClass<List<UserWithdrawRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserWithdrawRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawRuleClass> UserWithdrawRules = new List<UserWithdrawRuleClass>();
                        UserWithdrawRuleClass userWithdrawRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userWithdrawRule = new UserWithdrawRuleClass().PopulateUserWithdrawRule(fieldNames, reader);

                            userWithdrawRule.Order = order;
                            UserWithdrawRules.Add(userWithdrawRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserWithdrawRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsRule")]
        public ResultClass<List<UserGiftsRuleClass>> CreateUserGiftsRule(int LoggedUser, int UserId, int UserTypeId)
        {
            ResultClass<List<UserGiftsRuleClass>> result = new ResultClass<List<UserGiftsRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserGiftsRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("UserTypeId", UserTypeId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsRuleClass> UserGiftsRules = new List<UserGiftsRuleClass>();
                        UserGiftsRuleClass userGiftsRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userGiftsRule = new UserGiftsRuleClass().PopulateUserGiftsRule(fieldNames, reader);

                            userGiftsRule.Order = order;
                            UserGiftsRules.Add(userGiftsRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserGiftsRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Rules - DELETEs
        [SwaggerWcfTag("UserSendRule")]
        public ResultClass<List<UserSendRuleClass>> DeleteUserSendRule(int LoggedUser, int Id)
        {
            ResultClass<List<UserSendRuleClass>> result = new ResultClass<List<UserSendRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserSendRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendRuleClass> UserSendRules = new List<UserSendRuleClass>();
                        UserSendRuleClass userSendRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userSendRule = new UserSendRuleClass().PopulateUserSendRule(fieldNames, reader);

                            userSendRule.Order = order;
                            UserSendRules.Add(userSendRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserSendRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawRule")]
        public ResultClass<List<UserWithdrawRuleClass>> DeleteUserWithdrawRule(int LoggedUser, int Id)
        {
            ResultClass<List<UserWithdrawRuleClass>> result = new ResultClass<List<UserWithdrawRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserWithdrawRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawRuleClass> UserWithdrawRules = new List<UserWithdrawRuleClass>();
                        UserWithdrawRuleClass userWithdrawRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userWithdrawRule = new UserWithdrawRuleClass().PopulateUserWithdrawRule(fieldNames, reader);

                            userWithdrawRule.Order = order;
                            UserWithdrawRules.Add(userWithdrawRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserWithdrawRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsRule")]
        public ResultClass<List<UserGiftsRuleClass>> DeleteUserGiftsRule(int LoggedUser, int Id)
        {
            ResultClass<List<UserGiftsRuleClass>> result = new ResultClass<List<UserGiftsRuleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserGiftsRule";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsRuleClass> UserGiftsRules = new List<UserGiftsRuleClass>();
                        UserGiftsRuleClass userGiftsRule;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userGiftsRule = new UserGiftsRuleClass().PopulateUserGiftsRule(fieldNames, reader);

                            userGiftsRule.Order = order;
                            UserGiftsRules.Add(userGiftsRule);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsRules;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserGiftsRule", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Exceptions - GETs
        [SwaggerWcfTag("UserSendException")]
        public ResultClass<List<UserSendExceptionClass>> GetUserSendExceptions(int LoggedUser, int UserId)
        {
            ResultClass<List<UserSendExceptionClass>> result = new ResultClass<List<UserSendExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserSendExceptions";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendExceptionClass> UserSendExceptions = new List<UserSendExceptionClass>();
                        UserSendExceptionClass userSendException;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userSendException = new UserSendExceptionClass().PopulateUserSendException(fieldNames, reader);

                            userSendException.Order = order;
                            UserSendExceptions.Add(userSendException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserSendExceptions", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawException")]
        public ResultClass<List<UserWithdrawExceptionClass>> GetUserWithdrawExceptions(int LoggedUser, int UserId)
        {
            ResultClass<List<UserWithdrawExceptionClass>> result = new ResultClass<List<UserWithdrawExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserWithdrawExceptions";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawExceptionClass> UserWithdrawExceptions = new List<UserWithdrawExceptionClass>();
                        UserWithdrawExceptionClass userWithdrawException;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userWithdrawException = new UserWithdrawExceptionClass().PopulateUserWithdrawException(fieldNames, reader);

                            userWithdrawException.Order = order;
                            UserWithdrawExceptions.Add(userWithdrawException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserWithdrawExceptions", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsException")]
        public ResultClass<List<UserGiftsExceptionClass>> GetUserGiftsExceptions(int LoggedUser, int UserId)
        {
            ResultClass<List<UserGiftsExceptionClass>> result = new ResultClass<List<UserGiftsExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserGiftsExceptions";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsExceptionClass> UserGiftsExceptions = new List<UserGiftsExceptionClass>();
                        UserGiftsExceptionClass userGiftsException;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userGiftsException = new UserGiftsExceptionClass().PopulateUserGiftsException(fieldNames, reader);

                            userGiftsException.Order = order;
                            UserGiftsExceptions.Add(userGiftsException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserGiftsExceptions", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Exceptions - UPDATEs
        [SwaggerWcfTag("UserSendException")]
        public ResultClass<List<UserSendExceptionClass>> UpdateUserSendException(int LoggedUser, int Id, int UserId, int ForbiddenUserId)
        {
            ResultClass<List<UserSendExceptionClass>> result = new ResultClass<List<UserSendExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserSendException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("ForbiddenUserId", ForbiddenUserId));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendExceptionClass> UserSendExceptions = new List<UserSendExceptionClass>();
                        UserSendExceptionClass userSendException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userSendException = new UserSendExceptionClass().PopulateUserSendException(fieldNames, reader);

                            userSendException.Order = order;
                            UserSendExceptions.Add(userSendException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserSendException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawException")]
        public ResultClass<List<UserWithdrawExceptionClass>> UpdateUserWithdrawException(int LoggedUser, int Id, int UserId, int ForbiddenUserId)
        {
            ResultClass<List<UserWithdrawExceptionClass>> result = new ResultClass<List<UserWithdrawExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserWithdrawException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("ForbiddenUserId", ForbiddenUserId));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawExceptionClass> UserWithdrawExceptions = new List<UserWithdrawExceptionClass>();
                        UserWithdrawExceptionClass userWithdrawException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userWithdrawException = new UserWithdrawExceptionClass().PopulateUserWithdrawException(fieldNames, reader);

                            userWithdrawException.Order = order;
                            UserWithdrawExceptions.Add(userWithdrawException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserWithdrawException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsException")]
        public ResultClass<List<UserGiftsExceptionClass>> UpdateUserGiftsException(int LoggedUser, int Id, int UserId, int ForbiddenUserId)
        {
            ResultClass<List<UserGiftsExceptionClass>> result = new ResultClass<List<UserGiftsExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserGiftsException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("ForbiddenUserId", ForbiddenUserId));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsExceptionClass> UserGiftsExceptions = new List<UserGiftsExceptionClass>();
                        UserGiftsExceptionClass userGiftsException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userGiftsException = new UserGiftsExceptionClass().PopulateUserGiftsException(fieldNames, reader);

                            userGiftsException.Order = order;
                            UserGiftsExceptions.Add(userGiftsException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserGiftsException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Exceptions - INSERTs
        [SwaggerWcfTag("UserSendException")]
        public ResultClass<List<UserSendExceptionClass>> CreateUserSendException(int LoggedUser, int UserId, int ForbiddenUserId)
        {
            ResultClass<List<UserSendExceptionClass>> result = new ResultClass<List<UserSendExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserSendException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("ForbiddenUserId", ForbiddenUserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendExceptionClass> UserSendExceptions = new List<UserSendExceptionClass>();
                        UserSendExceptionClass userSendException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userSendException = new UserSendExceptionClass().PopulateUserSendException(fieldNames, reader);

                            userSendException.Order = order;
                            UserSendExceptions.Add(userSendException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserSendException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawException")]
        public ResultClass<List<UserWithdrawExceptionClass>> CreateUserWithdrawException(int LoggedUser, int UserId, int ForbiddenUserId)
        {
            ResultClass<List<UserWithdrawExceptionClass>> result = new ResultClass<List<UserWithdrawExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserWithdrawException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("ForbiddenUserId", ForbiddenUserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawExceptionClass> UserWithdrawExceptions = new List<UserWithdrawExceptionClass>();
                        UserWithdrawExceptionClass userWithdrawException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userWithdrawException = new UserWithdrawExceptionClass().PopulateUserWithdrawException(fieldNames, reader);

                            userWithdrawException.Order = order;
                            UserWithdrawExceptions.Add(userWithdrawException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserWithdrawException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsException")]
        public ResultClass<List<UserGiftsExceptionClass>> CreateUserGiftsException(int LoggedUser, int UserId, int ForbiddenUserId)
        {
            ResultClass<List<UserGiftsExceptionClass>> result = new ResultClass<List<UserGiftsExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserGiftsException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("UserId", UserId));
                    cmd.Parameters.Add(new SqlParameter("ForbiddenUserId", ForbiddenUserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsExceptionClass> UserGiftsExceptions = new List<UserGiftsExceptionClass>();
                        UserGiftsExceptionClass userGiftsException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userGiftsException = new UserGiftsExceptionClass().PopulateUserGiftsException(fieldNames, reader);

                            userGiftsException.Order = order;
                            UserGiftsExceptions.Add(userGiftsException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "InsertUserGiftsException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        //User Transfer Exceptions - DELETEs
        [SwaggerWcfTag("UserSendException")]
        public ResultClass<List<UserSendExceptionClass>> DeleteUserSendException(int LoggedUser, int Id)
        {
            ResultClass<List<UserSendExceptionClass>> result = new ResultClass<List<UserSendExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserSendException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserSendExceptionClass> UserSendExceptions = new List<UserSendExceptionClass>();
                        UserSendExceptionClass userSendException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userSendException = new UserSendExceptionClass().PopulateUserSendException(fieldNames, reader);

                            userSendException.Order = order;
                            UserSendExceptions.Add(userSendException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserSendExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserSendException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserWithdrawException")]
        public ResultClass<List<UserWithdrawExceptionClass>> DeleteUserWithdrawException(int LoggedUser, int Id)
        {
            ResultClass<List<UserWithdrawExceptionClass>> result = new ResultClass<List<UserWithdrawExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserWithdrawException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserWithdrawExceptionClass> UserWithdrawExceptions = new List<UserWithdrawExceptionClass>();
                        UserWithdrawExceptionClass userWithdrawException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userWithdrawException = new UserWithdrawExceptionClass().PopulateUserWithdrawException(fieldNames, reader);

                            userWithdrawException.Order = order;
                            UserWithdrawExceptions.Add(userWithdrawException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserWithdrawExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserWithdrawException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserGiftsException")]
        public ResultClass<List<UserGiftsExceptionClass>> DeleteUserGiftsException(int LoggedUser, int Id)
        {
            ResultClass<List<UserGiftsExceptionClass>> result = new ResultClass<List<UserGiftsExceptionClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserGiftsException";

                    cmd.Parameters.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserGiftsExceptionClass> UserGiftsExceptions = new List<UserGiftsExceptionClass>();
                        UserGiftsExceptionClass userGiftsException;
                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            userGiftsException = new UserGiftsExceptionClass().PopulateUserGiftsException(fieldNames, reader);

                            userGiftsException.Order = order;
                            UserGiftsExceptions.Add(userGiftsException);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserGiftsExceptions;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserGiftsException", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("UserTransferType")]
        public ResultClass<List<UserTransferTypeClass>> GetUserTransferTypes(int? Id)
        {
            ResultClass<List<UserTransferTypeClass>> result = new ResultClass<List<UserTransferTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserTransferTypes";

                    if (Id > 0)
                        cmd.Parameters.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserTransferTypeClass> UserTransferTypes = new List<UserTransferTypeClass>();
                        UserTransferTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserTransferTypeClass().PopulateUserTransferType(fieldNames, reader);

                            id.Order = order;
                            UserTransferTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTransferTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserTransferTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<UserTransferTypeClass> CreateUserTransferType(int LoggedUser, UserTransferTypeClass UserTransferType)
        {
            ResultClass<UserTransferTypeClass> result = new ResultClass<UserTransferTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserTransferType";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
               new SqlParameter("UserId",UserTransferType.UserId),
               new SqlParameter("UserTypeId",UserTransferType.UserTypeId),
              new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTransferTypeClass usertransfertype;
                        reader.Read();
                        usertransfertype = new UserTransferTypeClass().PopulateUserTransferType(fieldNames, reader);

                        usertransfertype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertransfertype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUserTransferType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<UserTransferTypeClass> DeleteUserTransferType(int LoggedUser, int Id)
        {
            ResultClass<UserTransferTypeClass> result = new ResultClass<UserTransferTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserTransferType";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
               new SqlParameter("Id",Id),
              new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTransferTypeClass usertransfertype;
                        reader.Read();
                        usertransfertype = new UserTransferTypeClass().PopulateUserTransferType(fieldNames, reader);

                        usertransfertype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertransfertype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserTransferType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<UserTransferTypeClass> UpdateUserTransferType(int LoggedUser, UserTransferTypeClass UserTransferType)
        {
            ResultClass<UserTransferTypeClass> result = new ResultClass<UserTransferTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserTransferType";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
               new SqlParameter("Id",UserTransferType.Id),
               new SqlParameter("UserId",UserTransferType.UserId),
               new SqlParameter("UserTypeId",UserTransferType.UserTypeId),
              new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserTransferTypeClass usertransfertype;
                        reader.Read();
                        usertransfertype = new UserTransferTypeClass().PopulateUserTransferType(fieldNames, reader);

                        usertransfertype.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = usertransfertype;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserTransferType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        //Get_UserTransferType
        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<List<UserTransferTypeClass>> GetUserTransferTypes_InTransferPage(int? UserId)
        {
            ResultClass<List<UserTransferTypeClass>> result = new ResultClass<List<UserTransferTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserTransferTypes";

                    if (UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("Id", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserTransferTypeClass> UserTransferTypes = new List<UserTransferTypeClass>();
                        UserTransferTypeClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            id = new UserTransferTypeClass().PopulateUserTransferType(fieldNames, reader);

                            id.Order = order;
                            UserTransferTypes.Add(id);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UserTransferTypes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserTransferTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("_Deprecated")]
        public ResultClass<VerifyMobileNumberClass> SendSMS(string MobileNo, string Body)
        {
            ResultClass<VerifyMobileNumberClass> result = new ResultClass<VerifyMobileNumberClass>();
            result.Result = new VerifyMobileNumberClass();
            try
            {
                SMS.SMSResponse start;
                start = SMS.Send(new SMS.SMSRequest
                {
                    from = "Nuqaty System",
                    title = "Nuqaty System",
                    to = MobileNo,
                    text = Body
                });

                //Status Code REF: https://developer.nexmo.com/api/verify

                //result.Result.request_id = start.messages[0]; generated from db
                string status = start.messages[0].status;
                result.Result.status = status;
                if (status != "0")
                {
                    if (status == "10")
                        result.Result.error_text =
                           "لا يسمح بالتحققات المتزامنة لنفس الرقم. يرجى الإنتظار لمدة 10 دقائق و إعادة المحاولة";
                    else if (status == "16")
                        result.Result.error_text = "الرمز المدخل غير صحيح. يرجى إعادة المحاولة بعد 5 دقائق";
                    else if (status == "17")
                        result.Result.error_text =
                           "تم إدخال الرمز بشكل خاطئ ثلاث مرات يرجى  الإنتظار لمدة 10 دقائق و إعادة المحاولة";

                    else if (status == "15")
                        result.Result.error_text = "الرقم المدخل غير صحيح. يرجى إعادة المحاولة ";

                    else
                        result.Result.error_text =
                           "خطأ غير معروف. يرجى إعادة المحاولة قد يكون الخطأ بسبب مشكلة في الشبكة أو الإتصال" + " ";
                }
                else
                    result.Result.error_text = "";
                result.Code = Errors.Success;
                result.Message = "";
            }
            catch (Exception e)
            {
                result.Code = Errors.UnknownError;
                result.Message = e.Message;
                if (e.InnerException != null)
                {
                    result.Message = result.Message + " ***** " + e.InnerException.Message;
                    if (e.InnerException.InnerException != null)
                        result.Message = result.Message + " **** " + e.InnerException.InnerException.Message;
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "VerifyMobileNumberBySMS", e.Source, "");
                }
                result.Result = null;
                return result;
            }
            return result;
        }





        [SwaggerWcfTag("Dashboard")]
        public ResultClass<DashboardClass> GetDashboardData(int LoggedUser)
        {
            ResultClass<DashboardClass> result = new ResultClass<DashboardClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DashboardMini";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                      new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                    };

                    cmd.Parameters.AddRange(Params.ToArray());


                    DashboardClass dashboard = new DashboardClass();

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        reader.Read();

                        dashboard = dashboard.PopulateDashboard(dashboard, fieldNames, reader);

                        result.Code = Errors.Success;
                        result.Message = "";
                    }

                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        dashboard = dashboard.PopulateDashboard(dashboard, fieldNames, reader);

                        result.Result = dashboard;

                        result.Code = Errors.Success;
                        result.Message = "";
                    }

                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        dashboard = dashboard.PopulateDashboard(dashboard, fieldNames, reader);

                        result.Result = dashboard;

                        result.Code = Errors.Success;
                        result.Message = "";
                    }

                    reader.NextResult();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();

                        dashboard = dashboard.PopulateDashboard(dashboard, fieldNames, reader);

                        result.Result = dashboard;

                        result.Code = Errors.Success;
                        result.Message = "";
                    }

                    result.Result = dashboard;

                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetBarcodes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        

        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<bool> CreatePriceMultiOfferDetails_Percentage(int LoggedUser, 
            int OfferId, int PriceTypeId, int CountryId, int CurrencyId, double Percentage, List<int> ItemsIds)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertPriceMultiOfferDetails_Percentage";
                    cmd.CommandTimeout = 6000000;

                    List<SqlParameter> Params = new List<SqlParameter>()
                   {

                      new SqlParameter("OfferId", OfferId),
                      new SqlParameter("PriceTypeId", PriceTypeId),
                      new SqlParameter("CountryId", CountryId),
                      new SqlParameter("CurrencyId", CurrencyId),
                      new SqlParameter("Percentage", Percentage),
                      new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                   };

                    cmd.Parameters.AddRange(Params.ToArray());


                    DataTable itemstbl;
                    using (itemstbl = new DataTable())
                    {
                        itemstbl.Columns.Add("Item", typeof(int));
                        foreach (var x in ItemsIds)
                            itemstbl.Rows.Add(x);
                    }

                    if (itemstbl.Rows.Count > 0)
                    {
                        var items = new SqlParameter("@ItemIds", SqlDbType.Structured);
                        items.Value = itemstbl;
                        cmd.Parameters.Add(items);
                    }


                    SqlDataReader reader = cmd.ExecuteReader();

                    result.Result = true;
                    result.Code = 0;
                    result.Message = "";
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreatePriceMultiOfferDetails_Percentage", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }


        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<OffersDetailDataClass> CreateOfferDetailData(int LoggedUser, OffersDetailDataClass OfferDetailData)
        {
            ResultClass<OffersDetailDataClass> result = new ResultClass<OffersDetailDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertOfferDetailsData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                  new SqlParameter("OfferId", OfferDetailData.OffersDetail.OfferId),
                  new SqlParameter("ItemId", OfferDetailData.OffersDetail.ItemId),


                  new SqlParameter("HasInitQuantity", OfferDetailData.OffersDetail.HasInitQuantity),
                  new SqlParameter("InitQuantity", OfferDetailData.OffersDetail.InitQuantity),
                  new SqlParameter("Disabled", OfferDetailData.OffersDetail.Disabled),
                  new SqlParameter("Notes", OfferDetailData.OffersDetail.Notes),
                  new SqlParameter("SoldQuantity", OfferDetailData.OffersDetail.SoldQuantity),
                  //new SqlParameter("RemainingQuantity",OffersDetail.RemainingQuantity),
                  new SqlParameter("CreatedBy", OfferDetailData.OffersDetail.CreatedBy),
                  new SqlParameter("CreateDate", OfferDetailData.OffersDetail.CreateDate),
                  new SqlParameter("UpdateDate", OfferDetailData.OffersDetail.UpdateDate),
                  new SqlParameter("HasPriceOffer", OfferDetailData.OffersDetail.HasPriceOffer),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    if (OfferDetailData.OffersDetail.UpdateBy != 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("UpdateBy", OfferDetailData.OffersDetail.UpdateBy));
                    }

                    if (OfferDetailData.OffersDetail.ColorId != 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("ColorId", OfferDetailData.OffersDetail.ColorId));
                    }

                    if (OfferDetailData.OffersDetail.SizeId != 0)
                    {
                        cmd.Parameters.Add(new SqlParameter("SizeId", OfferDetailData.OffersDetail.SizeId));
                    }




                    DataTable offerPricesTbl;
                    using (offerPricesTbl = new DataTable())
                    {
                        offerPricesTbl.Columns.Add("CountryCurrencyId", typeof(int));
                        offerPricesTbl.Columns.Add("TypeId", typeof(int));
                        offerPricesTbl.Columns.Add("Price", typeof(double));
                        offerPricesTbl.Columns.Add("HasPointsOffer", typeof(bool));
                        offerPricesTbl.Columns.Add("RequiredPoints", typeof(int));
                        offerPricesTbl.Columns.Add("GrantedPoints", typeof(int));
                        offerPricesTbl.Columns.Add("IsSpecialOffer", typeof(bool));
                        foreach (var x in OfferDetailData.Prices)
                            offerPricesTbl.Rows.Add(x.CountryCurrencyId, x.TypeId, x.Price, x.HasPointsOffer, x.RequiredPoints, x.GrantedPoints, x.IsSpecialOffer);
                    }

                    if (offerPricesTbl.Rows.Count > 0)
                    {
                        var OfferPrices = new SqlParameter("@Prices", SqlDbType.Structured);
                        OfferPrices.Value = offerPricesTbl;
                        cmd.Parameters.Add(OfferPrices);
                    }


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        OffersDetailClass offersDetail = new OffersDetailClass();
                        List<OfferDetailPriceClass> offerDetailPrices = new List<OfferDetailPriceClass>();
                        offersDetail = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);


                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            OfferDetailPriceClass offersDetailPrice;
                            int Order = 0;
                            while (reader.Read())
                            {
                                Order = Order + 1;
                                offersDetailPrice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);
                                offersDetailPrice.Order = Order;
                                offerDetailPrices.Add(offersDetailPrice);
                            }
                        }
                        result.Result = new OffersDetailDataClass();
                        result.Result.OffersDetail = offersDetail;
                        result.Result.Prices = offerDetailPrices;
                        result.Code = 0;
                        result.Message = "";
                        return result;

                    }

                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateOfferDetailData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<OffersDetailDataClass> GetOfferDetailData(int LoggedUser, int OfferId, int OfferDetailId)
        {
            ResultClass<OffersDetailDataClass> result = new ResultClass<OffersDetailDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOfferDetailData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("OfferId", OfferId),
                        new SqlParameter("OfferDetailId", OfferDetailId),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    OffersDetailClass offersDetail;
                    List<OfferDetailPriceClass> offerDetailPrices = new List<OfferDetailPriceClass>();
                    if (reader.HasRows)
                    {

                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        offersDetail = new OffersDetailClass().PopulateOffersDetail(fieldNames, reader);

                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            OfferDetailPriceClass Offerprice;
                            int Order = 0;
                            while (reader.Read())
                            {
                                Order = Order + 1;
                                Offerprice = new OfferDetailPriceClass().PopulateOfferDetailPrice(fieldNames, reader);
                                Offerprice.Order = Order;
                                offerDetailPrices.Add(Offerprice);
                            }
                        }
                        result.Result = new OffersDetailDataClass();
                        result.Result.OffersDetail = offersDetail;
                        result.Result.Prices = offerDetailPrices;
                        result.Code = 0;
                        result.Message = "";
                    }
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOfferDetailData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("OffersDetails")]
        public ResultClass<bool> CheckOfferPrices(int LoggedUser, int ItemId, List<OfferDetailPriceClass> OfferPrices)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CheckOfferPrices";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                          new SqlParameter("ItemId", ItemId),
                       };
                    DataTable offerPricesTbl;
                    using (offerPricesTbl = new DataTable())
                    {
                        offerPricesTbl.Columns.Add("CountryCurrencyId", typeof(int));
                        offerPricesTbl.Columns.Add("TypeId", typeof(int));
                        offerPricesTbl.Columns.Add("Price", typeof(double));
                        offerPricesTbl.Columns.Add("HasPointsOffer", typeof(bool));
                        offerPricesTbl.Columns.Add("RequiredPoints", typeof(int));
                        offerPricesTbl.Columns.Add("GrantedPoints", typeof(int));
                        offerPricesTbl.Columns.Add("IsSpecialOffer", typeof(bool));
                        foreach (var x in OfferPrices)
                            offerPricesTbl.Rows.Add(x.CountryCurrencyId, x.TypeId, x.Price, x.HasPointsOffer, x.RequiredPoints, x.GrantedPoints, x.IsSpecialOffer);
                    }

                    var OfferPricesParam = new SqlParameter("@OfferPrices", SqlDbType.Structured);
                    OfferPricesParam.Value = offerPricesTbl;
                    Params.Add(OfferPricesParam);

                    cmd.Parameters.AddRange(Params.ToArray());
                    cmd.ExecuteReader();
                    result.Code = Errors.Success;
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "SetUserNotificationsSeen",
                       e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }
        [SwaggerWcfTag("Language")]
        public ResultClass<int> SetUserLanguage(int Type, string Id, int Language)
        {
            ResultClass<int> Result = new ResultClass<int>();
            Result.Result = Language;
            return Result;
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<List<ItemDepartmentClass>> GetItemDepartments()
        {
            ResultClass<List<ItemDepartmentClass>> result = new ResultClass<List<ItemDepartmentClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDepartments";
                    List<SqlParameter> Params = new List<SqlParameter>();
                        
                    if (HttpContext.Current.Request.Headers["LoggedUser"] != null)
                        Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemDepartmentClass> ItemDepartmentsList = new List<ItemDepartmentClass>();
                        ItemDepartmentClass itemDepartment;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                            itemDepartment.Order = order;
                            ItemDepartmentsList.Add(itemDepartment);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemDepartmentsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartments", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        public ResultClass<List<ItemDepartmentClass>> GetItemDepartmentsForPublic(int CountryId)
        {
            ResultClass<List<ItemDepartmentClass>> result = new ResultClass<List<ItemDepartmentClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDepartmentsForPublic";
                    List<SqlParameter> Params = new List<SqlParameter>();

                    
                        Params.Add(new SqlParameter("CountryId", CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemDepartmentClass> ItemDepartmentsList = new List<ItemDepartmentClass>();
                        ItemDepartmentClass itemDepartment;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                            itemDepartment.Order = order;
                            ItemDepartmentsList.Add(itemDepartment);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemDepartmentsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentsForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<List<ItemDepartmentImageClass>> GetItemDepartmentImages(int Id)
        {
            ResultClass<List<ItemDepartmentImageClass>> result = new ResultClass<List<ItemDepartmentImageClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDepartmentImages";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("Id", Id),                          
                       };


                    if (HttpContext.Current.Request.Headers["LoggedUser"] != null)
                        Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));



                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemDepartmentImageClass> ItemDepartmentImagesList = new List<ItemDepartmentImageClass>();
                        ItemDepartmentImageClass itemDepartmentImage;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itemDepartmentImage = new ItemDepartmentImageClass().PopulateItemDepartmentImage(fieldNames, reader);

                            itemDepartmentImage.Order = order;
                            ItemDepartmentImagesList.Add(itemDepartmentImage);

                        }


                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                ItemDepartmentImageCountryClass departmentImageCountry = new ItemDepartmentImageCountryClass();
                                departmentImageCountry = new ItemDepartmentImageCountryClass().PopulateItemDepartmentImageCountry(fieldNames, reader);
                                if (ItemDepartmentImagesList.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId) != null)
                                {
                                    if (ItemDepartmentImagesList.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries == null)
                                        ItemDepartmentImagesList.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries = new List<ItemDepartmentImageCountryClass>();
                                    ItemDepartmentImagesList.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries.Add(departmentImageCountry);
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemDepartmentImagesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentImages", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<List<ItemDepartmentImageClass>> GetItemDepartmentImagesForPublic(int CountryId, int Id)
        {
            ResultClass<List<ItemDepartmentImageClass>> result = new ResultClass<List<ItemDepartmentImageClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDepartmentImagesForPublic";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("Id", Id),
                          new SqlParameter("CountryId", CountryId),
                       };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemDepartmentImageClass> ItemDepartmentImagesList = new List<ItemDepartmentImageClass>();
                        ItemDepartmentImageClass itemDepartmentImage;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itemDepartmentImage = new ItemDepartmentImageClass().PopulateItemDepartmentImage(fieldNames, reader);

                            itemDepartmentImage.Order = order;
                            ItemDepartmentImagesList.Add(itemDepartmentImage);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemDepartmentImagesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentImagesForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentDataClass> GetItemDepartmentData(int Id)
        {
            ResultClass<ItemDepartmentDataClass> result = new ResultClass<ItemDepartmentDataClass>();
            try
            {
                ItemDepartmentClass itemDepartment = GetItemDepartment(Id).Result;
                List<ItemDepartmentImageClass> itemDepartmentImages = GetItemDepartmentImages(Id).Result;

                ItemDepartmentDataClass itemDepartmentData = new ItemDepartmentDataClass();
                itemDepartmentData.ItemDepartment = itemDepartment;
                itemDepartmentData.ItemDepartmentImages = itemDepartmentImages;

                result.Result = itemDepartmentData;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentDataClass> GetItemDepartmentDataForPublic(int CountryId, int Id)
        {
            ResultClass<ItemDepartmentDataClass> result = new ResultClass<ItemDepartmentDataClass>();
            try
            {
                ItemDepartmentClass itemDepartment = GetItemDepartmentForPublic(CountryId, Id).Result;
                List<ItemDepartmentImageClass> itemDepartmentImages = GetItemDepartmentImagesForPublic(CountryId, Id).Result;

                ItemDepartmentDataClass itemDepartmentData = new ItemDepartmentDataClass();
                itemDepartmentData.ItemDepartment = itemDepartment;
                itemDepartmentData.ItemDepartmentImages = itemDepartmentImages;

                result.Result = itemDepartmentData;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentDataForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<List<ItemDepartmentDataClass>> GetItemDepartmentsData()
        {
            ResultClass<List<ItemDepartmentDataClass>> result = new ResultClass<List<ItemDepartmentDataClass>>();
            try
            {
                List<ItemDepartmentDataClass> itemDepartmentDataList = new List<ItemDepartmentDataClass>();
                foreach (var item in GetItemDepartments().Result)
                {
                    itemDepartmentDataList.Add(GetItemDepartmentData(item.Id).Result);
                }

                result.Result = itemDepartmentDataList;
                return result;

            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentsData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<List<ItemDepartmentDataClass>> GetItemDepartmentsDataForPublic(int CountryId)
        {
            ResultClass<List<ItemDepartmentDataClass>> result = new ResultClass<List<ItemDepartmentDataClass>>();
            try
            {
                List<ItemDepartmentDataClass> itemDepartmentDataList = new List<ItemDepartmentDataClass>();
                foreach (var item in GetItemDepartmentsForPublic(CountryId).Result)
                {
                    itemDepartmentDataList.Add(GetItemDepartmentDataForPublic(CountryId, item.Id).Result);
                }

                result.Result = itemDepartmentDataList;
                return result;

            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentsForPublicData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentClass> GetItemDepartment(int Id)
        {
            ResultClass<ItemDepartmentClass> result = new ResultClass<ItemDepartmentClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDepartments";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                   
                    new SqlParameter("Id", Id),
               };


                    if (HttpContext.Current.Request.Headers["LoggedUser"] != null)
                        Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                        
                        cmd.Parameters.AddRange(Params.ToArray());


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemDepartment;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentClass> GetItemDepartmentForPublic(int CountryId, int Id)
        {
            ResultClass<ItemDepartmentClass> result = new ResultClass<ItemDepartmentClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemDepartmentsForPublic";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {

                    new SqlParameter("Id", Id),
               };


                    
                   Params.Add(new SqlParameter("CountryId", CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemDepartment;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemDepartmentForPublic", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentClass> CreateItemDepartment(int LoggedUser, ItemDepartmentClass ItemDepartment)
        {
            ResultClass<ItemDepartmentClass> result = new ResultClass<ItemDepartmentClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemDepartment";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", ItemDepartment.ArabicName),
                  new SqlParameter("EnglishName", ItemDepartment.EnglishName),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ImageURL", ItemDepartment.ImageURL),
                  new SqlParameter("WebImageURL", ItemDepartment.WebImageURL),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemDepartment;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemDepartment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentDataClass> CreateItemDepartmentData(int LoggedUser, ItemDepartmentDataClass ItemDepartmentData)
        {
            ResultClass<ItemDepartmentDataClass> result = new ResultClass<ItemDepartmentDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemDepartmentData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ArabicName", ItemDepartmentData.ItemDepartment.ArabicName),
                  new SqlParameter("EnglishName", ItemDepartmentData.ItemDepartment.EnglishName),
                  new SqlParameter("ImageURL", ItemDepartmentData.ItemDepartment.ImageURL),
                  new SqlParameter("WebImageURL", ItemDepartmentData.ItemDepartment.WebImageURL),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };



                    if (ItemDepartmentData.ItemDepartmentImages != null)
                    {
                        DataTable imagestbl;
                        DataTable countriestbl;
                        using (imagestbl = new DataTable())
                        {
                            imagestbl.Columns.Add("InternalId", typeof(int));
                            imagestbl.Columns.Add("Id", typeof(int));
                            imagestbl.Columns.Add("Param1", typeof(int));
                            imagestbl.Columns.Add("Param2", typeof(string));
                            imagestbl.Columns.Add("Param3", typeof(string));
                            int i = 0;
                            countriestbl = new DataTable();
                            foreach (ItemDepartmentImageClass x in ItemDepartmentData.ItemDepartmentImages)
                            {
                                i += 1;

                                imagestbl.Rows.Add(i, x.ReferenceId, x.ReferenceTypeId, x.ImageURL, x.WebImageURL);


                                if (x.ItemDepartmentImageCountries != null)
                                {
                                    using (countriestbl = new DataTable())
                                    {
                                        countriestbl.Columns.Add("Id", typeof(int));
                                        countriestbl.Columns.Add("Id2", typeof(int));
                                        foreach (ItemDepartmentImageCountryClass c in x.ItemDepartmentImageCountries)
                                        {
                                            countriestbl.Rows.Add(i, c.CountryId);
                                        }
                                    }
                                }
                            }
                        }
                        if (imagestbl.Rows.Count > 0)
                        {
                            var imagesList = new SqlParameter("@Images", SqlDbType.Structured);
                            imagesList.Value = imagestbl;
                            Params.Add(imagesList);
                        }

                        if (countriestbl.Rows.Count > 0)
                        {
                            var countriesList = new SqlParameter("@ImagesCountries", SqlDbType.Structured);
                            countriesList.Value = countriestbl;
                            Params.Add(countriesList);
                        }
                        
                    }




                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;

                        List<ItemDepartmentImageClass> images = new List<ItemDepartmentImageClass>();
                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            int order = 0;
                            while (reader.Read())
                            {
                                order++;
                                ItemDepartmentImageClass departmentImage = new ItemDepartmentImageClass();
                                departmentImage = new ItemDepartmentImageClass().PopulateItemDepartmentImage(fieldNames, reader);
                                departmentImage.Order = order;
                                images.Add(departmentImage);
                            }
                        }


                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                ItemDepartmentImageCountryClass departmentImageCountry = new ItemDepartmentImageCountryClass();
                                departmentImageCountry = new ItemDepartmentImageCountryClass().PopulateItemDepartmentImageCountry(fieldNames, reader);
                                if (images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId) != null)
                                {
                                    if (images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries == null)
                                        images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries = new List<ItemDepartmentImageCountryClass>();
                                    images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries.Add(departmentImageCountry);
                                }
                            }
                        }

                        ItemDepartmentDataClass res = new ItemDepartmentDataClass();
                        res.ItemDepartment = itemDepartment;
                        res.ItemDepartmentImages = images;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = res;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemDepartmentData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentClass> UpdateItemDepartment(int LoggedUser, ItemDepartmentClass ItemDepartment)
        {
            ResultClass<ItemDepartmentClass> result = new ResultClass<ItemDepartmentClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemDepartment";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemDepartment.Id),
                  new SqlParameter("ArabicName", ItemDepartment.ArabicName),
                  new SqlParameter("EnglishName", ItemDepartment.EnglishName),
                  new SqlParameter("ImageURL", ItemDepartment.ImageURL),
                  new SqlParameter("WebImageURL", ItemDepartment.WebImageURL),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemDepartment;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemDepartment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentDataClass> UpdateItemDepartmentData(int LoggedUser, ItemDepartmentDataClass ItemDepartmentData)
        {
            ResultClass<ItemDepartmentDataClass> result = new ResultClass<ItemDepartmentDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemDepartmentData";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", ItemDepartmentData.ItemDepartment.Id),
                  new SqlParameter("ArabicName", ItemDepartmentData.ItemDepartment.ArabicName),
                  new SqlParameter("EnglishName", ItemDepartmentData.ItemDepartment.EnglishName),
                  new SqlParameter("ImageURL", ItemDepartmentData.ItemDepartment.ImageURL),
                  new SqlParameter("WebImageURL", ItemDepartmentData.ItemDepartment.WebImageURL),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (ItemDepartmentData.ItemDepartmentImages != null)
                    {
                        DataTable imagestbl;
                        DataTable countriestbl;
                        using (imagestbl = new DataTable())
                        {
                            imagestbl.Columns.Add("InternalId", typeof(int));
                            imagestbl.Columns.Add("Id", typeof(int));
                            imagestbl.Columns.Add("Param1", typeof(int));
                            imagestbl.Columns.Add("Param2", typeof(string));
                            imagestbl.Columns.Add("Param3", typeof(string));
                            int i = 0;
                            countriestbl = new DataTable();
                            foreach (ItemDepartmentImageClass x in ItemDepartmentData.ItemDepartmentImages)
                            {
                                i += 1;

                                imagestbl.Rows.Add(i, x.ReferenceId, x.ReferenceTypeId, x.ImageURL, x.WebImageURL);


                                if (x.ItemDepartmentImageCountries != null)
                                {
                                    using (countriestbl = new DataTable())
                                    {
                                        countriestbl.Columns.Add("Id", typeof(int));
                                        countriestbl.Columns.Add("Id2", typeof(int));
                                        foreach (ItemDepartmentImageCountryClass c in x.ItemDepartmentImageCountries)
                                        {
                                            countriestbl.Rows.Add(i, c.CountryId);
                                        }
                                    }
                                }
                            }
                        }
                        if (imagestbl.Rows.Count > 0)
                        {
                            var imagesList = new SqlParameter("@Images", SqlDbType.Structured);
                            imagesList.Value = imagestbl;
                            Params.Add(imagesList);
                        }

                        if (countriestbl.Rows.Count > 0)
                        {
                            var countriesList = new SqlParameter("@ImagesCountries", SqlDbType.Structured);
                            countriesList.Value = countriestbl;
                            Params.Add(countriesList);
                        }                        
                    }




                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;

                        List<ItemDepartmentImageClass> images = new List<ItemDepartmentImageClass>();
                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            int order = 0;
                            while (reader.Read())
                            {
                                order++;
                                ItemDepartmentImageClass departmentImage = new ItemDepartmentImageClass();
                                departmentImage = new ItemDepartmentImageClass().PopulateItemDepartmentImage(fieldNames, reader);
                                departmentImage.Order = order;
                                images.Add(departmentImage);
                            }
                        }


                        if (reader.NextResult())
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                ItemDepartmentImageCountryClass departmentImageCountry = new ItemDepartmentImageCountryClass();
                                departmentImageCountry = new ItemDepartmentImageCountryClass().PopulateItemDepartmentImageCountry(fieldNames, reader);
                                if (images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId) != null)
                                {
                                    if (images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries == null)
                                        images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries = new List<ItemDepartmentImageCountryClass>();
                                    images.FindLast((x) => x.Id == departmentImageCountry.ItemDepartmentImageId).ItemDepartmentImageCountries.Add(departmentImageCountry);
                                }
                            }
                        }

                        ItemDepartmentDataClass res = new ItemDepartmentDataClass();
                        res.ItemDepartment = itemDepartment;
                        res.ItemDepartmentImages = images;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = res;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }


                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateItemDepartmentData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        [SwaggerWcfTag("ItemDepartments")]
        public ResultClass<ItemDepartmentClass> DeleteItemDepartment(int LoggedUser, int Id)
        {
            ResultClass<ItemDepartmentClass> result = new ResultClass<ItemDepartmentClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteItemDepartment";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemDepartmentClass itemDepartment;
                        reader.Read();
                        itemDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);

                        itemDepartment.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemDepartment;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteItemDepartment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Days")]
        public ResultClass<List<DayClass>> GetDays(int? Id)
        {
            ResultClass<List<DayClass>> result = new ResultClass<List<DayClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetDays";
                    List<SqlParameter> Params = new List<SqlParameter>();

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<DayClass> DayList = new List<DayClass>();
                        DayClass day;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            day = new DayClass().PopulateDay(fieldNames, reader);

                            day.Order = order;
                            DayList.Add(day);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = DayList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "GetJob", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ItemBookings")]
        public ResultClass<ItemBookingClass> CreateItemBooking(int LoggedUser, ItemBookingClass ItemBooking)
        {
            ResultClass<ItemBookingClass> result = new ResultClass<ItemBookingClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertItemBooking";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemBooking.ItemId),
                  new SqlParameter("UserId", ItemBooking.UserId),
                  new SqlParameter("VisitDate", ItemBooking.VisitDate),
                  new SqlParameter("Note", ItemBooking.Note),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemBookingClass itemBooking;
                        reader.Read();
                        itemBooking = new ItemBookingClass().PopulateItemBooking(fieldNames, reader);

                        itemBooking.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemBooking;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemBooking", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemBookings")]
        public ResultClass<List<ItemBookingClass>> GetItemBookings(int? ItemId, int? UserId)
        {
            ResultClass<List<ItemBookingClass>> result = new ResultClass<List<ItemBookingClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemBookings";

                    if (ItemId > 0)
                        cmd.Parameters.Add(new SqlParameter("ItemId", ItemId));
                    if (UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemBookingClass> ItemBookingList = new List<ItemBookingClass>();
                        ItemBookingClass itembooking;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            itembooking = new ItemBookingClass().PopulateItemBooking(fieldNames, reader);

                            itembooking.Order = order;
                            ItemBookingList.Add(itembooking);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = ItemBookingList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetItemBookings", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ItemBookings")]
        public ResultClass<ItemBookingClass> CanceledItemBookings(int LoggedUser, int Id)
        {
            ResultClass<ItemBookingClass> result = new ResultClass<ItemBookingClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CanceledItemBooking";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemBookingClass itemBooking;
                        reader.Read();
                        itemBooking = new ItemBookingClass().PopulateItemBooking(fieldNames, reader);

                        itemBooking.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemBooking;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CanceledItemBookings", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemSeriesClass>> GetItemColorsSizesSeries(int LoggedUser, int ItemId)
        {
            ResultClass <List<ItemSeriesClass>> result = new ResultClass<List<ItemSeriesClass>> ();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetItemColorsSizesSeries";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("ItemId", ItemId),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ItemSeriesClass> itemSeriesList = new List<ItemSeriesClass>(); 
                        int order = 0;
                        ItemSeriesClass itemSeries;
                        while (reader.Read())
                        {
                            order = order + 1;
                            itemSeries = new ItemSeriesClass().PopulateItemSeries(fieldNames, reader);

                            itemSeries.Order = order;

                            itemSeriesList.Add(itemSeries);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemSeriesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetItemColorsSizesSeries", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        // Complaints
        [SwaggerWcfTag("Complaints")]
        public ResultClass<ComplaintDataClass> GetComplaint(int Id)
        {
            ResultClass<ComplaintDataClass> result = new ResultClass<ComplaintDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCompalints";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        result.Result = new ComplaintDataClass();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ComplaintClass complaint;
                        reader.Read();
                        complaint = new ComplaintClass().PopulateComplaint(fieldNames, reader);

                        complaint.Order = 1;
                        //result.Result.Complaint = new ComplaintClass();
                        result.Result.Complaint = complaint;


                        if (reader.NextResult())
                        {
                            List<ComplaintClass> CommentList = new List<ComplaintClass>();
                            ComplaintClass Comment;

                            if (reader.HasRows)
                            {
                                int Order = 0;

                                while (reader.Read())
                                {
                                    Comment = new ComplaintClass().PopulateComplaint(fieldNames, reader);
                                    Comment.Order = Order + 1;
                                    CommentList.Add(Comment);
                                }

                                result.Result.Comments = CommentList;
                            }
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Complaints")]
        public ResultClass<List<ComplaintClass>> GetComplaints(int? UserId)
        {
            ResultClass<List<ComplaintClass>> result = new ResultClass<List<ComplaintClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCompalints";


                    if (UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", UserId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ComplaintClass> complaintList = new List<ComplaintClass>();
                        ComplaintClass complaint;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            complaint = new ComplaintClass().PopulateComplaint(fieldNames, reader);

                            complaint.Order = order;
                            complaintList.Add(complaint);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = complaintList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetComplaints", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Complaints")]
        public ResultClass<ComplaintClass> CreateComplaint(int LoggedUser, ComplaintClass Complaint)
        {
            ResultClass<ComplaintClass> result = new ResultClass<ComplaintClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertComplaint";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("IsComment", Complaint.IsComment),
                  new SqlParameter("ParentId", Complaint.ParentId),
                   new SqlParameter("UserId", Complaint.UserId),

                  new SqlParameter("ReferenceId", Complaint.ReferenceId),
                  new SqlParameter("Description", Complaint.Description),
                  new SqlParameter("ImageURL", Complaint.ImageURL),

                  new SqlParameter("ClosingDate", Complaint.ClosingDate),

               };
                    if (Complaint.Date != null)
                        if (Complaint.Date != "")
                            Params.Add(new SqlParameter("Date", Complaint.Date));

                    if (Complaint.ComplaintTypeId > 0)
                        Params.Add(new SqlParameter("ComplaintTypeId", Complaint.ComplaintTypeId));

                    if (Complaint.ComplaintStatusId > 0)
                        Params.Add(new SqlParameter("ComplaintStatusId", Complaint.ComplaintStatusId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ComplaintClass complaintRes;
                        reader.Read();
                        complaintRes = new ComplaintClass().PopulateComplaint(fieldNames, reader);

                        complaintRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = complaintRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateComplaint", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Complaints")]
        public ResultClass<ComplaintClass> UpdateComplaint(int LoggedUser, ComplaintClass Complaint)
        {
            ResultClass<ComplaintClass> result = new ResultClass<ComplaintClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateComplaint";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Complaint.Id),
                  new SqlParameter("IsComment", Complaint.IsComment),
                  new SqlParameter("ParentId", Complaint.ParentId),
                   new SqlParameter("UserId", Complaint.UserId),
                  new SqlParameter("ComplaintTypeId", Complaint.ComplaintTypeId),
                  new SqlParameter("ComplaintStatusId", Complaint.ComplaintStatusId),
                  new SqlParameter("ReferenceId", Complaint.ReferenceId),
                  new SqlParameter("Description", Complaint.Description),
                  new SqlParameter("ImageURL", Complaint.ImageURL),
                  new SqlParameter("Date", Complaint.Date),
                  new SqlParameter("ClosingDate", Complaint.ClosingDate),

               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ComplaintClass complaintRes;
                        reader.Read();
                        complaintRes = new ComplaintClass().PopulateComplaint(fieldNames, reader);

                        complaintRes.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = complaintRes;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateComplaint", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Complaints")]
        public ResultClass<ComplaintClass> DeleteComplaint(int LoggedUser, int Id)
        {
            ResultClass<ComplaintClass> result = new ResultClass<ComplaintClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteComplaint";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        ComplaintClass complaint;
                        reader.Read();
                        complaint = new ComplaintClass().PopulateComplaint(fieldNames, reader);

                        complaint.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = complaint;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteComplaint", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Complaints")]
        public ResultClass<ComplaintClass> CloseComplaint(int LoggedUser, int Id)
        {
            ResultClass<ComplaintClass> result = new ResultClass<ComplaintClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CloseComplaint";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("Id", Id),
                          new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                       };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        ComplaintClass complaint;
                        reader.Read();
                        complaint = new ComplaintClass().PopulateComplaint(fieldNames, reader);

                        complaint.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = complaint;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteComplaint", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Orders")]
        public ResultClass<List<OrderClass>> GetDeliveryOrders(int LoggedUser)
        {
            ResultClass<List<OrderClass>> result = new ResultClass<List<OrderClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetDeliveryOrders";
                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<OrderClass> Orders = new List<OrderClass>();
                        OrderClass id;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;
                            id = new OrderClass().PopulateOrderClass(fieldNames, reader);

                            id.Order = order;
                            Orders.Add(id);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Orders;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetDeliveryOrders", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<bool> UpdateOrderStatusByDeliveryUser(int DeliveryUserId, int OrderId, int OrderStatusId, string DeliveryNote)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateOrderStatusByDeliveryUser";
                    List<SqlParameter> Params = new List<SqlParameter>
                    {
                        //string Password = FormsAuthentication.HashPasswordForStoringInConfigFile(UserPassword.Password, "MD5");
                        new SqlParameter("DeliveryUserId", DeliveryUserId),
                        new SqlParameter("OrderId", OrderId),
                        new SqlParameter("OrderStatusId", OrderStatusId),
                        new SqlParameter("DeliveryNote", DeliveryNote)
                    };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();

                    /*Update Token*/
                    //Add Token To Db
                    //new TokenBuilder().UpdateToken(UserPassword.UserId, new UserClass { Id = UserPassword.UserId, AccessToken = "dummy" });

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "UpdateOrderStatusByDeliveryUser", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }

        [SwaggerWcfTag("Rating")]
        public ResultClass<RatingClass> CreateRating(int LoggedUser, RatingClass Rating)
        {
            ResultClass<RatingClass> result = new ResultClass<RatingClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertRating";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", Rating.UserId),
                  new SqlParameter("ReferenceId", Rating.ReferenceId),
                  new SqlParameter("RatingValue", Rating.RatingValue),
                  new SqlParameter("RatingTypeId", Rating.RatingTypeId),

               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        RatingClass newRating;
                        reader.Read();
                        newRating = new RatingClass().PopulateRating(fieldNames, reader);

                        newRating.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = newRating;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateRating", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Login")]
        public ResultClass<string> GetFirebaseToken()
        {
            ResultClass<string> result = new ResultClass<string>();
            try
            {
                int LoggedUser = Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"]);
                bool IsDeliveryUser = Convert.ToBoolean(HttpContext.Current.Request.Headers["IsDeliveryUser"]);

                var additionalClaims = new Dictionary<string, object>();

                if (IsDeliveryUser)
                {
                    var dbUser = GetUser(LoggedUser, LoggedUser, true);
                    if (dbUser.Code == Errors.Success && dbUser.Result != null)
                    {
                        additionalClaims.Add("clientAccount", true);
                    }
                    else
                    {
                        result.Code = Errors.DataValidationError;
                        result.Message = Errors.GetErrorMessage(result.Code);
                        result.Result = null;
                        return result;
                    }
                }
                else
                {
                    var dbUser = GetUser(LoggedUser, LoggedUser, false);

                    if (dbUser.Code == Errors.Success && dbUser.Result != null)
                    {
                        if (dbUser.Result.UserType == 1 ||
                            dbUser.Result.UserType == 2)
                        {
                            additionalClaims.Add("adminAccount", true);
                        }
                        //else if (dbUser.Result.UserType == (int)UserType.Amel)
                        //{
                        //    additionalClaims.Add("clientAccount", true);
                        //}
                    }
                    else
                    {
                        result.Code = Errors.DataValidationError;
                        result.Message = Errors.GetErrorMessage(result.Code);
                        result.Result = null;
                        return result;
                    }
                }

                Task<string> taskResult = Task.Run(() =>
                 FirebaseUtilityHelper.GenerateFirebaseTokenAsync(LoggedUser.ToString(), additionalClaims));


                result.Code = Errors.Success;
                result.Result = taskResult.Result;
                return result;
            }

            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetFirebaseToken", e.Source, "");
                    Errors.LogError(0, e.InnerException.Message, e.StackTrace, "1.0.3", "API", "GetFirebaseToken2", e.Source, "");
                    Errors.LogError(0, e.InnerException.InnerException.Message, e.StackTrace, "1.0.3", "API", "GetFirebaseToken3", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        // UserAddresses
        [SwaggerWcfTag("UserAddresses")]
        public ResultClass<UserAddressClass> GetUserAddress(int Id)
        {
            ResultClass<UserAddressClass> result = new ResultClass<UserAddressClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsersAddresses";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserAddressClass userAddress;
                        reader.Read();
                        userAddress = new UserAddressClass().PopulateUserAddress(fieldNames, reader);

                        userAddress.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userAddress;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserAddress", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserAddresses")]
        public ResultClass<List<UserAddressClass>> GetUserAddresses(int? UserId)
        {
            ResultClass<List<UserAddressClass>> result = new ResultClass<List<UserAddressClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsersAddresses";

                    if (UserId > 0)
                        cmd.Parameters.Add(new SqlParameter("UserId", UserId));


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UserAddressClass> userAddressList = new List<UserAddressClass>();
                        UserAddressClass userAddress;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            userAddress = new UserAddressClass().PopulateUserAddress(fieldNames, reader);

                            userAddress.Order = order;
                            userAddressList.Add(userAddress);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userAddressList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserAddresses", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserAddresses")]
        public ResultClass<UserAddressClass> CreateUserAddress(int LoggedUser, UserAddressClass UserAddress)
        {
            ResultClass<UserAddressClass> result = new ResultClass<UserAddressClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUserAddress";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", UserAddress.UserId),
                  new SqlParameter("AddressName", UserAddress.AddressName),
                  new SqlParameter("AddressDescription", UserAddress.AddressDescription),
                  new SqlParameter("Latitude", UserAddress.Latitude),
                  new SqlParameter("Longitude", UserAddress.Longitude),

                  new SqlParameter("BlockNo", UserAddress.BlockNo),
                  new SqlParameter("Street", UserAddress.Street),
                  new SqlParameter("Building", UserAddress.Building),
                  new SqlParameter("Floor", UserAddress.Floor),
                  new SqlParameter("ApartmentNo", UserAddress.ApartmentNo),
                  new SqlParameter("AddressNote", UserAddress.AddressNote),

               };

                    if (UserAddress.CountryId > 0)
                        Params.Add(new SqlParameter("CountryId", UserAddress.CountryId));

                    if (UserAddress.GovernorateId > 0)
                        Params.Add(new SqlParameter("GovernorateId", UserAddress.GovernorateId));

                    if (UserAddress.CityId > 0)
                        Params.Add(new SqlParameter("CityId", UserAddress.CityId));

                    if (UserAddress.LocationId > 0)
                        Params.Add(new SqlParameter("LocationId", UserAddress.LocationId));

                    cmd.Parameters.AddRange(Params.ToArray());


                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserAddressClass userAddress;
                        reader.Read();
                        userAddress = new UserAddressClass().PopulateUserAddress(fieldNames, reader);

                        userAddress.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userAddress;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateUserAddress", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserAddresses")]
        public ResultClass<UserAddressClass> UpdateUserAddress(int LoggedUser, UserAddressClass UserAddress)
        {
            ResultClass<UserAddressClass> result = new ResultClass<UserAddressClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateUserAddress";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", UserAddress.Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("UserId", UserAddress.UserId),
                  new SqlParameter("AddressName", UserAddress.AddressName),
                  new SqlParameter("AddressDescription", UserAddress.AddressDescription),
                  new SqlParameter("Latitude", UserAddress.Latitude),
                  new SqlParameter("Longitude", UserAddress.Longitude),

                  new SqlParameter("BlockNo", UserAddress.BlockNo),
                  new SqlParameter("Street", UserAddress.Street),
                  new SqlParameter("Building", UserAddress.Building),
                  new SqlParameter("Floor", UserAddress.Floor),
                  new SqlParameter("ApartmentNo", UserAddress.ApartmentNo),
                  new SqlParameter("AddressNote", UserAddress.AddressNote),
               };

                    if (UserAddress.CountryId > 0)
                        Params.Add(new SqlParameter("CountryId", UserAddress.CountryId));

                    if (UserAddress.GovernorateId > 0)
                        Params.Add(new SqlParameter("GovernorateId", UserAddress.GovernorateId));

                    if (UserAddress.CityId > 0)
                        Params.Add(new SqlParameter("CityId", UserAddress.CityId));

                    if (UserAddress.LocationId > 0)
                        Params.Add(new SqlParameter("LocationId", UserAddress.LocationId));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        UserAddressClass userAddress;
                        reader.Read();
                        userAddress = new UserAddressClass().PopulateUserAddress(fieldNames, reader);

                        userAddress.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = userAddress;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateUserAddress", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserAddresses")]
        public ResultClass<UserAddressClass> DeleteUserAddress(int LoggedUser, int Id)
        {
            ResultClass<UserAddressClass> result = new ResultClass<UserAddressClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUserAddress";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        UserAddressClass uasrAddress;
                        reader.Read();
                        uasrAddress = new UserAddressClass().PopulateUserAddress(fieldNames, reader);

                        uasrAddress.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = uasrAddress;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUserAddress", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        public ResultClass<List<FloProductDetailClass>> ImportFromFlo(int CategoryId, int GenderId)
        {
            ResultClass<List<FloProductDetailClass>> result = new ResultClass<List<FloProductDetailClass>>();

            string baseURL = @"https://www.flo.com.tr/webservice/v1/";
            Flo_ProductClass product = new Flo_ProductClass();

            string fullProductsURL = baseURL  + "products.json?categoryId=" + Convert.ToString(CategoryId) + "&genderId=" + Convert.ToString(GenderId);
            WebRequest request = WebRequest.Create(fullProductsURL);
            request.Method = "GET";

            WebResponse response = request.GetResponse();
            StreamReader Reader = new StreamReader(response.GetResponseStream());
            string categories = Reader.ReadToEnd();

            FloProductsClass products = JsonConvert.DeserializeObject<FloProductsClass>(categories);
            
            List<FloProductDetailClass> prods = new List<FloProductDetailClass>();

            int TotalCount = products.totalResultCount;
            int totalPagesCount = 10;//TotalCount / 20;

            for (int i = 1; i <= totalPagesCount; i++)
            {

                product = new Flo_ProductClass();

                fullProductsURL = baseURL + "products.json?page="+Convert.ToString(i)+"categoryId=" + Convert.ToString(CategoryId) + "&genderId=" + Convert.ToString(GenderId);
                WebRequest drequest = WebRequest.Create(fullProductsURL);
                drequest.Method = "GET";

                WebResponse dresponse = drequest.GetResponse();
                StreamReader dReader = new StreamReader(dresponse.GetResponseStream());
                categories = dReader.ReadToEnd();

                FloProductsClass dproducts = JsonConvert.DeserializeObject<FloProductsClass>(categories);                

                foreach (var item in dproducts.products)
                {
                    string fullProductDetailsURL = baseURL + "productDetail.json?sku=" + item.sku;

                    WebRequest detailsRequest = WebRequest.Create(fullProductDetailsURL);
                    detailsRequest.Method = "GET";

                    WebResponse detailsResponse = detailsRequest.GetResponse();
                    StreamReader detailsReader = new StreamReader(detailsResponse.GetResponseStream());
                    string itemdetails = detailsReader.ReadToEnd();

                    FloProductDetailClass productDetails = JsonConvert.DeserializeObject<FloProductDetailClass>(itemdetails);

                    prods.Add(productDetails);
                }

                //Get Shoes Sizes = Group Id = 17
                List<SizeClass> Sizes = GetSizes(17).Result;

                List<ColorClass> Colors = GetColors().Result;

                List<BrandClass> Brands = GetBrands().Result;
                
                foreach (var item in prods)
                {
                    
                    List<ItemSizeClass> itemSizes = new List<ItemSizeClass>();
                    foreach (var sz in item.productModel.sizes)
                    {
                        int SizeId = 0;
                        var foundS = Sizes.Where(s => s.Code == sz.value);
                        if ((foundS != null) && (foundS.Count() > 0))
                          SizeId = foundS.ToList()[0].Id;
                        else
                        {
                            SizeClass Size = new SizeClass();
                            Size.SizeGroupId = 17;
                            Size.Code = sz.value;
                            Size.ArabicName = sz.value;
                            Size.EnglishName = sz.value;
                            var newSize = CreateSize(7, Size).Result;
                            Sizes.Add(newSize);
                            SizeId = newSize.Id;
                        }

                        ItemSizeClass newItemSize = new ItemSizeClass();
                        newItemSize.SizeId = SizeId;
                        itemSizes.Add(newItemSize);
                    }

                    List<ItemColorClass> itemColors = new List<ItemColorClass>();
                    foreach (var cl in item.productModel.options)
                    {
                        int ColorId = 0;
                        var foundC = Colors.Where(c => c.ArabicName == cl.color || c.EnglishName == cl.color);
                        if ((foundC != null) && (foundC.Count() > 0))
                            ColorId = foundC.ToList()[0].Id;
                        else
                        {
                            ColorClass Color = new ColorClass();
                            Color.Code = cl.color;
                            Color.ArabicName = cl.color;
                            Color.EnglishName = cl.color;
                            var newColor = CreateColor(7, Color).Result;
                            Colors.Add(newColor);
                            ColorId = newColor.Id;
                        }

                        ItemColorClass newItemColor = new ItemColorClass();
                        newItemColor.ColorId = ColorId;
                        itemColors.Add(newItemColor);
                    }

                    var Marka = item.productModel.descriptionFields.Where(x => x.title == "Marka");
                    var MarkaValue = Marka.ToList()[0].value;
                    int BrandId;
                    var foundB = Brands.Where(b => b.ArabicName == MarkaValue || b.EnglishName == MarkaValue);
                    if ((foundB != null) && (foundB.Count() > 0))
                        BrandId = foundB.ToList()[0].Id;
                    else
                    {
                        BrandClass Brand = new BrandClass();
                        Brand.Code = MarkaValue;
                        Brand.ArabicName = MarkaValue;
                        Brand.EnglishName = MarkaValue;
                        var newBrand = CreateBrand(7, Brand).Result;
                        Brands.Add(newBrand);
                        BrandId = newBrand.Id;
                    }

                    List<ItemImageClass> itemImages = new List<ItemImageClass>();
                    foreach (var img in item.productModel.images)
                    {
                        ItemImageClass itemImage = new ItemImageClass();
                        itemImage.ImageUrl = img;
                        itemImages.Add(itemImage);
                    }

                    int ItemDepartmentId = 6;
                    int ItemTypeId = 70;
                    int CountryId = 16;
                    int PriceTypeId = 1;
                    int CatId = 2087;
                    int CountryCurrencyId = 4;
                    double Price = item.productModel.price;

                    List<ItemPriceClass> itemPrices = new List<ItemPriceClass>();
                    ItemPriceClass itemPrice = new ItemPriceClass();
                    itemPrice.CountryCurrencyId = CountryCurrencyId;
                    itemPrice.TypeId = PriceTypeId;
                    itemPrice.Price = Price.ToString();
                    itemPrices.Add(itemPrice);

                    ItemClass itm = new ItemClass();
                    itm.ArabicName = item.productModel.name;
                    itm.EnglishName = item.productModel.name;
                    itm.Code = item.productModel.sku;
                    itm.ImageURL = item.productModel.images[0];
                    itm.BrandId = BrandId;
                    itm.DefaultPriceTypeId = PriceTypeId;
                    itm.CategoryId = CatId;
                    itm.CountryId = CountryId;
                    itm.ItemTypeId = ItemTypeId;
                    itm.ItemDepartmentId = ItemDepartmentId;
                    itm.CreatedBy = 7;
                    itm.CreateDate = "2019-11-11";

                    //CreateOrUpdateItemData(7, itm, null, null, null, item.productModel.images, itemColors, itemSizes, itemPrices, null, null, null);

                }

            }
            result.Result = prods;
            return result;
        }

        public ResultClass<ProductList> GetWooCommerceProducts()
        {
            ResultClass<ProductList> result = new ResultClass<ProductList>();
            try
            {
                //WoocommerceClass woo = new WoocommerceClass();
                //var products = woo.GetAllProducts();                
                result.Result = null;//products.Result;
                return result;
            }
            catch (Exception e)
            {
                result.Code = -1;
                result.Message = e.Message;
                result.Result = null;
                return result;
            }
        }

        public ResultClass<string>  AddWooCommerceProduct(int ItemId) 
        {
            ResultClass<string> result = new ResultClass<string>();
            try
            {
                WoocommerceClass woo = new WoocommerceClass();
                woo.AddProduct(GetItemData(7, ItemId).Result).ContinueWith(OnMyAsyncMethodFailed, TaskContinuationOptions.OnlyOnFaulted);
                return result;
            }
            catch (Exception e)
            {
                result.Code = -1;
                result.Message = e.Message;
                result.Result = "";
                return result;
            }
        }

        public ResultClass<string> AddAllWooCommerceProducts(int LoggedUser)
        {
            ResultClass<string> result = new ResultClass<string>();
            try
            {
                WoocommerceClass woo = new WoocommerceClass();
                woo.AsyncAllProducts(GetItems(LoggedUser,-1,1,99999,false,false).Result).ContinueWith(OnMyAsyncMethodFailed, TaskContinuationOptions.OnlyOnFaulted);
                return result;
            }
            catch (Exception e)
            {
                result.Code = -1;
                result.Message = e.Message;
                result.Result = "";
                return result;
            }
        }

        public static void OnMyAsyncMethodFailed(Task task)
        {
            Exception ex = task.Exception;
            // Deal with exceptions here however you want
        }


        [SwaggerWcfTag("Offers")]
        public ResultClass<List<ResultClass<OffersDetailDataClass>>> CreateOfferDetailsFromExcel(int LoggedUser, int OfferId, string Url)
        {
            ResultClass<List<ResultClass<OffersDetailDataClass>>> result = new ResultClass<List<ResultClass<OffersDetailDataClass>>>();
            try
            {
                //Sheets name
                string offerDetailsWorksheetName = "تفاصيل العرض";

                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@" / ", @"\");

                byte[] file = File.ReadAllBytes(@filePath);
                MemoryStream ms = new MemoryStream(file);
                var package = new ExcelPackage(ms);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                ExcelWorksheet OfferDetailsWorkSheet = package.Workbook.Worksheets[offerDetailsWorksheetName];

                //Get Item Columns
                string ItemCodeAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "رمز المادة");
                string OfferPriceAddess = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "سعر العرض");
                string OfferPointsAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "نقاط العرض");
                string OfferGrantedPointsAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "النقاط الممنوحة");
                string CurrencyAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "العملة");
                string CountryAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "البلد");
                string PriceTypeAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "نوع السعر");
                string SizeGroupAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "مسطرة القياس");
                string SizeAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "القياس");
                string ColorAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "اللون");
                string IsSpecialOfferAddress = ServiceMethod.GetExcelCellByValue(OfferDetailsWorkSheet, "عرض مميز");

                //Fetch Item Data Tables
                var ItemsTbl = db.ItemsTbl.ToList();
                var CountriesTbl = db.CountriesTbl.ToList();
                var CurrenciesTbl = db.CurrenciesTbl.ToList();
                var CountryCurrenciesTbl = db.CountryCurrenciesTbl.ToList();
                var PriceTypesTbl = db.PriceTypesTbl.ToList();
                var SizesGroupsTbl = db.SizesGroupsTbl.ToList();
                var SizesTbl = db.SizesTbl.ToList();
                var ColorsTbl = db.ColorsTbl.ToList();
                List<ResultClass<OffersDetailDataClass>> offerDetailDataList = new List<ResultClass<OffersDetailDataClass>>();
                OfferDetailForExcelClass newOfferDetail;
                int firstRow = 2;
                if (OfferDetailsWorkSheet != null)
                {
                    for (int i = firstRow; i <= OfferDetailsWorkSheet.Dimension.End.Row; i++)
                    {

                        newOfferDetail = new OfferDetailForExcelClass();

                        newOfferDetail.OfferPrice = OfferDetailsWorkSheet.Cells[OfferPriceAddess + i.ToString()]?.Value?.ToString();

                        string itemCellValue = OfferDetailsWorkSheet.Cells[ItemCodeAddress + i.ToString()]?.Value?.ToString();
                        int itemId = ItemsTbl.Where(x => x.Code.Equals(itemCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newOfferDetail.ItemId = itemId;

                        string countryCellValue = OfferDetailsWorkSheet.Cells[CountryAddress + i.ToString()]?.Value?.ToString();
                        int countryId = CountriesTbl.Where(x => x.ArabicName.Equals(countryCellValue.Trim()) || x.EnglishName.Equals(countryCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newOfferDetail.CountryId = countryId;

                        string currencyCellValue = OfferDetailsWorkSheet.Cells[CurrencyAddress + i.ToString()]?.Value?.ToString();
                        int currencyId = CurrenciesTbl.Where(x => x.ArabicName.Equals(currencyCellValue.Trim()) || x.EnglishName.Equals(currencyCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newOfferDetail.CurrencyId = currencyId;

                        string priceTypeCellValue = OfferDetailsWorkSheet.Cells[PriceTypeAddress + i.ToString()]?.Value?.ToString();
                        int priceTypeId = PriceTypesTbl.Where(x => x.ArabicName.Equals(priceTypeCellValue.Trim()) || x.EnglishName.Equals(priceTypeCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newOfferDetail.PriceTypeId = priceTypeId;

                        int countryCurrencyId = CountryCurrenciesTbl.Where(x => x.CountryId.Equals(countryId) && x.CurrencyId.Equals(currencyId)).Select(x => x.Id).FirstOrDefault();
                        newOfferDetail.CountryCurrencyId = countryCurrencyId;

                        newOfferDetail.IsSpecialOffer = (OfferDetailsWorkSheet.Cells[IsSpecialOfferAddress + i.ToString()]?.Value?.ToString() == "نعم") ? true : false;
                         
                        int sizeGroupId = 0;
                        string sizeGroupCellValue = OfferDetailsWorkSheet.Cells[SizeGroupAddress + i.ToString()]?.Value?.ToString();
                        if (sizeGroupCellValue != null)
                        {
                            sizeGroupId = SizesGroupsTbl.Where(x => x.ArabicName.Equals(sizeGroupCellValue.Trim()) || x.EnglishName.Equals(sizeGroupCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                            newOfferDetail.SizeGroupId = sizeGroupId;
                        }

                        if (sizeGroupId > 0)
                        {
                            int sizeId;
                            string sizeCellValue = OfferDetailsWorkSheet.Cells[SizeAddress + i.ToString()]?.Value?.ToString();
                            if (sizeCellValue != null)
                            {
                                sizeId = SizesTbl.Where(x => (x.SizeGroupId == sizeGroupId) && (x.ArabicName.Equals(sizeCellValue.Trim()) || x.EnglishName.Equals(sizeCellValue.Trim()) || x.Code.Equals(sizeCellValue.Trim()))).Select(x => x.Id).FirstOrDefault();
                                newOfferDetail.SizeId = sizeId;
                            }
                        }

                        int colorId;
                        string colorCellValue = OfferDetailsWorkSheet.Cells[ColorAddress + i.ToString()]?.Value?.ToString();
                        if (colorCellValue != null)
                        {
                            colorId = ColorsTbl.Where(x => x.ArabicName.Equals(colorCellValue.Trim()) || x.EnglishName.Equals(colorCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                            newOfferDetail.ColorId = colorId;
                        }

                        OffersDetailDataClass odd = new OffersDetailDataClass();
                        odd.OffersDetail = new OffersDetailClass();
                        odd.Prices = new List<OfferDetailPriceClass>();


                        odd.OffersDetail.OfferId = OfferId;
                        odd.OffersDetail.ItemId = newOfferDetail.ItemId;
                        odd.OffersDetail.ColorId = newOfferDetail.ColorId;
                        odd.OffersDetail.SizeId = newOfferDetail.SizeId;

                        if (newOfferDetail.OfferPrice != null)
                            odd.OffersDetail.HasPriceOffer = (newOfferDetail.OfferPrice.Trim() != "");
                        else
                            odd.OffersDetail.HasPriceOffer = false;
                        

                        odd.OffersDetail.Disabled = false;
                        odd.OffersDetail.CreatedBy = LoggedUser;
                        odd.OffersDetail.HasInitQuantity = false;

                        if (odd.OffersDetail.HasPriceOffer)
                        {
                            OfferDetailPriceClass odp = new OfferDetailPriceClass();
                            odp.CountryCurrencyId = countryCurrencyId;
                            odp.CountryId = countryId;
                            odp.TypeId = priceTypeId;
                            odp.Price = newOfferDetail.OfferPrice;
                            odp.RequiredPoints = Convert.ToInt32(newOfferDetail.OfferGrantedPoints);
                            odp.GrantedPoints = Convert.ToInt32(newOfferDetail.OfferPoints);
                            odp.IsSpecialOffer = newOfferDetail.IsSpecialOffer;
                            odd.Prices.Add(odp);
                            
                        }

                        ResultClass<OffersDetailDataClass> offerDetailData = CreateOfferDetailData(LoggedUser, odd);


                        offerDetailDataList.Add(offerDetailData);
                    }
                }

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = offerDetailDataList;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "CreateOfferDetailsFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Items")]
        public ResultClass<ItemSerialClass> ScanItemSerial(int LoggedUser, string Serial, string Code)
        {
            ResultClass<ItemSerialClass> result = new ResultClass<ItemSerialClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ScanItemSerial";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Serial", Serial),
                  new SqlParameter("Code", Code),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemSerialClass itemSerial;
                        reader.Read();
                        itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);

                        itemSerial.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemSerial;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "ScanItemSerial", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Maintenance Tickets")]
        public ResultClass<MaintenanceTicketClass> CreateMaintenanceTicket(int LoggedUser, MaintenanceTicketClass MaintenanceTicket)
        {
            ResultClass<MaintenanceTicketClass> result = new ResultClass<MaintenanceTicketClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertMaintenanceTicket";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("StatusId", MaintenanceTicket.StatusId),
                  new SqlParameter("Notes", MaintenanceTicket.Notes),
                  new SqlParameter("Description", MaintenanceTicket.Description),
                  new SqlParameter("Address", MaintenanceTicket.Address),
                  new SqlParameter("ImageURL", MaintenanceTicket.ImageURL),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        MaintenanceTicketClass maintenanceTicket;
                        reader.Read();
                        maintenanceTicket = new MaintenanceTicketClass().PopulateClass(fieldNames, reader);

                        maintenanceTicket.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = maintenanceTicket;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateMaintenanceTicket", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Maintenance Tickets")]
        public ResultClass<MaintenanceTicketClass> UpdateMaintenanceTicket(int LoggedUser, MaintenanceTicketClass MaintenanceTicket)
        {
            ResultClass<MaintenanceTicketClass> result = new ResultClass<MaintenanceTicketClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateMaintenanceTicket";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", MaintenanceTicket.Id),
                  new SqlParameter("StatusId", MaintenanceTicket.StatusId),
                  new SqlParameter("Notes", MaintenanceTicket.Notes),
                  new SqlParameter("Description", MaintenanceTicket.Description),
                  new SqlParameter("Address", MaintenanceTicket.Address),
                  new SqlParameter("ImageURL", MaintenanceTicket.ImageURL),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        MaintenanceTicketClass maintenanceTicket;
                        reader.Read();
                        maintenanceTicket = new MaintenanceTicketClass().PopulateClass(fieldNames, reader);

                        maintenanceTicket.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = maintenanceTicket;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateMaintenanceTicket", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Maintenance Tickets")]
        public ResultClass<MaintenanceTicketClass> DeleteMaintenanceTicket(int LoggedUser, int Id)
        {
            ResultClass<MaintenanceTicketClass> result = new ResultClass<MaintenanceTicketClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteMaintenanceTicket";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        MaintenanceTicketClass maintenanceTicket;
                        reader.Read();
                        maintenanceTicket = new MaintenanceTicketClass().PopulateClass(fieldNames, reader);

                        maintenanceTicket.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = maintenanceTicket;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteMaintenanceTicket", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Maintenance Tickets")]
        public ResultClass<List<MaintenanceTicketClass>> GetMaintenanceTickets(int LoggedUser, int Id)
        {
            ResultClass<List<MaintenanceTicketClass>> result = new ResultClass<List<MaintenanceTicketClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetMaintenanceTicket";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<MaintenanceTicketClass> maintenanceTicketList = new List<MaintenanceTicketClass>();

                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        int order = 0;
                        MaintenanceTicketClass maintenanceTicket;
                        while (reader.Read())
                        {
                            order = order + 1;
                            maintenanceTicket = new MaintenanceTicketClass().PopulateClass(fieldNames, reader);
                            maintenanceTicket.Order = order;
                            maintenanceTicketList.Add(maintenanceTicket);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = maintenanceTicketList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new List<MaintenanceTicketClass>();
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetMaintenanceTickets", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Maintenance Tickets")]
        public ResultClass<List<MaintenanceStatusClass>> GetMaintenanceStatuses(int LoggedUser)
        {
            ResultClass<List<MaintenanceStatusClass>> result = new ResultClass<List<MaintenanceStatusClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetMaintenanceStatuses";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        List<MaintenanceStatusClass> maintenanceStatusList = new List<MaintenanceStatusClass>();

                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        int order = 0;
                        MaintenanceStatusClass maintenanceStatus;
                        while (reader.Read())
                        {
                            order = order + 1;
                            maintenanceStatus = new MaintenanceStatusClass().PopulateClass(fieldNames, reader);
                            maintenanceStatus.Order = order;
                            maintenanceStatusList.Add(maintenanceStatus);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = maintenanceStatusList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new List<MaintenanceStatusClass>();
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetMaintenanceStatuses", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Items")]
        public ResultClass<List<ItemSerialClass>> GetSerials(int LoggedUser, string Serial, List<int> UsersIds, 
            string FromDate, string ToDate, List<int> ItemsIds, int PageId, int RecordsCount, bool FilterByScanned, bool IsScanned, bool FilterByChecked, bool IsChecked)
        {
            ResultClass<List<ItemSerialClass>> result = new ResultClass<List<ItemSerialClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetSerials";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("RecordsCount", RecordsCount),
                  new SqlParameter("PageId", PageId),
                };

                    if (Serial != null)
                        if (Serial.Trim() != "")
                            Params.Add(new SqlParameter("Serial", Serial));
                    if (FromDate != null)
                        if (FromDate.Trim() != "")
                            Params.Add(new SqlParameter("FromDate", FromDate));
                    if (ToDate != null)
                        if (ToDate.Trim() != "")
                            Params.Add(new SqlParameter("ToDate", ToDate));

                    if (FilterByChecked)
                        Params.Add(new SqlParameter("IsChecked", IsChecked));

                    if (FilterByScanned)
                        Params.Add(new SqlParameter("IsScanned", IsScanned));

                    if (ItemsIds != null)
                    {
                        if (ItemsIds.Count > 0)
                        {
                            DataTable itemsTable;
                            using (itemsTable = new DataTable())
                            {
                                itemsTable.Columns.Add("Item", typeof(string));
                                foreach (int x in ItemsIds)
                                    itemsTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@ItemsIds", SqlDbType.Structured);
                            pList.Value = itemsTable;
                            Params.Add(pList);
                        }
                    }

                    if (UsersIds != null)
                    {
                        if (UsersIds.Count > 0)
                        {
                            DataTable usersTable;
                            using (usersTable = new DataTable())
                            {
                                usersTable.Columns.Add("Item", typeof(string));
                                foreach (int x in UsersIds)
                                    usersTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@UsersIds", SqlDbType.Structured);
                            pList.Value = usersTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ItemSerialClass> serialsList = new List<ItemSerialClass>();
                        ItemSerialClass itemSerial;
                        int order = 0;
                        while (reader.Read())
                        {
                            order = order + 1;
                            itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                            itemSerial.Order = order;
                            serialsList.Add(itemSerial);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = serialsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new List<ItemSerialClass>();
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        public ResultClass<List<ItemSerialClass>> CheckSerials(int LoggedUser, List<int> SerialsIds)
        {
            ResultClass<List<ItemSerialClass>> result = new ResultClass<List<ItemSerialClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_CheckSerials";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                };

                    if (SerialsIds != null)
                    {
                        if (SerialsIds.Count > 0)
                        {
                            DataTable serialsTable;
                            using (serialsTable = new DataTable())
                            {
                                serialsTable.Columns.Add("Item", typeof(string));
                                foreach (int x in SerialsIds)
                                    serialsTable.Rows.Add(x);
                            }
                            var pList = new SqlParameter("@SerialsIds", SqlDbType.Structured);
                            pList.Value = serialsTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        List<ItemSerialClass> serialsList = new List<ItemSerialClass>();
                        ItemSerialClass itemSerial;
                        int order = 0;
                        while (reader.Read())
                        {
                            order = order + 1;
                            itemSerial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);
                            itemSerial.Order = order;
                            serialsList.Add(itemSerial);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = serialsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new List<ItemSerialClass>();
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CheckSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Story")]
        public ResultClass<StoryClass> CreateStory(int LoggedUser, StoryClass Story)
        {
            ResultClass<StoryClass> result = new ResultClass<StoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertStory";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Story.TypeId > 0)
                        Params.Add(new SqlParameter("TypeId", Story.TypeId));
                    if (Story.ReferenceId > 0)
                        Params.Add(new SqlParameter("ReferenceId", Story.ReferenceId));
                    if (Story.ArabicTitle != null)
                        Params.Add(new SqlParameter("ArabicTitle", Story.ArabicTitle));
                    if (Story.EnglishTitle != null)
                        Params.Add(new SqlParameter("EnglishTitle", Story.EnglishTitle));
                    if (Story.StartDate != null)
                        Params.Add(new SqlParameter("StartDate", Story.StartDate));
                    if (Story.EndDate != null)
                        Params.Add(new SqlParameter("EndDate", Story.EndDate));
                    if (Story.ImageURL != null)
                        Params.Add(new SqlParameter("ImageURL", Story.ImageURL));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        StoryClass story;
                        reader.Read();
                        story = new StoryClass().PopulateStory(fieldNames, reader);

                        story.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = story;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateStory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryDataClass> CreateStoryData(int LoggedUser, StoryDataClass StoryData)
        {
            ResultClass<StoryDataClass> result = new ResultClass<StoryDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertStoryData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (StoryData.Story.TypeId > 0)
                        Params.Add(new SqlParameter("TypeId", StoryData.Story.TypeId));
                    if (StoryData.Story.ReferenceId > 0)
                        Params.Add(new SqlParameter("ReferenceId", StoryData.Story.ReferenceId));
                    if (StoryData.Story.ArabicTitle != null)
                        Params.Add(new SqlParameter("ArabicTitle", StoryData.Story.ArabicTitle));
                    if (StoryData.Story.EnglishTitle != null)
                        Params.Add(new SqlParameter("EnglishTitle", StoryData.Story.EnglishTitle));
                    if (StoryData.Story.StartDate != null)
                        Params.Add(new SqlParameter("StartDate", StoryData.Story.StartDate));
                    if (StoryData.Story.EndDate != null)
                        Params.Add(new SqlParameter("EndDate", StoryData.Story.EndDate));
                    if (StoryData.Story.ImageURL != null)
                        Params.Add(new SqlParameter("ImageURL", StoryData.Story.ImageURL));



                    //StoryDepartments
                    if (StoryData.StoryDepartments != null)
                    {
                        DataTable storyDepartmentsTable;
                        using (storyDepartmentsTable = new DataTable())
                        {
                            storyDepartmentsTable.Columns.Add("Item", typeof(string));
                            foreach (ItemDepartmentClass x in StoryData.StoryDepartments)
                                storyDepartmentsTable.Rows.Add(x.Id);
                        }
                        var CList = new SqlParameter("@StoryDepartments", SqlDbType.Structured);
                        CList.Value = storyDepartmentsTable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<ItemDepartmentClass> storyDepartmentList = new List<ItemDepartmentClass>();
                    StoryDataClass storyData = new StoryDataClass();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StoryClass story;
                        reader.Read();

                        order = order + 1;
                        story = new StoryClass().PopulateStory(fieldNames, reader);
                        story.Order = order;

                        ItemDepartmentClass storyDepartment = new ItemDepartmentClass();
                        order = 0;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    storyDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);
                                    storyDepartment.Order = order;
                                    storyDepartmentList.Add(storyDepartment);
                                }
                            }
                        }

                        storyData.Story = story;
                        storyData.StoryDepartments = storyDepartmentList;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateStoryData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryDataClass> UpdateStoryData(int LoggedUser, StoryDataClass StoryData)
        {
            ResultClass<StoryDataClass> result = new ResultClass<StoryDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateStoryData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };
                    Params.Add(new SqlParameter("Id", StoryData.Story.Id));

                    if (StoryData.Story.TypeId > 0)
                        Params.Add(new SqlParameter("TypeId", StoryData.Story.TypeId));
                    if (StoryData.Story.ReferenceId > 0)
                        Params.Add(new SqlParameter("ReferenceId", StoryData.Story.ReferenceId));
                    if (StoryData.Story.ArabicTitle != null)
                        Params.Add(new SqlParameter("ArabicTitle", StoryData.Story.ArabicTitle));
                    if (StoryData.Story.EnglishTitle != null)
                        Params.Add(new SqlParameter("EnglishTitle", StoryData.Story.EnglishTitle));
                    if (StoryData.Story.StartDate != null)
                        Params.Add(new SqlParameter("StartDate", StoryData.Story.StartDate));
                    if (StoryData.Story.EndDate != null)
                        Params.Add(new SqlParameter("EndDate", StoryData.Story.EndDate));
                    if (StoryData.Story.ImageURL != null)
                        Params.Add(new SqlParameter("ImageURL", StoryData.Story.ImageURL));



                    //StoryDepartments
                    if (StoryData.StoryDepartments != null)
                    {
                        DataTable storyDepartmentsTable;
                        using (storyDepartmentsTable = new DataTable())
                        {
                            storyDepartmentsTable.Columns.Add("Item", typeof(string));
                            foreach (ItemDepartmentClass x in StoryData.StoryDepartments)
                                storyDepartmentsTable.Rows.Add(x.Id);
                        }
                        var CList = new SqlParameter("@StoryDepartments", SqlDbType.Structured);
                        CList.Value = storyDepartmentsTable;
                        Params.Add(CList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<ItemDepartmentClass> storyDepartmentList = new List<ItemDepartmentClass>();
                    StoryDataClass storyData = new StoryDataClass();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StoryClass story;
                        reader.Read();

                        order = order + 1;
                        story = new StoryClass().PopulateStory(fieldNames, reader);
                        story.Order = order;

                        ItemDepartmentClass storyDepartment = new ItemDepartmentClass();
                        order = 0;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    storyDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);
                                    storyDepartment.Order = order;
                                    storyDepartmentList.Add(storyDepartment);
                                }
                            }
                        }

                        storyData.Story = story;
                        storyData.StoryDepartments = storyDepartmentList;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateStoryData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryClass> UpdateStory(int LoggedUser, StoryClass Story)
        {
            ResultClass<StoryClass> result = new ResultClass<StoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateStory";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("Id",Story.Id),

                  };

                    if (Story.TypeId > 0)
                        Params.Add(new SqlParameter("TypeId", Story.TypeId));
                    if (Story.ReferenceId > 0)
                        Params.Add(new SqlParameter("ReferenceId", Story.ReferenceId));
                    if (Story.ArabicTitle != null)
                        Params.Add(new SqlParameter("ArabicTitle", Story.ArabicTitle));
                    if (Story.EnglishTitle != null)
                        Params.Add(new SqlParameter("EnglishTitle", Story.EnglishTitle));
                    if (Story.StartDate != null)
                        Params.Add(new SqlParameter("StartDate", Story.StartDate));
                    if (Story.EndDate != null)
                        Params.Add(new SqlParameter("EndDate", Story.EndDate));
                    if (Story.ImageURL != null)
                        Params.Add(new SqlParameter("ImageURL", Story.ImageURL));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        StoryClass story;
                        reader.Read();
                        story = new StoryClass().PopulateStory(fieldNames, reader);

                        story.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = story;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateStory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryClass> DeleteStory(int LoggedUser, int Id)
        {
            ResultClass<StoryClass> result = new ResultClass<StoryClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteStory";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("Id", Id),

                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        StoryClass story;
                        reader.Read();
                        story = new StoryClass().PopulateStory(fieldNames, reader);

                        story.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = story;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteStory", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<List<StoryClass>> GetStories(int LoggedUser, int Id, int DepartmentId)
        {
            ResultClass<List<StoryClass>> result = new ResultClass<List<StoryClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStories";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (DepartmentId > 0)
                        Params.Add(new SqlParameter("DepartmentId", DepartmentId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StoryClass> storyList = new List<StoryClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;
                        
                        StoryClass story;
                        while (reader.Read())
                        {
                            order = order + 1;
                            story = new StoryClass().PopulateStory(fieldNames, reader);
                            story.Order = order;
                            storyList.Add(story);
                        }
                        
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStories", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryDataClass> GetStoryData(int LoggedUser, int Id)
        {
            ResultClass<StoryDataClass> result = new ResultClass<StoryDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStoryData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                        Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<ItemDepartmentClass> storyDepartmentList = new List<ItemDepartmentClass>();
                    StoryDataClass storyData = new StoryDataClass();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StoryClass story;
                        reader.Read();
                        
                        order = order + 1;
                        story = new StoryClass().PopulateStory(fieldNames, reader);
                        story.Order = order;

                        ItemDepartmentClass storyDepartment = new ItemDepartmentClass();
                        order = 0;

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    storyDepartment = new ItemDepartmentClass().PopulateItemDepartment(fieldNames, reader);
                                    storyDepartment.Order = order;
                                    storyDepartmentList.Add(storyDepartment);
                                }
                            }
                        }

                        storyData.Story = story;
                        storyData.StoryDepartments = storyDepartmentList;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStoryData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Story")]
        public ResultClass<StoryDetailClass> CreateStoryDetail(int LoggedUser, StoryDetailClass StoryDetail)
        {
            ResultClass<StoryDetailClass> result = new ResultClass<StoryDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertStoryDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("StoryId", StoryDetail.StoryId),
                     new SqlParameter("TypeId", StoryDetail.TypeId),
                     new SqlParameter("ReferenceId", StoryDetail.ReferenceId),
                  };

                    if (StoryDetail.ImageURL != null)
                        Params.Add(new SqlParameter("ImageURL", StoryDetail.ImageURL));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        StoryDetailClass storyDetail;
                        reader.Read();
                        storyDetail = new StoryDetailClass().PopulateStoryDetail(fieldNames, reader);

                        storyDetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyDetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateStoryDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryDetailClass> UpdateStoryDetail(int LoggedUser, StoryDetailClass StoryDetail)
        {
            ResultClass<StoryDetailClass> result = new ResultClass<StoryDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateStoryDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("Id", StoryDetail.Id),
                     new SqlParameter("StoryId", StoryDetail.StoryId),
                     new SqlParameter("TypeId", StoryDetail.TypeId),
                     new SqlParameter("ReferenceId", StoryDetail.ReferenceId),
                  };

                    if (StoryDetail.ImageURL != null)
                        Params.Add(new SqlParameter("ImageURL", StoryDetail.ImageURL));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        StoryDetailClass storyDetail;
                        reader.Read();
                        storyDetail = new StoryDetailClass().PopulateStoryDetail(fieldNames, reader);

                        storyDetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyDetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateStoryDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<StoryDetailClass> DeleteStoryDetail(int LoggedUser, int Id)
        {
            ResultClass<StoryDetailClass> result = new ResultClass<StoryDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteStoryDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("Id", Id),

                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        StoryDetailClass storyDetail;
                        reader.Read();
                        storyDetail = new StoryDetailClass().PopulateStoryDetail(fieldNames, reader);

                        storyDetail.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyDetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteStoryDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Story")]
        public ResultClass<List<StoryDetailClass>> GetStoryDetails(int LoggedUser, int Id, int StoryId)
        {
            ResultClass<List<StoryDetailClass>> result = new ResultClass<List<StoryDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStoryDetails";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (StoryId > 0)
                        Params.Add(new SqlParameter("StoryId", StoryId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StoryDetailClass> storyDetailList = new List<StoryDetailClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        int order = 0;

                        StoryDetailClass storyDetail;
                        while (reader.Read())
                        {
                            order = order + 1;
                            storyDetail = new StoryDetailClass().PopulateStoryDetail(fieldNames, reader);
                            storyDetail.Order = order;
                            storyDetailList.Add(storyDetail);
                        }

                        if (reader.NextResult())
                        {                            
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                while (reader.Read())
                                {
                                    StyleClass style = new StyleClass().PopulateStyle(fieldNames, reader);

                                    for (int i = 0; i <= storyDetailList.Count - 1; i++)
                                    {
                                        if (storyDetailList[i].Id == style.StoryDetailId)
                                        {
                                            storyDetailList[i].Style = style;
                                        }
                                    }
                                }
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyDetailList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = storyDetailList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStoryDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<List<StyleClass>> GetStyles(int LoggedUser, int Id, bool FilterByStyleType, int StyleTypeId, int DepartmentId)
        {
            ResultClass<List<StyleClass>> result = new ResultClass<List<StyleClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyles";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("DepartmentId", DepartmentId),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (FilterByStyleType)
                    {
                        if (StyleTypeId > 0)
                        {
                            Params.Add(new SqlParameter("FilterByStyleType", FilterByStyleType));
                            Params.Add(new SqlParameter("StyleTypeId", StyleTypeId));
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StyleClass> stylesList = new List<StyleClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StyleClass style;
                        while (reader.Read())
                        {
                            order = order + 1;
                            style = new StyleClass().PopulateStyle(fieldNames, reader);
                            style.Order = order;
                            stylesList.Add(style);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = stylesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = stylesList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStyles", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<List<StyleDetailClass>> GetStyleDetails(int LoggedUser, int Id, int StyleId)
        {
            ResultClass<List<StyleDetailClass>> result = new ResultClass<List<StyleDetailClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyleDetails";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (StyleId > 0)
                        Params.Add(new SqlParameter("StyleId", StyleId));
                    

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StyleDetailClass> styleDetailsList = new List<StyleDetailClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StyleDetailClass styleDetail;
                        while (reader.Read())
                        {
                            order = order + 1;
                            styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                            styleDetail.Order = order;
                            styleDetailsList.Add(styleDetail);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailsList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStyleDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<List<StyleDetailImageClass>> GetStyleDetailImages(int LoggedUser, int Id, int StyleId, int StyleDetailId)
        {
            ResultClass<List<StyleDetailImageClass>> result = new ResultClass<List<StyleDetailImageClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyleDetailImages";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (StyleId > 0)
                        Params.Add(new SqlParameter("StyleId", StyleId));

                    if (StyleDetailId > 0)
                        Params.Add(new SqlParameter("StyleDetailId", StyleDetailId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StyleDetailImageClass> styleDetailImagesList = new List<StyleDetailImageClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StyleDetailImageClass styleDetailImage;
                        while (reader.Read())
                        {
                            order = order + 1;
                            styleDetailImage = new StyleDetailImageClass().PopulateStyleDetailImage(fieldNames, reader);
                            styleDetailImage.Order = order;
                            styleDetailImagesList.Add(styleDetailImage);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailImagesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailImagesList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStyleDetailImages", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<List<StyleDetailItemClass>> GetStyleDetailItems(int LoggedUser, int Id, int StyleId, int StyleDetailId)
        {
            ResultClass<List<StyleDetailItemClass>> result = new ResultClass<List<StyleDetailItemClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyleDetailItems";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (StyleId > 0)
                        Params.Add(new SqlParameter("StyleId", StyleId));

                    if (StyleDetailId > 0)
                        Params.Add(new SqlParameter("StyleDetailId", StyleDetailId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StyleDetailItemClass> styleDetailItemsList = new List<StyleDetailItemClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        StyleDetailItemClass styleDetailItem;
                        while (reader.Read())
                        {
                            order = order + 1;
                            styleDetailItem = new StyleDetailItemClass().PopulateStyleDetailItem(fieldNames, reader);
                            styleDetailItem.Order = order;
                            styleDetailItemsList.Add(styleDetailItem);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailItemsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailItemsList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStyleDetailItems", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDetailDataClass> GetStyleDetailData(int LoggedUser, int Id)
        {
            ResultClass<StyleDetailDataClass> result = new ResultClass<StyleDetailDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {

                    try
                    {
                        int userId = (APITestingMode) ? 7 : Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"].ToString());
                        RecordUsageData(userId, Id, 10);
                    }
                    catch { }

                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyleDetailData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("Id", Id),
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleDetailClass styleDetail = new StyleDetailClass();
                    List<StyleDetailImageClass> styleDetailImagesList = new List<StyleDetailImageClass>();
                    List<StyleDetailItemClass> styleDetailItemsList = new List<StyleDetailItemClass>();
                    
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        reader.Read();
                        styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                        styleDetail.Order = 1;

                        int order = 0;


                        if (reader.NextResult())
                        {
                            order = 0;
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            StyleDetailImageClass styleDetailImage;
                            while (reader.Read())
                            {
                                order = order + 1;
                                styleDetailImage = new StyleDetailImageClass().PopulateStyleDetailImage(fieldNames, reader);
                                styleDetailImage.Order = order;
                                styleDetailImagesList.Add(styleDetailImage);
                            }
                        }

                        if (reader.NextResult())
                        {
                            order = 0;
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            StyleDetailItemClass styleDetailItem;
                            while (reader.Read())
                            {
                                order = order + 1;
                                styleDetailItem = new StyleDetailItemClass().PopulateStyleDetailItem(fieldNames, reader);
                                styleDetailItem.Order = order;
                                styleDetailItemsList.Add(styleDetailItem);
                            }
                        }

                        result.Result = new StyleDetailDataClass();
                        result.Result.StyleDetail = styleDetail;
                        result.Result.StyleDetailsItems = styleDetailItemsList;
                        result.Result.StyleDetailsImages = styleDetailImagesList;
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = new StyleDetailDataClass();
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStyleDetailData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDataClass> GetStyleData(int LoggedUser, int Id)
        {
            ResultClass<StyleDataClass> result = new ResultClass<StyleDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyleData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                   Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleDataClass styleData = new StyleDataClass();

                    List<StyleDetailDataClass> styleDetailDataClass = new List<StyleDetailDataClass>();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        StyleClass style;
                        reader.Read();
                        style = new StyleClass().PopulateStyle(fieldNames, reader);
                        style.Order = 1;
                        styleData.Style = style;
                        int Order = 0;
                        //Tags
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                List<StyleTagClass> styleTagsList = new List<StyleTagClass>();
                                StyleTagClass styleTag;
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleTag = new StyleTagClass().PopulateTag(fieldNames, reader);
                                    styleTag.Order = Order;
                                    styleTagsList.Add(styleTag);
                                }
                                styleData.StyleTags = styleTagsList;
                            }
                        }

                        List<StyleDetailClass> styleDetailsList = new List<StyleDetailClass>();
                        //Details
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                Order = 0;
                                StyleDetailClass styleDetail;
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                                    styleDetail.Order = Order;
                                    styleDetailsList.Add(styleDetail);
                                }
                            }
                        }

                        List<StyleDetailImageClass> styleDetailImagesList = new List<StyleDetailImageClass>();
                        //Images
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                Order = 0;       
                                StyleDetailImageClass styleDetailImage;
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleDetailImage = new StyleDetailImageClass().PopulateStyleDetailImage(fieldNames, reader);
                                    styleDetailImage.Order = Order;
                                    styleDetailImagesList.Add(styleDetailImage);
                                }
                            }
                        }

                        List<StyleDetailItemClass> styleDetailItemsList = new List<StyleDetailItemClass>();
                        //Items
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                
                                StyleDetailItemClass styleDetailItem;
                                while (reader.Read())
                                {
                                    styleDetailItem = new StyleDetailItemClass().PopulateStyleDetailItem(fieldNames, reader);
                                    styleDetailItemsList.Add(styleDetailItem);
                                }
                            }
                        }


                        List<ItemClass> tagsItems = new List<ItemClass>();
                        //Tags Items
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                ItemClass item;
                                while (reader.Read())
                                {
                                    item = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    tagsItems.Add(item);
                                }
                            }
                        }

                        List<StyleActionClass> actions = new List<StyleActionClass>();
                        //Style Actions
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                StyleActionClass action;
                                while (reader.Read())
                                {
                                    action = new StyleActionClass().PopulateStyleAction(fieldNames, reader);
                                    actions.Add(action);
                                }
                            }
                        }

                        foreach (var styleDtl in styleDetailsList)
                        {
                            StyleDetailDataClass sdd = new StyleDetailDataClass();
                            sdd.StyleDetail = styleDtl;
                            sdd.StyleDetailsImages = styleDetailImagesList.Where(img => img.StyleDetailId == styleDtl.Id).Select(img => img).ToList();
                            sdd.StyleDetailsItems = styleDetailItemsList.Where(itm => itm.StyleDetailId == styleDtl.Id).Select(itm => itm).ToList();
                            styleDetailDataClass.Add(sdd);

                        };

                        styleData.StyleTagsItems = tagsItems;
                        styleData.StyleActions = actions;
                        styleData.StyleDetailsData = styleDetailDataClass;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStyleData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
            
        [SwaggerWcfTag("Styles")]
        public ResultClass<List<StyleDataClass>> GetStylesDataNew(int LoggedUser, int DepartmentId)
        {
            ResultClass<List<StyleDataClass>> result = new ResultClass<List<StyleDataClass>>();
            try
            {
                List<StyleClass> styles = GetStyles(LoggedUser, 0, false, 0, DepartmentId).Result;

                List<StyleDataClass> stylesData = new List<StyleDataClass>();
                StyleDataClass styleData;
                foreach (var s in styles)
                {
                    styleData = GetStyleData(LoggedUser, s.Id).Result;
                    stylesData.Add(styleData);
                }

                result.Result = stylesData;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStylesData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<List<StyleDataClass>> GetStylesData(int LoggedUser, int DepartmentId)
        {
            ResultClass<List<StyleDataClass>> result = new ResultClass<List<StyleDataClass>>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetStyleDataNew";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                     new SqlParameter("DepartmentId", DepartmentId),
                  };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<StyleClass> stylesList = new List<StyleClass>();
                    List<StyleTagClass> stylesTagsList = new List<StyleTagClass>();
                    List<StyleDetailItemClass> stylesDetailsItemsList = new List<StyleDetailItemClass>();
                    List<StyleDetailImageClass> stylesDetailsImagesList = new List<StyleDetailImageClass>();
                    List<StyleDetailClass> stylesDetailsList = new List<StyleDetailClass>();
                    List<ItemClass> styleTagItems = new List<ItemClass>();
                    List<StyleActionClass> styleActions = new List<StyleActionClass>();

                    List<StyleDataClass> stylesData = new List<StyleDataClass>();

                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        int order = 0;

                        StyleClass style;
                        while (reader.Read())
                        {
                            order = order + 1;
                            style = new StyleClass().PopulateStyle(fieldNames, reader);
                            style.Order = order;
                            stylesList.Add(style);
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                order = 0;

                                StyleTagClass styleTag;
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleTag = new StyleTagClass().PopulateTag(fieldNames, reader);
                                    styleTag.Order = order;
                                    stylesTagsList.Add(styleTag);
                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                order = 0;

                                StyleDetailClass styleDetail;
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                                    styleDetail.Order = order;
                                    stylesDetailsList.Add(styleDetail);
                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                order = 0;

                                StyleDetailImageClass styleImage;
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleImage = new StyleDetailImageClass().PopulateStyleDetailImage(fieldNames, reader);
                                    styleImage.Order = order;
                                    stylesDetailsImagesList.Add(styleImage);
                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                order = 0;

                                StyleDetailItemClass styleItem;
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleItem = new StyleDetailItemClass().PopulateStyleDetailItem(fieldNames, reader);
                                    styleItem.Order = order;
                                    stylesDetailsItemsList.Add(styleItem);
                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                order = 0;

                                ItemClass item;
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    item = new ItemClass().PopulateItemClass(fieldNames, reader);
                                    item.Order = order;
                                    styleTagItems.Add(item);
                                }
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                order = 0;

                                StyleActionClass styleAction;
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleAction = new StyleActionClass().PopulateStyleAction(fieldNames, reader);
                                    styleAction.Order = order;
                                    styleActions.Add(styleAction);
                                }
                            }
                        }

                        StyleDataClass styleData;

                        foreach (var s in stylesList)
                        {
                            styleData = new StyleDataClass();
                            styleData.Style = s;

                            styleData.StyleTags = new List<StyleTagClass>();
                            styleData.StyleTags.AddRange(stylesTagsList.Where((st) => st.StyleId == s.Id));

                            styleData.StyleActions = new List<StyleActionClass>();
                            styleData.StyleActions.AddRange(styleActions.Where((sa) => sa.StyleId == s.Id));

                            styleData.StyleTagsItems = new List<ItemClass>();
                            styleData.StyleTagsItems.AddRange(styleTagItems.Where((stg) => stg.StyleId == s.Id).Take(5));

                            styleData.StyleDetailsData = new List<StyleDetailDataClass>();
                            StyleDetailDataClass styleDetailData;
                            foreach (var sd in stylesDetailsList.Where((sdd) => sdd.StyleId == s.Id))
                            {
                                styleDetailData = new StyleDetailDataClass();
                                styleDetailData.StyleDetail = sd;
                                styleDetailData.StyleDetailsImages = new List<StyleDetailImageClass>();
                                styleDetailData.StyleDetailsImages.AddRange(stylesDetailsImagesList.Where((sdim) => sdim.StyleDetailId == sd.Id));
                                styleDetailData.StyleDetailsItems = new List<StyleDetailItemClass>();
                                styleDetailData.StyleDetailsItems.AddRange(stylesDetailsItemsList.Where((sdit) => sdit.StyleDetailId == sd.Id));
                                styleData.StyleDetailsData.Add(styleDetailData);
                            }

                            stylesData.Add(styleData);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = stylesData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = stylesData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetStylesData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDataClass> CreateStyleData(int LoggedUser, StyleDataClass StyleData)
        {
            ResultClass<StyleDataClass> result = new ResultClass<StyleDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertStyleData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("ArabicName", StyleData.Style.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", StyleData.Style.EnglishName));
                    Params.Add(new SqlParameter("ImageURL", StyleData.Style.ImageURL));
                    Params.Add(new SqlParameter("WebImageURL", StyleData.Style.WebImageURL));
                    Params.Add(new SqlParameter("StyleTypeId", StyleData.Style.StyleTypeId));
                    Params.Add(new SqlParameter("Disabled", StyleData.Style.Disabled));
                    Params.Add(new SqlParameter("DepartmentId", StyleData.Style.DepartmentId));
                    Params.Add(new SqlParameter("ShowItems", StyleData.Style.ShowItems));

                    if (StyleData.StyleTags != null)
                    {
                        if (StyleData.StyleTags.Count > 0)
                        {
                            DataTable styleTagsTable;
                            using (styleTagsTable = new DataTable())
                            {
                                styleTagsTable.Columns.Add("Item", typeof(string));
                                foreach (StyleTagClass x in StyleData.StyleTags)
                                    styleTagsTable.Rows.Add(x.TagId);
                            }
                            var pList = new SqlParameter("@Tags", SqlDbType.Structured);
                            pList.Value = styleTagsTable;
                            Params.Add(pList);
                        }
                    }

                    if (StyleData.StyleActions != null)
                    {
                        if (StyleData.StyleActions.Count > 0)
                        {
                            DataTable styleActionsTable;
                            using (styleActionsTable = new DataTable())
                            {
                                styleActionsTable.Columns.Add("Id", typeof(int));
                                styleActionsTable.Columns.Add("StyleId", typeof(int));
                                styleActionsTable.Columns.Add("TagId", typeof(int));
                                styleActionsTable.Columns.Add("ImageURL", typeof(string));
                                styleActionsTable.Columns.Add("WebImageURL", typeof(string));
                                styleActionsTable.Columns.Add("Order", typeof(int));
                                styleActionsTable.Columns.Add("ArabicName", typeof(string));
                                styleActionsTable.Columns.Add("EngllishName", typeof(string));
                                foreach (StyleActionClass x in StyleData.StyleActions)
                                    styleActionsTable.Rows.Add(0, x.StyleId, x.TagId, x.ImageURL, x.WebImageURL, x.Order, x.EnglishName, x.ArabicName);
                            }
                            var pList = new SqlParameter("@StyleActions", SqlDbType.Structured);
                            pList.Value = styleActionsTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleClass style = new StyleClass();
                    List<StyleTagClass> styleTags = new List<StyleTagClass>();
                    List<StyleActionClass> styleActions = new List<StyleActionClass>();
                    StyleDataClass styleData = new StyleDataClass();
                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        style = new StyleClass().PopulateStyle(fieldNames, reader);
                        style.Order = 1;
                        styleData.Style = style;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                int Order = 0;
                                StyleTagClass styleTag;
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleTag = new StyleTagClass().PopulateTag(fieldNames, reader);
                                    styleTag.Order = Order;
                                    styleTags.Add(styleTag);
                                }
                                styleData.StyleTags = styleTags;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                int Order = 0;
                                StyleActionClass styleAction;
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleAction = new StyleActionClass().PopulateStyleAction(fieldNames, reader);
                                    styleActions.Add(styleAction);
                                }
                                styleData.StyleActions = styleActions;
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateStyleData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDataClass> UpdateStyleData(int LoggedUser, StyleDataClass StyleData)
        {
            ResultClass<StyleDataClass> result = new ResultClass<StyleDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateStyleData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("ArabicName", StyleData.Style.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", StyleData.Style.EnglishName));
                    Params.Add(new SqlParameter("ImageURL", StyleData.Style.ImageURL));
                    Params.Add(new SqlParameter("WebImageURL", StyleData.Style.WebImageURL));
                    Params.Add(new SqlParameter("StyleTypeId", StyleData.Style.StyleTypeId));
                    Params.Add(new SqlParameter("Disabled", StyleData.Style.Disabled));
                    Params.Add(new SqlParameter("Id", StyleData.Style.Id));
                    Params.Add(new SqlParameter("DepartmentId", StyleData.Style.DepartmentId));
                    Params.Add(new SqlParameter("ShowItems", StyleData.Style.ShowItems));

                    if (StyleData.StyleTags != null)
                    {
                        if (StyleData.StyleTags.Count > 0)
                        {
                            DataTable styleTagsTable;
                            using (styleTagsTable = new DataTable())
                            {
                                styleTagsTable.Columns.Add("Item", typeof(string));
                                foreach (StyleTagClass x in StyleData.StyleTags)
                                    styleTagsTable.Rows.Add(x.TagId);
                            }
                            var pList = new SqlParameter("@Tags", SqlDbType.Structured);
                            pList.Value = styleTagsTable;
                            Params.Add(pList);
                        }
                    }


                    if (StyleData.StyleActions != null)
                    {
                        if (StyleData.StyleActions.Count > 0)
                        {
                            DataTable styleActionsTable;
                            using (styleActionsTable = new DataTable())
                            {
                                styleActionsTable.Columns.Add("Id", typeof(int));
                                styleActionsTable.Columns.Add("StyleId", typeof(int));
                                styleActionsTable.Columns.Add("TagId", typeof(int));
                                styleActionsTable.Columns.Add("ImageURL", typeof(string));
                                styleActionsTable.Columns.Add("WebImageURL", typeof(string));
                                styleActionsTable.Columns.Add("Order", typeof(int));
                                styleActionsTable.Columns.Add("ArabicName", typeof(string));
                                styleActionsTable.Columns.Add("EngllishName", typeof(string));
                                foreach (StyleActionClass x in StyleData.StyleActions)
                                    styleActionsTable.Rows.Add(0, x.StyleId, x.TagId, x.ImageURL, x.WebImageURL, x.Order, x.EnglishName, x.ArabicName);
                            }
                            var pList = new SqlParameter("@StyleActions", SqlDbType.Structured);
                            pList.Value = styleActionsTable;
                            Params.Add(pList);
                        }
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleClass style = new StyleClass();
                    List<StyleTagClass> styleTags = new List<StyleTagClass>();
                    List<StyleActionClass> styleActions = new List<StyleActionClass>();
                    StyleDataClass styleData = new StyleDataClass();
                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        style = new StyleClass().PopulateStyle(fieldNames, reader);
                        style.Order = 1;
                        styleData.Style = style;
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                int Order = 0;
                                StyleTagClass styleTag;
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleTag = new StyleTagClass().PopulateTag(fieldNames, reader);
                                    styleTag.Order = Order;
                                    styleTags.Add(styleTag);
                                }
                                styleData.StyleTags = styleTags;
                            }
                        }

                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                int Order = 0;
                                StyleActionClass styleAction;
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                                while (reader.Read())
                                {
                                    Order = Order + 1;
                                    styleAction = new StyleActionClass().PopulateStyleAction(fieldNames, reader);
                                    styleActions.Add(styleAction);
                                }
                                styleData.StyleActions = styleActions;
                            }
                        }


                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleData;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateStyleData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleClass> CreateStyle(int LoggedUser, StyleClass Style)
        {
            ResultClass<StyleClass> result = new ResultClass<StyleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertStyle";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("ArabicName", Style.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", Style.EnglishName));
                    Params.Add(new SqlParameter("ImageURL", Style.ImageURL));
                    Params.Add(new SqlParameter("WebImageURL", Style.WebImageURL));
                    Params.Add(new SqlParameter("StyleTypeId", Style.StyleTypeId));
                    Params.Add(new SqlParameter("Disabled", Style.Disabled));
                    Params.Add(new SqlParameter("DepartmentId", Style.DepartmentId));
                    Params.Add(new SqlParameter("ShowItems", Style.ShowItems));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleClass style = new StyleClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        style = new StyleClass().PopulateStyle(fieldNames, reader);
                        style.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = style;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = style;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateStyle", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleClass> UpdateStyle(int LoggedUser, StyleClass Style)
        {
            ResultClass<StyleClass> result = new ResultClass<StyleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateStyle";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("Id", Style.Id));
                    Params.Add(new SqlParameter("ArabicName", Style.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", Style.EnglishName));
                    Params.Add(new SqlParameter("ImageURL", Style.ImageURL));
                    Params.Add(new SqlParameter("StyleTypeId", Style.StyleTypeId));
                    Params.Add(new SqlParameter("Disabled", Style.Disabled));
                    Params.Add(new SqlParameter("DepartmentId", Style.DepartmentId));
                    Params.Add(new SqlParameter("WebImageURL", Style.WebImageURL));
                    Params.Add(new SqlParameter("ShowItems", Style.ShowItems));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleClass style = new StyleClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        style = new StyleClass().PopulateStyle(fieldNames, reader);
                        style.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = style;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = style;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateStyle", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleClass> DeleteStyle(int LoggedUser, int Id)
        {
            ResultClass<StyleClass> result = new ResultClass<StyleClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteStyle";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleClass style = new StyleClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        style = new StyleClass().PopulateStyle(fieldNames, reader);
                        style.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = style;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = style;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteStyle", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDetailDataClass> CreateStyleDetailData(int LoggedUser, StyleDetailDataClass StyleDetailData)
        {
            ResultClass<StyleDetailDataClass> result = new ResultClass<StyleDetailDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertStyleDetailData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("StyleId", StyleDetailData.StyleDetail.StyleId));
                    Params.Add(new SqlParameter("ArabicDescription", StyleDetailData.StyleDetail.ArabicDescription));
                    Params.Add(new SqlParameter("EnglishDescription", StyleDetailData.StyleDetail.EnglishDescription));

                    if (StyleDetailData.StyleDetailsImages != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Param1", typeof(string));
                            table.Columns.Add("Param2", typeof(string));
                            foreach (StyleDetailImageClass x in StyleDetailData.StyleDetailsImages)
                                table.Rows.Add(x.ImageURL, x.WebImageURL);
                        }
                        var pList = new SqlParameter("@Images", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    if (StyleDetailData.StyleDetailsItems != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(int));
                            table.Columns.Add("Id2", typeof(int));
                            foreach (StyleDetailItemClass x in StyleDetailData.StyleDetailsItems)
                                table.Rows.Add(x.ItemId, x.ItemColorId);
                        }
                        var pList = new SqlParameter("@ItemsWithColors", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleDetailClass styleDetail = new StyleDetailClass();

                    if (reader.HasRows)
                    {
                        //StyleDetail
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                        styleDetail.Order = 1;

                        //images
                        int order = 0;
                        List<StyleDetailImageClass> styleDetailImagesList = new List<StyleDetailImageClass>();
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                StyleDetailImageClass styleDetailImage;
                                
                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleDetailImage = new StyleDetailImageClass().PopulateStyleDetailImage(fieldNames, reader);
                                    styleDetailImage.Order = order;
                                    styleDetailImagesList.Add(styleDetailImage);
                                }
                            }
                        }

                        //items
                        order = 0;
                        List<StyleDetailItemClass> styleDetailItemList = new List<StyleDetailItemClass>();
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                StyleDetailItemClass styleDetailItem;

                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleDetailItem = new StyleDetailItemClass().PopulateStyleDetailItem(fieldNames, reader);
                                    styleDetailItem.Order = order;
                                    styleDetailItemList.Add(styleDetailItem);
                                }
                            }
                        }

                        StyleDetailDataClass styleDetailData = new StyleDetailDataClass();
                        styleDetailData.StyleDetail = styleDetail;
                        styleDetailData.StyleDetailsImages = styleDetailImagesList;
                        styleDetailData.StyleDetailsItems = styleDetailItemList;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateStyleDetailData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDetailDataClass> UpdateStyleDetailData(int LoggedUser, StyleDetailDataClass StyleDetailData)
        {
            ResultClass<StyleDetailDataClass> result = new ResultClass<StyleDetailDataClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateStyleDetailData";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };
                    Params.Add(new SqlParameter("Id", StyleDetailData.StyleDetail.Id));
                    Params.Add(new SqlParameter("StyleId", StyleDetailData.StyleDetail.StyleId));
                    Params.Add(new SqlParameter("ArabicDescription", StyleDetailData.StyleDetail.ArabicDescription));
                    Params.Add(new SqlParameter("EnglishDescription", StyleDetailData.StyleDetail.EnglishDescription));

                    if (StyleDetailData.StyleDetailsImages != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Param1", typeof(string));
                            table.Columns.Add("Param2", typeof(string));
                            foreach (StyleDetailImageClass x in StyleDetailData.StyleDetailsImages)
                                table.Rows.Add(x.ImageURL, x.WebImageURL);
                        }
                        var pList = new SqlParameter("@Images", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    if (StyleDetailData.StyleDetailsItems != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(int));
                            table.Columns.Add("Id2", typeof(int));
                            foreach (StyleDetailItemClass x in StyleDetailData.StyleDetailsItems)
                                table.Rows.Add(x.ItemId, x.ItemColorId);
                        }
                        var pList = new SqlParameter("@ItemsWithColors", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleDetailClass styleDetail = new StyleDetailClass();

                    if (reader.HasRows)
                    {
                        //StyleDetail
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                        styleDetail.Order = 1;

                        //images
                        int order = 0;
                        List<StyleDetailImageClass> styleDetailImagesList = new List<StyleDetailImageClass>();
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                StyleDetailImageClass styleDetailImage;

                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleDetailImage = new StyleDetailImageClass().PopulateStyleDetailImage(fieldNames, reader);
                                    styleDetailImage.Order = order;
                                    styleDetailImagesList.Add(styleDetailImage);
                                }
                            }
                        }

                        //items
                        order = 0;
                        List<StyleDetailItemClass> styleDetailItemList = new List<StyleDetailItemClass>();
                        if (reader.NextResult())
                        {
                            if (reader.HasRows)
                            {
                                fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                                StyleDetailItemClass styleDetailItem;

                                while (reader.Read())
                                {
                                    order = order + 1;
                                    styleDetailItem = new StyleDetailItemClass().PopulateStyleDetailItem(fieldNames, reader);
                                    styleDetailItem.Order = order;
                                    styleDetailItemList.Add(styleDetailItem);
                                }
                            }
                        }

                        StyleDetailDataClass styleDetailData = new StyleDetailDataClass();
                        styleDetailData.StyleDetail = styleDetail;
                        styleDetailData.StyleDetailsImages = styleDetailImagesList;
                        styleDetailData.StyleDetailsItems = styleDetailItemList;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetailData;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateStyleDetailData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Styles")]
        public ResultClass<StyleDetailClass> DeleteStyleDetail(int LoggedUser, int Id)
        {
            ResultClass<StyleDetailClass> result = new ResultClass<StyleDetailClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteStyleDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };
                    Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    StyleDetailClass styleDetail = new StyleDetailClass();

                    if (reader.HasRows)
                    {
                        //StyleDetail
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        styleDetail = new StyleDetailClass().PopulateStyleDetail(fieldNames, reader);
                        styleDetail.Order = 1;

                       

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = styleDetail;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteStyleDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<TagClass> CreateTag(int LoggedUser, TagClass Tag)
        {
            ResultClass<TagClass> result = new ResultClass<TagClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertTag";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("ArabicName", Tag.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", Tag.EnglishName));
                    Params.Add(new SqlParameter("TagTypeId", Tag.TagTypeId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    TagClass tag = new TagClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        tag = new TagClass().PopulateTag(fieldNames, reader);
                        tag.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tag;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tag;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateTag", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<TagClass> UpdateTag(int LoggedUser, TagClass Tag)
        {
            ResultClass<TagClass> result = new ResultClass<TagClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateTag";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("Id", Tag.Id));
                    Params.Add(new SqlParameter("ArabicName", Tag.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", Tag.EnglishName));
                    Params.Add(new SqlParameter("TagTypeId", Tag.TagTypeId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    TagClass tag = new TagClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        tag = new TagClass().PopulateTag(fieldNames, reader);
                        tag.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tag;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tag;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateTag", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<TagClass> DeleteTag(int LoggedUser, int Id)
        {
            ResultClass<TagClass> result = new ResultClass<TagClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteTag";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    TagClass tag = new TagClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        tag = new TagClass().PopulateTag(fieldNames, reader);
                        tag.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tag;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tag;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteTag", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<List<TagClass>> GetTags(int LoggedUser, int Id, int TagTypeId)
        {
            ResultClass<List<TagClass>> result = new ResultClass<List<TagClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTags";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    if (TagTypeId > 0)
                        Params.Add(new SqlParameter("TagTypeId", TagTypeId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<TagClass> tagsList = new List<TagClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        TagClass tag;
                        while (reader.Read())
                        {
                            order = order + 1;
                            tag = new TagClass().PopulateTag(fieldNames, reader);
                            tag.Order = order;
                            tagsList.Add(tag);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagsList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetTags", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Tags")]
        public ResultClass<TagTypeClass> CreateTagType(int LoggedUser, TagTypeClass TagType)
        {
            ResultClass<TagTypeClass> result = new ResultClass<TagTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertTagType";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("ArabicName", TagType.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", TagType.EnglishName));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    TagTypeClass tagType = new TagTypeClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        tagType = new TagTypeClass().PopulateTagType(fieldNames, reader);
                        tagType.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagType;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateTagType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<TagTypeClass> UpdateTagType(int LoggedUser, TagTypeClass TagType)
        {
            ResultClass<TagTypeClass> result = new ResultClass<TagTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateTagType";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("Id", TagType.Id));
                    Params.Add(new SqlParameter("ArabicName", TagType.ArabicName));
                    Params.Add(new SqlParameter("EnglishName", TagType.EnglishName));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    TagTypeClass tagType = new TagTypeClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        tagType = new TagTypeClass().PopulateTagType(fieldNames, reader);
                        tagType.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagType;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateTagType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<TagTypeClass> DeleteTagType(int LoggedUser, int Id)
        {
            ResultClass<TagTypeClass> result = new ResultClass<TagTypeClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteTagType";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    Params.Add(new SqlParameter("Id", Id));

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    TagTypeClass tagType = new TagTypeClass();

                    if (reader.HasRows)
                    {
                        //Style
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();
                        tagType = new TagTypeClass().PopulateTagType(fieldNames, reader);
                        tagType.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagType;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagType;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteTagType", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Tags")]
        public ResultClass<List<TagTypeClass>> GetTagTypes(int LoggedUser, int Id)
        {
            ResultClass<List<TagTypeClass>> result = new ResultClass<List<TagTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetTagTypes";

                    List<SqlParameter> Params = new List<SqlParameter>()
                  {
                     new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  };

                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    List<TagTypeClass> tagTypesList = new List<TagTypeClass>();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();


                        int order = 0;

                        TagTypeClass tagType;
                        while (reader.Read())
                        {
                            order = order + 1;
                            tagType = new TagTypeClass().PopulateTagType(fieldNames, reader);
                            tagType.Order = order;
                            tagTypesList.Add(tagType);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagTypesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = tagTypesList;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetTagTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Prestigak")]
        public ResultClass<PrestigakMainPageDataClass> GetPrestigakMainData(int LoggedUser, int DepartmentId)
        {
            ResultClass<PrestigakMainPageDataClass> result = new ResultClass<PrestigakMainPageDataClass>();
            try
            {
                try
                {
                    int userId = (APITestingMode) ? 7 : Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"].ToString());
                    RecordUsageData(userId, DepartmentId, 1);
                }
                catch { }

                result.Result = new PrestigakMainPageDataClass();
             
                result.Result.DepartmentsData = GetItemDepartmentsData().Result;
                result.Result.Styles = GetStyles(LoggedUser, -1, false, -1, DepartmentId).Result;
                result.Result.StylesData = GetStylesData(LoggedUser, DepartmentId).Result;
                result.Result.Stories = GetStories(LoggedUser, -1, DepartmentId).Result;
                result.Result.Brands = GetBrandsByDepartment(DepartmentId).Result;

                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetPrestigakMainData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Prestigak")]
        public ResultClass<OrderWithDetailsClass> GetOrderWithDetails(int LoggedUser, int Id, bool LastOpenOrder)
        {
            ResultClass<OrderWithDetailsClass> result = new ResultClass<OrderWithDetailsClass>();
            try
            {
                result.Result = new OrderWithDetailsClass();

                if (LastOpenOrder)
                    result.Result.Order = GetLastOpenOrderForClient(LoggedUser).Result;
                else
                    result.Result.Order = GetOrder(LoggedUser, Id).Result;

                if (result.Result.Order != null)
                    result.Result.OrderDetails = GetOrderDetails(result.Result.Order.Id).Result;

                if (result.Result.Order != null)
                    result.Result.OrderDetailsSeries = GetOrderDetailsSeries(result.Result.Order.Id).Result;

                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderWithDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Orders")]
        public ResultClass<List<OrderWithDetailsClass>> GetDeliveryUserOrdersWithDetails(int LoggedUser, int DeliveryUserId)
        {
            ResultClass<List<OrderWithDetailsClass>> result = new ResultClass<List<OrderWithDetailsClass>>();
            try
            {
                result.Result = new List<OrderWithDetailsClass>();

                ResultClass<List<OrderClass>> orders;
                ResultClass<List<OrderClass>> orders2;

                orders = GetOrders(7, true, true, true, 92, false, null, false, null, null, false, null, 1, 99999, false, 0);
                orders2 = GetOrders(7, true, true, true, 96, false, null, false, null, null, false, null, 1, 99999, false, 0);

                if (orders != null)
                {
                    if (orders.Result != null)
                    {
                        if (DeliveryUserId != null)
                        {
                            foreach (var order in orders.Result.Where((o) => o.DeliveryUserId == DeliveryUserId))
                            {
                                var orderDetails = GetOrderDetails(order.Id).Result;

                                OrderWithDetailsClass orderWithDetails = new OrderWithDetailsClass();
                                orderWithDetails.Order = order;
                                orderWithDetails.OrderDetails = orderDetails;
                                result.Result.Add(orderWithDetails);
                            }
                        }
                    }
                }

                if (orders2 != null)
                {
                    if (orders2.Result != null)
                    {
                        if (DeliveryUserId != null)
                        { 
                            foreach (var order in orders2.Result.Where((o) => o.DeliveryUserId == DeliveryUserId))
                            {
                                var orderDetails = GetOrderDetails(order.Id).Result;

                                OrderWithDetailsClass orderWithDetails = new OrderWithDetailsClass();
                                orderWithDetails.Order = order;
                                orderWithDetails.OrderDetails = orderDetails;
                                result.Result.Add(orderWithDetails);
                            }
                        }   
                    }
                }

                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetDriverOrdersWithDetails", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Prestigak")]
        public ResultClass<List<GovernorateWithCitiesClass>> GetGovernoratesWithCities(int CountryId, int GovernorateId)
        {
            ResultClass<List<GovernorateWithCitiesClass>> result = new ResultClass<List<GovernorateWithCitiesClass>>();
            try
            {
                result.Result = new List<GovernorateWithCitiesClass>();
                GovernorateClass governorate;
                List<CityClass> cities;
                GovernorateWithCitiesClass governorateWithCities;
                if (GovernorateId > 0)
                { 
                    governorate = GetGovernorate(CountryId, GovernorateId).Result;
                    cities = GetGovernorateCities(GovernorateId).Result;
                    governorateWithCities = new GovernorateWithCitiesClass();
                    governorateWithCities.Governorate = governorate;
                    governorateWithCities.Cities = cities;
                    result.Result.Add(governorateWithCities);

                }
                else
                {
                    foreach (var gov in GetGovernorates(CountryId).Result)
                    {
                        governorate = GetGovernorate(CountryId, gov.Id).Result;
                        cities = GetGovernorateCities(gov.Id).Result;
                        governorateWithCities = new GovernorateWithCitiesClass();
                        governorateWithCities.Governorate = governorate;
                        governorateWithCities.Cities = cities;
                        result.Result.Add(governorateWithCities);
                    }
                }
              
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(7, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernorateWithCities", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Prestigak")]
        public ResultClass<List<GovernorateWithCitiesAndLocationsClass>> GetGovernoratesWithCitiesAndLocations(int CountryId, int GovernorateId)
        {
            ResultClass<List<GovernorateWithCitiesAndLocationsClass>> result = new ResultClass<List<GovernorateWithCitiesAndLocationsClass>>();
            try
            {
                result.Result = new List<GovernorateWithCitiesAndLocationsClass>();
                GovernorateClass governorate;
                List<CityClass> cities;
                List<LocationClass> locations;
                GovernorateWithCitiesAndLocationsClass governorateWithCitiesAndLocations;
                if (GovernorateId > 0)
                {
                    governorate = GetGovernorate(CountryId, GovernorateId).Result;
                    cities = GetGovernorateCities(GovernorateId).Result;
                    locations = GetGovernorateLocations(GovernorateId).Result;
                    governorateWithCitiesAndLocations = new GovernorateWithCitiesAndLocationsClass();
                    governorateWithCitiesAndLocations.Governorate = governorate;
                    governorateWithCitiesAndLocations.Cities = cities;
                    governorateWithCitiesAndLocations.Locations = locations;
                    result.Result.Add(governorateWithCitiesAndLocations);

                }
                else
                {
                    foreach (var gov in GetGovernorates(CountryId).Result)
                    {
                        governorate = GetGovernorate(CountryId, gov.Id).Result;
                        cities = GetGovernorateCities(gov.Id).Result;
                        locations = GetGovernorateLocations(gov.Id).Result;
                        governorateWithCitiesAndLocations = new GovernorateWithCitiesAndLocationsClass();
                        governorateWithCitiesAndLocations.Governorate = governorate;
                        governorateWithCitiesAndLocations.Cities = cities;
                        governorateWithCitiesAndLocations.Locations = locations;
                        result.Result.Add(governorateWithCitiesAndLocations);
                    }
                }

                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(7, e.Message, e.StackTrace, "1.0.3", "API", "GetGovernorateWithCitiesAndLocations", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Prestigak")]
        public ResultClass<PrestigakStyleDetailsDataClass> GetPrestigakStyleDetailsData(int LoggedUser, int StyleId, int DepartmentId)
        {
            ResultClass<PrestigakStyleDetailsDataClass> result = new ResultClass<PrestigakStyleDetailsDataClass>();
            try
            {
                try
                {
                    int userId = (APITestingMode) ? 7 : Convert.ToInt32(HttpContext.Current.Request.Headers["LoggedUser"].ToString());
                    RecordUsageData(LoggedUser, StyleId, 2);
                }
                catch { }

                result.Result = new PrestigakStyleDetailsDataClass();

                result.Result.StyleData = GetStyleData(LoggedUser, StyleId).Result;
                result.Result.Stories = GetStories(LoggedUser, -1, DepartmentId).Result;

                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "GetPrestigakStyleDetailsData", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Coupons")]
        public ResultClass<CouponClass> GetCoupon(int? Id, string CouponSerial)
        {
            ResultClass<CouponClass> result = new ResultClass<CouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCoupons";

                    List<SqlParameter> Params = new List<SqlParameter>();
                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));
                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));


                    if (CouponSerial != "" && CouponSerial != null)
                        Params.Add(new SqlParameter("CouponSerial", CouponSerial));


                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CouponClass coupon;
                        reader.Read();
                        coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        coupon.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = coupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCoupon", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Coupons")]
        public ResultClass<List<CouponClass>> GetCoupons(int? CouponTypeId)
        {
            ResultClass<List<CouponClass>> result = new ResultClass<List<CouponClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCoupons";

                    List<SqlParameter> Params = new List<SqlParameter>();

                    Params.Add(new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]));

                    if (CouponTypeId > 0)
                        Params.Add(new SqlParameter("CouponTypeId", CouponTypeId));
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CouponClass> Coupons = new List<CouponClass>();
                        CouponClass coupon;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                            coupon.Order = order;
                            Coupons.Add(coupon);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Coupons;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCoupons", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Coupons")]
        public ResultClass<CouponClass> CreateCoupon(int LoggedUser, CouponClass Coupon)
        {
            ResultClass<CouponClass> result = new ResultClass<CouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertCoupon";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("CouponTypeId", Coupon.CouponTypeId),
                  new SqlParameter("CouponSerial", Coupon.CouponSerial),
                  new SqlParameter("CouponValue", Coupon.CouponValue),
                  new SqlParameter("StartDate", Coupon.StartDate),
                  new SqlParameter("HasEndDate", Coupon.HasEndDate),
                  new SqlParameter("EndDate", Coupon.EndDate),
                  new SqlParameter("CouponValueType", Coupon.CouponValueType),
               };


                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CouponClass coupon;
                        reader.Read();
                        coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        coupon.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = coupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateCoupon", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Coupons")]
        public ResultClass<CouponClass> UpdateCoupon(int LoggedUser, CouponClass Coupon)
        {
            ResultClass<CouponClass> result = new ResultClass<CouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateCoupon";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Coupon.Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("CouponTypeId", Coupon.CouponTypeId),
                  new SqlParameter("CouponSerial", Coupon.CouponSerial),
                  new SqlParameter("CouponValue", Coupon.CouponValue),
                  new SqlParameter("StartDate", Coupon.StartDate),
                  new SqlParameter("HasEndDate", Coupon.HasEndDate),
                  new SqlParameter("EndDate", Coupon.EndDate),
                  new SqlParameter("CouponValueType", Coupon.CouponValueType),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        CouponClass coupon;
                        reader.Read();
                        coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        coupon.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = coupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "UpdateServices", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Coupons")]
        public ResultClass<CouponClass> DeleteCoupon(int LoggedUser, int Id)
        {
            ResultClass<CouponClass> result = new ResultClass<CouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteCoupon";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("Id", Id),
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        CouponClass coupon;
                        reader.Read();
                        coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        coupon.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = coupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteServices", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }




        // UsersCoupon

        [SwaggerWcfTag("UsersCoupon")]
        public ResultClass<UsersCouponClass> GetUsersCoupon(int CouponId)
        {
            ResultClass<UsersCouponClass> result = new ResultClass<UsersCouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUsersCoupon";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                       new SqlParameter("CouponId", CouponId),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    //if (ItemTypeId > 0)
                    //    cmd.Parameters.Add(new SqlParameter("ItemTypeId", ItemTypeId));
                    //if (ItmeCustomizationId > 0)
                    //    cmd.Parameters.Add(new SqlParameter("ItmeCustomizationId", ItmeCustomizationId));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        UsersCouponClass UsersCoupon = new UsersCouponClass();
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        UsersCoupon.Coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        UsersCoupon.UsersCoupon = new List<UserClass_Short>();
                        UserClass_Short User;
                        int order = 0;
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order += 1;
                                UserClass AllInfoUser = new UserClass();

                                AllInfoUser = new UserClass().PopulateUser(fieldNames, reader);
                                User = new UserClass_Short().PopulateUser(AllInfoUser);

                                User.Order = order;

                                UsersCoupon.UsersCoupon.Add(User);
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UsersCoupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "Admin_GetItemTypeCustomizations", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UsersCoupon")]
        public ResultClass<UsersCouponClass> CreateUsersCoupon(int LoggedUser, int CouponId, List<int> UserIds)
        {
            ResultClass<UsersCouponClass> result = new ResultClass<UsersCouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertUsersCoupon";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("CouponId", CouponId),
                   new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
               };
                    if (UserIds != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        UsersCouponClass UsersCoupon = new UsersCouponClass();
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        UsersCoupon.Coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        UsersCoupon.UsersCoupon = new List<UserClass_Short>();
                        UserClass_Short User;
                        int order = 0;
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order += 1;
                                UserClass AllInfoUser = new UserClass();

                                AllInfoUser = new UserClass().PopulateUser(fieldNames, reader);
                                User = new UserClass_Short().PopulateUser(AllInfoUser);

                                User.Order = order;

                                UsersCoupon.UsersCoupon.Add(User);
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UsersCoupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "CreateItemTypeCustomization", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UsersCoupon")]
        public ResultClass<UsersCouponClass> DeleteUsersCoupon(int LoggedUser, int CouponId, List<int> UserIds)
        {
            ResultClass<UsersCouponClass> result = new ResultClass<UsersCouponClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteUsersCoupon";

                    List<SqlParameter> Params = new List<SqlParameter>()
                       {
                          new SqlParameter("CouponId", CouponId),
                           new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"])
                       };
                    //Ids
                    if (UserIds != null)
                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            foreach (int x in UserIds)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@UserIds", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }
                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        UsersCouponClass UsersCoupon = new UsersCouponClass();
                        reader.Read();
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        UsersCoupon.Coupon = new CouponClass().PopulateCoupon(fieldNames, reader);

                        UsersCoupon.UsersCoupon = new List<UserClass_Short>();
                        UserClass_Short User;
                        int order = 0;
                        reader.NextResult();
                        if (reader.HasRows)
                        {
                            fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                            while (reader.Read())
                            {
                                order += 1;
                                UserClass AllInfoUser = new UserClass();

                                AllInfoUser = new UserClass().PopulateUser(fieldNames, reader);
                                User = new UserClass_Short().PopulateUser(AllInfoUser);

                                User.Order = order;

                                UsersCoupon.UsersCoupon.Add(User);
                            }
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = UsersCoupon;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "DeleteUsersCoupon", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }



        // Coupon Type

        [SwaggerWcfTag("CouponType")]
        public ResultClass<List<CouponTypeClass>> GetCouponTypes(int? Id)
        {
            ResultClass<List<CouponTypeClass>> result = new ResultClass<List<CouponTypeClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetCouponTypes";

                    List<SqlParameter> Params = new List<SqlParameter>();


                    if (Id > 0)
                        Params.Add(new SqlParameter("Id", Id));

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<CouponTypeClass> CouponTypesList = new List<CouponTypeClass>();
                        CouponTypeClass CouponType;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            CouponType = new CouponTypeClass().PopulateCouponType(fieldNames, reader);

                            CouponType.Order = order;
                            CouponTypesList.Add(CouponType);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = CouponTypesList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetCouponTypes", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("DataUsage")]
        public ResultClass<bool> RecordUsageData(int UserId, int ReferenceId, int ReferenceType)
        {
            ResultClass<bool> result = new ResultClass<bool>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_RecordUsageData";

                    List<SqlParameter> Params = new List<SqlParameter>();

                    Params.Add(new SqlParameter("ReferenceType", ReferenceType));
                    Params.Add(new SqlParameter("ReferenceId", ReferenceId));
                    Params.Add(new SqlParameter("UserId", UserId));

                    cmd.Parameters.AddRange(Params.ToArray());
                    cmd.ExecuteReader();

                    result.Code = Errors.Success;
                    result.Message = "";
                    result.Result = true;
                    return result;
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "RecordUsageData", e.Source, "");
                }
                result.Result = false;
                return result;
            }
        }
        [SwaggerWcfTag("Items")]
        public ResultClass<List<ResultClass<ItemColorSizeAvailabilityClass>>> CreateItemsColorsSizesAvailabilityFromExcel(int LoggedUser, string Url)
        {
            ResultClass<List<ResultClass<ItemColorSizeAvailabilityClass>>> result = new ResultClass<List<ResultClass<ItemColorSizeAvailabilityClass>>>();
            try
            {
                //Sheets name
                string itemsColorsSizesAvailabilityWorksheetName = "تفاصيل الكميات";

                string serverPath = Config.ServerRoot;
                var filePath = serverPath + Url.Substring(Config.StaticURL.Length).Replace(@" / ", @"\");

                byte[] file = File.ReadAllBytes(@filePath);
                MemoryStream ms = new MemoryStream(file);
                var package = new ExcelPackage(ms);
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                ExcelWorksheet ItemsColorsSizesAvailabilityWorksheet = package.Workbook.Worksheets[itemsColorsSizesAvailabilityWorksheetName];

                //Get Item Columns
                string ItemCodeAddress = ServiceMethod.GetExcelCellByValue(ItemsColorsSizesAvailabilityWorksheet, "رمز المادة");
                string CountryAddress = ServiceMethod.GetExcelCellByValue(ItemsColorsSizesAvailabilityWorksheet, "الدولة");
                string ColorAddress = ServiceMethod.GetExcelCellByValue(ItemsColorsSizesAvailabilityWorksheet, "اللون");
                string SizeGroupAddress = ServiceMethod.GetExcelCellByValue(ItemsColorsSizesAvailabilityWorksheet, "مسطرة القياس");
                string SizeAddress = ServiceMethod.GetExcelCellByValue(ItemsColorsSizesAvailabilityWorksheet, "القياس");
                string AvailabilityAddress = ServiceMethod.GetExcelCellByValue(ItemsColorsSizesAvailabilityWorksheet, "ايقاف");

                //Fetch Item Data Tables
                var ItemsTbl = db.ItemsTbl.ToList();
                var SizeGroupsTbl = db.SizesGroupsTbl.ToList();
                var SizesTbl = db.SizesTbl.ToList();
                var ColorsTbl = db.ColorsTbl.ToList();
                var ItemSizesTbl = db.ItemSizesTbl.ToList();
                var ItemColorsTbl = db.ItemColorsTbl.ToList();
                var CountriesTbl = db.CountriesTbl.ToList();

                List<ResultClass<ItemColorSizeAvailabilityClass>> itemColorSizeAvailabilityList = new List<ResultClass<ItemColorSizeAvailabilityClass>>();
                ItemColorSizeAvailabilityClass newItemColorSizeAvailability;
                int firstRow = 2;
                if (ItemsColorsSizesAvailabilityWorksheet != null)
                {
                    for (int i = firstRow; i <= ItemsColorsSizesAvailabilityWorksheet.Dimension.End.Row; i++)
                    {

                        newItemColorSizeAvailability = new ItemColorSizeAvailabilityClass();

                        newItemColorSizeAvailability.Disabled = (ItemsColorsSizesAvailabilityWorksheet.Cells[AvailabilityAddress + i.ToString()]?.Value?.ToString() == "لا") ? false : true;

                        string itemCellValue = ItemsColorsSizesAvailabilityWorksheet.Cells[ItemCodeAddress + i.ToString()]?.Value?.ToString();
                        int itemId = ItemsTbl.Where(x => x.Code.Equals(itemCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        newItemColorSizeAvailability.ItemId = itemId;

                        string sizeGroupCellValue = ItemsColorsSizesAvailabilityWorksheet.Cells[SizeGroupAddress + i.ToString()]?.Value?.ToString();
                        int sizeGroupId = 0;
                        if (sizeGroupCellValue != null)
                        {
                            sizeGroupId = SizeGroupsTbl.Where(x => x.ArabicName.Equals(sizeGroupCellValue.Trim()) || x.EnglishName.Equals(sizeGroupCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        }
                        newItemColorSizeAvailability.SizeGroupId = sizeGroupId;


                        int sizeId = 0;
                        string sizeCellValue = ItemsColorsSizesAvailabilityWorksheet.Cells[SizeAddress + i.ToString()]?.Value?.ToString();
                        if (sizeCellValue != null)
                        {
                            sizeId = SizesTbl.Where(x => ((x.ArabicName.Equals(sizeCellValue.Trim()) || x.EnglishName.Equals(sizeCellValue.Trim())) && (x.SizeGroupId.Equals(sizeGroupId)))).Select(x => x.Id).FirstOrDefault();
                        }
                        newItemColorSizeAvailability.SizeId = sizeId;

                        string colorCellValue = ItemsColorsSizesAvailabilityWorksheet.Cells[ColorAddress + i.ToString()]?.Value?.ToString();
                        int colorId = 0;
                        if (colorCellValue != null)
                        {
                            colorId = ColorsTbl.Where(x => x.ArabicName.Equals(colorCellValue.Trim()) || x.EnglishName.Equals(colorCellValue.Trim())).Select(x => x.Id).FirstOrDefault();
                        }
                        newItemColorSizeAvailability.ColorId = colorId;

                        int itemColorId = 0;
                        if (colorId > 0)
                        {
                            itemColorId = ItemColorsTbl.Where(x => x.ItemId.Equals(itemId) && x.ColorId.Equals(colorId)).Select(x => x.Id).FirstOrDefault();
                        }
                        newItemColorSizeAvailability.ItemColorId = itemColorId;
                        int itemSizeId = 0;

                        if (sizeId > 0)
                        {
                            itemSizeId = ItemSizesTbl.Where(x => x.ItemId.Equals(itemId) && x.SizeId.Equals(sizeId)).Select(x => x.Id).FirstOrDefault();
                        }
                        newItemColorSizeAvailability.ItemSizeId = itemSizeId;


                        int countryId = 0;
                        string countryCellValue = ItemsColorsSizesAvailabilityWorksheet.Cells[CountryAddress + i.ToString()]?.Value?.ToString();
                        if (sizeCellValue != null)
                        {
                            countryId = CountriesTbl.Where(x => (x.ArabicName.Equals(countryCellValue.Trim()) || x.EnglishName.Equals(countryCellValue.Trim()))).Select(x => x.Id).FirstOrDefault();
                        }
                        newItemColorSizeAvailability.CountryId = countryId;

                        ResultClass<ItemColorSizeAvailabilityClass> res = UpdateItemColorSizeAvailability(LoggedUser, newItemColorSizeAvailability);


                        itemColorSizeAvailabilityList.Add(res);
                    }
                }

                result.Code = Errors.Success;
                result.Message = "";
                result.Result = itemColorSizeAvailabilityList;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "CreateItemsColorsSizesAvailabilityFromExcel", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Items")]
        public ResultClass<ItemColorSizeAvailabilityClass> UpdateItemColorSizeAvailability(int LoggedUser, ItemColorSizeAvailabilityClass ItemColorSizeAvailability)
        {
            ResultClass<ItemColorSizeAvailabilityClass> result = new ResultClass<ItemColorSizeAvailabilityClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateItemColorSizeAvailability";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ItemId", ItemColorSizeAvailability.ItemId),
                  new SqlParameter("Disabled", ItemColorSizeAvailability.Disabled)
               };

                    if (ItemColorSizeAvailability.ItemColorId > 0)
                        Params.Add(new SqlParameter("ItemColorId", ItemColorSizeAvailability.ItemColorId));

                    if (ItemColorSizeAvailability.ItemSizeId > 0)
                        Params.Add(new SqlParameter("ItemSizeId", ItemColorSizeAvailability.ItemSizeId));

                    if (ItemColorSizeAvailability.CountryId > 0)
                        Params.Add(new SqlParameter("CountryId", ItemColorSizeAvailability.CountryId));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        ItemColorSizeAvailabilityClass itemColorSizeAvailability;
                        reader.Read();
                        itemColorSizeAvailability = new ItemColorSizeAvailabilityClass().PopulateItemColorSizeAvailability(fieldNames, reader);

                        itemColorSizeAvailability.Order = 1;
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = itemColorSizeAvailability;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "UpdateItemColorSizeAvailability", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Agents")]
        public ResultClass<AgentVisitClass> RecordAgentVisit(int LoggedUser, AgentVisitClass AgentVisit)
        {
            ResultClass<AgentVisitClass> result = new ResultClass<AgentVisitClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertAgentVisit";

                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("ClientId", AgentVisit.ClientId),
                  new SqlParameter("Longitude", AgentVisit.Longitude),
                  new SqlParameter("Latitude", AgentVisit.Latitude),
               };

                 if (AgentVisit.Notes != null)
                    Params.Add(new SqlParameter("Notes", AgentVisit.Notes));

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        AgentVisitClass agentVisit;
                        reader.Read();
                        agentVisit = new AgentVisitClass().PopulateAgentVisit(fieldNames, reader);

                        agentVisit.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = agentVisit;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "RecordAgentVisit", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Brands")]
        public ResultClass<List<BrandClass>> ReorderBrands(int LoggedUser, List<BrandClass> BrandsOrder)
        {
            ResultClass<List<BrandClass>> result = new ResultClass<List<BrandClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_ReorderBrands";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };


                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(string));
                            table.Columns.Add("Id2", typeof(string));
                            foreach (BrandClass x in BrandsOrder)
                                table.Rows.Add(x.Id, x.Order);
                        }
                        var pList = new SqlParameter("@BrandsOrder", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        result.Result = new List<BrandClass>();
                        BrandClass brand;
                        while (reader.Read())
                        {
                            brand = new BrandClass().PopulateBrand(fieldNames, reader);
                            result.Result.Add(brand);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "ReorderBrands", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("UserSerials")]
        public ResultClass<UserSerialsClass> GetUserSerials(int LoggedUser)
        {
            ResultClass<UserSerialsClass> result = new ResultClass<UserSerialsClass>();
            try
            {
                result.Result = new UserSerialsClass();
                result.Result.ItemSerials = GetUserItemSerials(LoggedUser).Result;
                result.Result.UnknownSerials = GetUserUnknownSerials(LoggedUser).Result;
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        public ResultClass<List<ItemSerialClass>> GetUserItemSerials(int LoggedUser)
        {
            ResultClass<List<ItemSerialClass>> result = new ResultClass<List<ItemSerialClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserItemSerials";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };
                    
                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<ItemSerialClass> SerialsList = new List<ItemSerialClass>();
                        ItemSerialClass Serial;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            Serial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);

                            Serial.Order = order;
                            SerialsList.Add(Serial);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = SerialsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserItemSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserSerials")]
        public ResultClass<List<UnknownSerialClass>> GetUserUnknownSerials(int LoggedUser)
        {
            ResultClass<List<UnknownSerialClass>> result = new ResultClass<List<UnknownSerialClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUserUnknownSerials";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UnknownSerialClass> SerialsList = new List<UnknownSerialClass>();
                        UnknownSerialClass Serial;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            Serial = new UnknownSerialClass().PopulateUnknownSerial(fieldNames, reader);

                            Serial.Order = order;
                            SerialsList.Add(Serial);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = SerialsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUserUnknownSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("UserSerials")]
        public ResultClass<List<UnknownSerialClass>> GetUnknownSerials(int LoggedUser)
        {
            ResultClass<List<UnknownSerialClass>> result = new ResultClass<List<UnknownSerialClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetUnknownSerials";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        List<UnknownSerialClass> SerialsList = new List<UnknownSerialClass>();
                        UnknownSerialClass Serial;
                        int order = 0;
                        while (reader.Read())
                        {
                            order += 1;

                            Serial = new UnknownSerialClass().PopulateUnknownSerial(fieldNames, reader);

                            Serial.Order = order;
                            SerialsList.Add(Serial);

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = SerialsList;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetUnknownSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("UserSerials")]
        public ResultClass<ItemSerialClass> DefineUnknownSerial(int LoggedUser, int UnknownSerialId)
        {
            ResultClass<ItemSerialClass> result = new ResultClass<ItemSerialClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DefineUnknownSerial";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("UnknownSerialId", UnknownSerialId),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();                        

                        ItemSerialClass Serial;

                        int order = 0;
                        reader.Read();
                        {
                            order += 1;

                            Serial = new ItemSerialClass().PopulateItemSerial(fieldNames, reader);

                            Serial.Order = order;

                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = Serial;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DefineUnknownSerial", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }
        [SwaggerWcfTag("Agents")]
        public ResultClass<List<AgentVisitClass>> GetAgentVisits(int LoggedUser)
        {
            ResultClass<List<AgentVisitClass>> result = new ResultClass<List<AgentVisitClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAgentVisits";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        result.Result = new List<AgentVisitClass>();
                        AgentVisitClass agentVisit;
                        while (reader.Read())
                        {
                            agentVisit = new AgentVisitClass().PopulateAgentVisit(fieldNames, reader);
                            result.Result.Add(agentVisit);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "GetAgentVisits", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Agents")]
        public ResultClass<List<AgentClientClass>> CreateAgentClients(int LoggedUser, int AgentId, List<int> Clients)
        {
            ResultClass<List<AgentClientClass>> result = new ResultClass<List<AgentClientClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertAgentClients";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("AgentId", AgentId),
                    };

                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Item", typeof(string));
                            foreach (int x in Clients)
                                table.Rows.Add(x);
                        }
                        var pList = new SqlParameter("@Clients", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        result.Result = new List<AgentClientClass>();
                        AgentClientClass agentClient;
                        while (reader.Read())
                        {
                            agentClient = new AgentClientClass().PopulateAgentClient(fieldNames, reader);
                            result.Result.Add(agentClient);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "CreateAgentClients", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Agents")]
        public ResultClass<List<AgentClientClass>> GetAgentClients(int LoggedUser, int AgentId)
        {
            ResultClass<List<AgentClientClass>> result = new ResultClass<List<AgentClientClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAgentClients";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("AgentId", AgentId),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        result.Result = new List<AgentClientClass>();
                        AgentClientClass agentClient;
                        while (reader.Read())
                        {
                            agentClient = new AgentClientClass().PopulateAgentClient(fieldNames, reader);
                            result.Result.Add(agentClient);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "GetAgentClients", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Agents")]
        public ResultClass<List<UserClass>> GetAgents(int LoggedUser)
        {
            ResultClass<List<UserClass>> result = new ResultClass<List<UserClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetAgents";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        result.Result = new List<UserClass>();
                        UserClass agent;
                        while (reader.Read())
                        {
                            agent = new UserClass().PopulateUser(fieldNames, reader);
                            result.Result.Add(agent);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "GetAgents", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<List<OrderClass>> DeliverOrders(int LoggedUser, List<OrderClass> DeliveredOrders)
        {
            ResultClass<List<OrderClass>> result = new ResultClass<List<OrderClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeliverOrders";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                    };

                    {
                        DataTable table;
                        using (table = new DataTable())
                        {
                            table.Columns.Add("Id", typeof(int));
                            table.Columns.Add("Name", typeof(string));
                            foreach (OrderClass x in DeliveredOrders)
                                table.Rows.Add(x.Id, x.DeliveryDate);
                        }
                        var pList = new SqlParameter("@Orders", SqlDbType.Structured);
                        pList.Value = table;
                        Params.Add(pList);
                    }

                    cmd.Parameters.AddRange(Params.ToArray());
                    List<OrderClass> OldOrdersData = new List<OrderClass>();

                    foreach (var o in DeliveredOrders)
                    {
                        OldOrdersData.Add(GetOrder(7, o.Id).Result);
                    }
                    
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        result.Result = new List<OrderClass>();
                        OrderClass order;
                        while (reader.Read())
                        {
                            order = new OrderClass().PopulateOrderClass(fieldNames, reader);
                            order.ProcessUpdateOrderNotifications(OldOrdersData.First((o) => o.Id == order.Id));
                            result.Result.Add(order);
                        }
                        result.Code = Errors.Success;
                        result.Message = "";
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", e.InnerException.Message, "DeliverOrders", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailDeliverClass> CreateDeliverOrderDetail(int LoggedUser, int OrderDetailId, int Qty, bool IsDelivered, string Date)
        {
            ResultClass<OrderDetailDeliverClass> result = new ResultClass<OrderDetailDeliverClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertDeliverPartialOrderDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("OrderDetailId", OrderDetailId),
                        new SqlParameter("QTY", Qty),
                        new SqlParameter("Date", Date),
                        new SqlParameter("IsDelivered", IsDelivered),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OrderDetailDeliverClass orderDetailDeliver;
                        reader.Read();
                        orderDetailDeliver = new OrderDetailDeliverClass().PopulateOrderDetailDeliver(fieldNames, reader);

                        orderDetailDeliver.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetailDeliver;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateDeliverOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailDeliverClass> UpdateDeliverOrderDetail(int LoggedUser, int Id, int Qty, bool IsDelivered, string Date)
        {
            ResultClass<OrderDetailDeliverClass> result = new ResultClass<OrderDetailDeliverClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_UpdateDeliverPartialOrderDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("Id", Id),
                        new SqlParameter("QTY", Qty),
                        new SqlParameter("Date", Date),
                        new SqlParameter("IsDelivered", IsDelivered),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OrderDetailDeliverClass orderDetailDeliver;
                        reader.Read();
                        orderDetailDeliver = new OrderDetailDeliverClass().PopulateOrderDetailDeliver(fieldNames, reader);

                        orderDetailDeliver.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetailDeliver;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "UpdateDeliverOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<OrderDetailDeliverClass> DeleteDeliverOrderDetail(int LoggedUser, int Id)
        {
            ResultClass<OrderDetailDeliverClass> result = new ResultClass<OrderDetailDeliverClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_DeleteDeliverPartialOrderDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("Id", Id),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OrderDetailDeliverClass orderDetailDeliver;
                        reader.Read();
                        orderDetailDeliver = new OrderDetailDeliverClass().PopulateOrderDetailDeliver(fieldNames, reader);

                        orderDetailDeliver.Order = 1;

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetailDeliver;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "DeleteDeliverOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Order Details")]
        public ResultClass<List<OrderDetailDeliverClass>> GetDeliveriesOrderDetail(int LoggedUser, int OrderDetailId)
        {
            ResultClass<List<OrderDetailDeliverClass>> result = new ResultClass<List<OrderDetailDeliverClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetDeliveriesPartialOrderDetail";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("OrderDetailId", OrderDetailId),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        OrderDetailDeliverClass orderDetailDeliver;
                        List<OrderDetailDeliverClass> orderDetailDeliveries = new List<OrderDetailDeliverClass>();
                        while (reader.Read())
                        {
                            order = order + 1;
                            orderDetailDeliver = new OrderDetailDeliverClass().PopulateOrderDetailDeliver(fieldNames, reader);                            
                            orderDetailDeliver.Order = order;
                            orderDetailDeliveries.Add(orderDetailDeliver);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderDetailDeliveries;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetDeliveriesOrderDetail", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Orders")]
        public ResultClass<List<OrderSerialClass>> GetOrderSerials(int OrderId)
        {
            ResultClass<List<OrderSerialClass>> result = new ResultClass<List<OrderSerialClass>>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetOrderSerials";

                    List<SqlParameter> Params = new List<SqlParameter>()
                    {
                        new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                        new SqlParameter("OrderId", OrderId),
                    };

                    cmd.Parameters.AddRange(Params.ToArray());

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        int order = 0;
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        
                        List<OrderSerialClass> orderSerials = new List<OrderSerialClass>();

                        OrderSerialClass serial;
                        while (reader.Read())
                        {
                            order = order + 1;
                            serial = new OrderSerialClass().PopulateOrderSerial(fieldNames, reader);
                            serial.Order = order;
                            orderSerials.Add(serial);
                        }

                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = orderSerials;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Message = "";
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetOrderSerials", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Fatora")]
        public ResultClass<FatoraCreatePaymentResultClass> CreateFatoraPayment(FatoraCreatePaymentClass fatoraCreatePayment)
        {
            ResultClass<FatoraCreatePaymentResultClass> result = new ResultClass<FatoraCreatePaymentResultClass>();
            try
            {
                byte[] encodedAuthorization = System.Text.Encoding.UTF8.GetBytes(Config.FatoraUsername + ":" + Config.FatoraPassword);
                string FatoraAuthorization = System.Convert.ToBase64String(encodedAuthorization);

                WebRequest request = WebRequest.Create(Config.FatoraCreatePayment);
                request.Method = "POST";
                request.ContentType = "application/json; charset=UTF-8";
                request.Headers.Add("20", "application/json");
                request.Headers.Add("Authorization", "Basic "+FatoraAuthorization);

                var createPayment = new
                {
                    lang = fatoraCreatePayment.lang,
                    callbackURL = Config.StaticURL+@"API/JSON/FatoraCheckPayment",
                    terminalId = Config.FatoraTerminalId,
                    amount = fatoraCreatePayment.amount
                };

                var postData = JsonConvert.SerializeObject(createPayment);

                var data = Encoding.UTF8.GetBytes(postData);
                request.ContentLength = data.Length;
                var stream = request.GetRequestStream();
                stream.Write(data, 0, data.Length);
                WebResponse response = request.GetResponse();
                StreamReader Reader = new StreamReader(response.GetResponseStream());
                string responseLine = Reader.ReadToEnd();
                FatoraCreatePaymentResultClass fatoraCreatePaymentResult = JsonConvert.DeserializeObject<FatoraCreatePaymentResultClass>(responseLine);
                
                result.Result = fatoraCreatePaymentResult;
                result.Code = 0;
                result.Message = "";
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateFatoraPayment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Fatora")]
        public ResultClass<FatoraCheckPaymentStatusResultClass> FatoraCheckPaymentStatus(string PaymentId)
        {
            ResultClass<FatoraCheckPaymentStatusResultClass> result = new ResultClass<FatoraCheckPaymentStatusResultClass>();
            try
            {
                byte[] encodedAuthorization = System.Text.Encoding.UTF8.GetBytes(Config.FatoraUsername + ":" + Config.FatoraPassword);
                string FatoraAuthorization = System.Convert.ToBase64String(encodedAuthorization);

                WebRequest request = WebRequest.Create(Config.FatoraCheckPayment+"/"+PaymentId);
                request.Method = "GET";
                request.Headers.Add("Authorization", "Basic "+FatoraAuthorization);

                WebResponse response = request.GetResponse();
                StreamReader Reader = new StreamReader(response.GetResponseStream());
                string responseLine = Reader.ReadToEnd();
                FatoraCheckPaymentStatusResultClass fatoraCheckPaymentStatusResult = JsonConvert.DeserializeObject<FatoraCheckPaymentStatusResultClass>(responseLine);

                result.Result = fatoraCheckPaymentStatusResult;
                result.Code = 0;
                result.Message = "";
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "FatoraCheckPaymentStatus", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Fatora")]
        public ResultClass<FatoraCancelPaymentResultClass> CancelFatoraPayment(FatoraCancelPaymentClass fatoraCancelPayment)
        {
            ResultClass<FatoraCancelPaymentResultClass> result = new ResultClass<FatoraCancelPaymentResultClass>();
            try
            {
                byte[] encodedAuthorization = System.Text.Encoding.UTF8.GetBytes(Config.FatoraUsername + ":" + Config.FatoraPassword);
                string FatoraAuthorization = System.Convert.ToBase64String(encodedAuthorization);

                WebRequest request = WebRequest.Create(Config.FatoraCancelPayment);
                request.Method = "POST";
                request.ContentType = "application/json; charset=UTF-8";
                request.Headers.Add("20", "application/json");
                request.Headers.Add("Authorization", "Basic "+FatoraAuthorization);

                var cancelPayment = new
                {
                    lang = fatoraCancelPayment.lang,
                    payment_id = fatoraCancelPayment.payment_id,
                };

                var postData = JsonConvert.SerializeObject(cancelPayment);

                var data = Encoding.UTF8.GetBytes(postData);
                request.ContentLength = data.Length;
                var stream = request.GetRequestStream();
                stream.Write(data, 0, data.Length);
                WebResponse response = request.GetResponse();
                StreamReader Reader = new StreamReader(response.GetResponseStream());
                string responseLine = Reader.ReadToEnd();
                FatoraCancelPaymentResultClass fatoraCancelPaymentResult = JsonConvert.DeserializeObject<FatoraCancelPaymentResultClass>(responseLine);

                result.Result = fatoraCancelPaymentResult;
                result.Code = 0;
                result.Message = "";
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CancelFatoraPayment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("Users")]
        public ResultClass<UserClass> RemoveUser(int LoggedUser, int Id)
        {
            ResultClass<UserClass> result = new ResultClass<UserClass>();
            try
            {

                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_RemoveUser";


                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("LoggedUser", (APITestingMode) ? "7" : HttpContext.Current.Request.Headers["LoggedUser"]),
                  new SqlParameter("Id", Id),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader reader = cmd.ExecuteReader();
                    if (reader.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        reader.Read();

                        UserClass user = new UserClass().PopulateUser(fieldNames, reader);

                        user.Order = 1;

                        result.Code = Errors.Success;
                        result.Result = user;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(LoggedUser, e.Message, e.StackTrace, "1.0.3", "API", "RemoveUser", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("Device Configuration")]
        public ResultClass<FCMRegistrationClass> SubmitFCMForUnknown(FCMRegistrationClass FCMRegistration)
        {
            ResultClass<FCMRegistrationClass> result = new ResultClass<FCMRegistrationClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_SubmitFCMUnknown";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("RegistrationId", FCMRegistration.RegistrationId),
                  new SqlParameter("Platform", FCMRegistration.Platform),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        rd.Read();
                        FCMRegistrationClass fcmRegistrationClass = new FCMRegistrationClass();

                        if (!Convert.IsDBNull(rd["RegistrationId"]))
                            fcmRegistrationClass.RegistrationId = rd["RegistrationId"].ToString();
                        if (!Convert.IsDBNull(rd["Platform"]))
                            fcmRegistrationClass.Platform = rd["Platform"].ToString();

                        result.Code = Errors.Success;
                        result.Result = fcmRegistrationClass;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(-1, e.Message, e.StackTrace, "1.0.3", "API", "SubmitFCMUnknown", "", "");
                }
                result.Result = null;
                return result;
            }
        }


        [SwaggerWcfTag("ECash")]
        public ResultClass<ECashCreatePaymentResultClass> CreateECashPayment(ECashCreatePaymentClass ecashCreatePayment)
        {
            ResultClass<ECashCreatePaymentResultClass> result = new ResultClass<ECashCreatePaymentResultClass>();
            try
            {
                //byte[] encodedAuthorization = System.Text.Encoding.UTF8.GetBytes(Config.ECashMerchantId + Config.ECashMerchantSecret + ecashCreatePayment.amount.ToString()+ecashCreatePayment.orderRef);
                string encodedAuthorization = Config.ECashMerchantId + Config.ECashMerchantSecret + ecashCreatePayment.amount.ToString() + ecashCreatePayment.orderRef;
                //string stringEncodedAuthorization = System.Convert.ToBase64String(encodedAuthorization);
                string md5Authorization = FormsAuthentication.HashPasswordForStoringInConfigFile(encodedAuthorization, "MD5").ToUpper();


                string encodedCallBackUrl = HttpUtility.UrlEncode(Config.StaticURL + "API/PointsServiceAPI.svc/JSON/ECashCallBack");

                result.Result = new ECashCreatePaymentResultClass();
                result.Result.Url = Config.ECashCreatePayment + "/Checkout/Card/" + Config.ECashTerminalKey + "/" + Config.ECashMerchantId + "/" + md5Authorization + "/SYP/" + ecashCreatePayment.amount.ToString()+"/"+ecashCreatePayment.lang+"/"+ ecashCreatePayment.orderRef + "/" + encodedCallBackUrl + "/" + encodedCallBackUrl;
                result.Code = 0;
                result.Message = "";
                return result;
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "CreateECashPayment", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ECash")]
        public ResultClass<ECashCallBackResultClass> ECashCallBack(bool IsSuccess, string Message, string OrderRef, string TransactionNo, string Amount, string Token)
        {
            ResultClass<ECashCallBackResultClass> result = new ResultClass<ECashCallBackResultClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_InsertECashCallBack";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("IsSuccess", IsSuccess),
                  new SqlParameter("Message", Message),
                  new SqlParameter("TransactionNo", TransactionNo),
                  new SqlParameter("OrderRef", OrderRef),
                  new SqlParameter("Amount", Amount),
                  new SqlParameter("Token", Token),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, rd.FieldCount).Select(i => rd.GetName(i)).ToArray();

                        rd.Read();
                        ECashCallBackResultClass eachCallBackResult = new ECashCallBackResultClass().PopulateECashCallBack(fieldNames, rd);

                        result.Result = eachCallBackResult;
                        result.Code = Errors.Success;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "ECashCallBack", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

        [SwaggerWcfTag("ECash")]
        public ResultClass<ECashCallBackResultClass> GetECashCallBackResult(string OrderRef)
        {
            ResultClass<ECashCallBackResultClass> result = new ResultClass<ECashCallBackResultClass>();
            try
            {
                using (SqlConnection conn = ConnectionClass.GetDataConnection())
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = conn;
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.CommandText = "Admin_GetECashCallBackResult";
                    List<SqlParameter> Params = new List<SqlParameter>()
               {
                  new SqlParameter("OrderRef", OrderRef),
               };

                    cmd.Parameters.AddRange(Params.ToArray());
                    SqlDataReader rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        var fieldNames = Enumerable.Range(0, rd.FieldCount).Select(i => rd.GetName(i)).ToArray();

                        rd.Read();
                        ECashCallBackResultClass eachCallBackResult = new ECashCallBackResultClass().PopulateECashCallBack(fieldNames, rd);

                        result.Result = eachCallBackResult;
                        result.Code = Errors.Success;
                        return result;
                    }
                    else
                    {
                        result.Code = Errors.Success;
                        result.Result = null;
                        return result;
                    }
                }
            }
            catch (Exception e)
            {
                int code;
                if (Int32.TryParse(e.Message, out code))
                {
                    result.Code = code;
                    result.Message = Errors.GetErrorMessage(code);
                }
                else
                {
                    result.Code = Errors.UnknownError;
                    result.Message = Errors.GetErrorMessage(result.Code);
                    Errors.LogError(0, e.Message, e.StackTrace, "1.0.3", "API", "GetECashCallBackResult", e.Source, "");
                }
                result.Result = null;
                return result;
            }
        }

    }
}

 